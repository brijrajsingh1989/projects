'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('../Helpers/constants');

var ch = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LiquidText = function LiquidText(props) {
  return _react2.default.createElement(
    'g',
    { className: ch.TEXT },
    _react2.default.createElement(
      'text',
      _extends({}, props.style, { textAnchor: 'middle' }),
      _react2.default.createElement('tspan', {
        className: ch.TEXT_VALUE,
        fontSize: props.fontSizes.value * props.radius
      }),
      props.showDecimal ? _react2.default.createElement('tspan', {
        className: ch.TEXT_DECIMAL,
        dx: props.fontSizes.decimal * props.radius * -0.01,
        fontSize: props.fontSizes.decimal * props.radius
      }) : null,
      _react2.default.createElement(
        'tspan',
        {
          className: ch.TEXT_POSTFIX,
          fontSize: props.fontSizes.postfix * props.radius
        },
        props.postfix
      )
    ),
    _react2.default.createElement(
      'text',
      _extends({}, props.style, {
        className: ch.TEXT_LEGEND,
        dy: props.radius * (props.fontSizes.legend + 0.05),
        fontSize: props.radius * props.fontSizes.legend,
        textAnchor: 'middle'
      }),
      props.legend
    )
  );
};

var dShape = _propTypes2.default.shape({
  dx: _propTypes2.default.number,
  dy: _propTypes2.default.number
});

LiquidText.propTypes = {
  fontSizes: _propTypes2.default.shape({
    value: _propTypes2.default.number,
    decimal: _propTypes2.default.number,
    postfix: _propTypes2.default.number,
    legend: _propTypes2.default.number
  }),
  radius: _propTypes2.default.number,
  postfix: _propTypes2.default.string,
  legend: _propTypes2.default.string,
  style: _propTypes2.default.shape({}),
  showDecimal: _propTypes2.default.bool
};

LiquidText.defaultProps = {
  fontSizes: {
    value: 0.5,
    decimal: 0.35,
    postfix: 0.25,
    legend: 0.1
  }
};

exports.default = LiquidText;