'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cloneChildren = require('react-offcharts-core/Utils/cloneChildren');

var _cloneChildren2 = _interopRequireDefault(_cloneChildren);

var _arcDimension = require('react-offcharts-core/Helpers/arcDimension');

var _arcDimension2 = _interopRequireDefault(_arcDimension);

var _numbers = require('react-offcharts-core/Utils/numbers');

var _d3Selection = require('d3-selection');

var _d3Scale = require('d3-scale');

var _d3Ease = require('d3-ease');

var ease = _interopRequireWildcard(_d3Ease);

require('d3-transition');

var _d3Interpolate = require('d3-interpolate');

var _constants = require('../Helpers/constants');

var ch = _interopRequireWildcard(_constants);

var _dimensions = require('../Helpers/dimensions');

var dh = _interopRequireWildcard(_dimensions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Liquid = function (_Component) {
  _inherits(Liquid, _Component);

  function Liquid(props) {
    _classCallCheck(this, Liquid);

    var _this = _possibleConstructorReturn(this, (Liquid.__proto__ || Object.getPrototypeOf(Liquid)).call(this));

    if (props.innerBound > props.outerBound) {
      console.warn(ch.INNER_BIGGER_THAN_OUTER);
    } else if (props.outerBound > 1) {
      console.warn(ch.OUTER_BIGGER_THAN_ONE);
    }
    _this.iter = 0;
    return _this;
  }

  _createClass(Liquid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderChart();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      this.renderChart();
    }
  }, {
    key: 'getEasing',
    value: function getEasing() {
      var animationEase = ease[this.props.animationEase];

      if (typeof animationEase === 'function') {
        return animationEase;
      }

      return ease.easeCubicInOut;
    }
  }, {
    key: 'getAnimationTime',
    value: function getAnimationTime() {
      var animationTime = this.props.animationTime;

      if (animationTime === undefined) {
        return 2000;
      }

      return animationTime;
    }
  }, {
    key: 'animateBackAndForth',
    value: function animateBackAndForth() {
      var _this2 = this;

      // Set the sampling array to a new array of X times undefines
      // does not matter because we only use zeros
      var arr = new Array(ch.SAMPLING);

      // Get the container element
      var container = (0, _d3Selection.select)(this.container);

      // select the clippath that is going to be animated
      var wave = container.select('clipPath').select('path');

      // Get the easing type, if the user misspelled the easing or
      var animationEase = this.getEasing();

      // Get the animationtime
      var animationTime = this.getAnimationTime();

      // get the wavescale
      var waveScale = dh.getWaveScaleLimit(this.props);

      // get the scales and the area function

      var _dh$getWaveArea = dh.getWaveArea(this.props),
          waveArea = _dh$getWaveArea.waveArea,
          x = _dh$getWaveArea.x,
          y = _dh$getWaveArea.y; // { waveArea, x, y, w, h }

      // The waves movement


      var _dh$getBackAndForth = dh.getBackAndForth(),
          forthAmplitude = _dh$getBackAndForth.forthAmplitude,
          backAmplitude = _dh$getBackAndForth.backAmplitude,
          forthFrequency = _dh$getBackAndForth.forthFrequency,
          backFrequency = _dh$getBackAndForth.backFrequency;
      // get the tspan nodes


      var textValue = container.selectAll('.' + ch.TEXT_VALUE);
      var textDecimal = container.selectAll('.' + ch.TEXT_DECIMAL);

      var animation = function animation() {
        wave.transition().duration(_this2.props.animationWavesTime).ease(ease.easeSinInOut).attrTween('d', function () {
          wave.node().M = 1;
          return function (t1) {
            var amp = forthAmplitude(t1);
            var freq = forthFrequency(t1);
            var ws = amp * waveScale(_this2.props.value);
            waveArea.y0(function (d, i) {
              return y(dh.sine(ws, i, _this2.props.frequency, freq) + _this2.props.value);
            });
            wave.node().A = amp;
            wave.node().F = freq;
            return waveArea(arr);
          };
        }).transition().duration(_this2.props.animationWavesTime).ease(ease.easeSinInOut).attrTween('d', function () {
          wave.node().M = 0;
          return function (t1) {
            var amp = backAmplitude(t1);
            var freq = backFrequency(t1);
            var ws = amp * waveScale(_this2.props.value);
            waveArea.y0(function (d, i) {
              return y(dh.sine(ws, i, _this2.props.frequency, freq) + _this2.props.value);
            });
            wave.node().A = amp;
            wave.node().F = freq;
            return waveArea(arr);
          };
        }).on('end', function () {
          animation();
        });
      };

      wave.transition().duration(animationTime).ease(animationEase).attrTween('d', function () {
        var interVal = (0, _d3Interpolate.interpolate)(wave.node().old || 0, _this2.props.value);

        var _dh$getWaveValueMovem = dh.getWaveValueMovement(wave.node()),
            amplitudeScale = _dh$getWaveValueMovem.amplitudeScale,
            frequencyScale = _dh$getWaveValueMovem.frequencyScale;

        var updateNum = function updateNum(val) {
          var value = (0, _numbers.round)(val);
          var sp = (0, _numbers.splitNumber)(value);
          textValue.text(sp.number);
          textDecimal.text('' + sp.deliminator + sp.fraction);
        };

        return function (t) {
          var val = interVal(t);
          var amp = amplitudeScale(t);
          var freq = frequencyScale(t);
          var ws = amp * waveScale(val);
          waveArea.y0(function (d, i) {
            return y(dh.sine(ws, i, _this2.props.frequency, freq) + val);
          });
          wave.node().old = val;
          wave.node().A = amp;
          wave.node().F = freq;
          updateNum(val);
          return waveArea(arr);
        };
      }).on('end', function () {
        animation();
      });
    }
  }, {
    key: 'animateValue',
    value: function animateValue() {
      var _this3 = this;

      // Set the sampling array to a new array of X times undefines
      // does not matter because we only use zeros
      var arr = new Array(ch.SAMPLING);

      // Get the container element
      var container = (0, _d3Selection.select)(this.container);

      // select the clippath that is going to be animated
      var wave = container.select('clipPath').select('path');

      // Get the easing type, if the user misspelled the easing or
      var animationEase = this.getEasing();

      // Get the animationtime
      var animationTime = this.getAnimationTime();
      // get the wavescale
      var waveScale = dh.getWaveScaleLimit(this.props);
      // get the areafunction and dimensions

      var _dh$getWaveArea2 = dh.getWaveArea(this.props),
          waveArea = _dh$getWaveArea2.waveArea,
          x = _dh$getWaveArea2.x,
          y = _dh$getWaveArea2.y; // { waveArea, x, y, w, h }
      // get the text variables


      var textValue = container.selectAll('.' + ch.TEXT_VALUE);
      var textDecimal = container.selectAll('.' + ch.TEXT_DECIMAL);

      wave.transition().duration(animationTime).ease(animationEase).attrTween('d', function () {
        var interVal = (0, _d3Interpolate.interpolate)(wave.node().old || 0, _this3.props.value);
        var updateNum = function updateNum(val) {
          var value = (0, _numbers.round)(val);
          var sp = (0, _numbers.splitNumber)(value, '.');
          textValue.text(sp.number);
          textDecimal.text('.' + sp.fraction);
        };
        return function (t) {
          var val = interVal(t);
          var ws = waveScale(val);
          waveArea.y0(function (d, i) {
            return y(dh.sine(ws, i, _this3.props.frequency, 0) + val);
          });
          wave.node().old = val;
          updateNum(val);
          return waveArea(arr);
        };
      });
    }
  }, {
    key: 'animate',
    value: function animate() {
      if (this.props.animationWavesTime) {
        this.animateBackAndForth();
        return;
      }
      this.animateValue();
    }
  }, {
    key: 'draw',
    value: function draw() {
      var arr = new Array(ch.SAMPLING);
      var container = (0, _d3Selection.select)(this.container);
      var el = container.select('clipPath').select('path');
      var textValue = container.selectAll('.' + ch.TEXT_VALUE);
      var decimalValue = container.selectAll('.' + ch.TEXT_DECIMAL);

      textValue.text(parseInt(this.props.value, 10));
      el.attr('d', dh.getWave(this.props)(arr));
    }
  }, {
    key: 'renderChart',
    value: function renderChart() {
      var shouldAnimate = this.props.animationTime || this.props.animationEase;

      if (shouldAnimate) {
        this.animate();
        return;
      }

      this.draw();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var d = dh.getDimensions(this.props);
      return _react2.default.createElement(
        'g',
        {
          ref: function ref(c) {
            _this4.container = c;
          },
          transform: 'translate(' + d.cx + ',' + d.cy + ')'
        },
        (0, _cloneChildren2.default)(this.props, d)
      );
    }
  }]);

  return Liquid;
}(_react.Component);

Liquid.propTypes = {
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  outerBound: _propTypes2.default.number,
  innerBound: _propTypes2.default.number,
  animationEase: _propTypes2.default.string,
  animationTime: _propTypes2.default.number,
  animationWavesTime: _propTypes2.default.number,
  frequency: _propTypes2.default.number
};
Liquid.defaultProps = {
  amplitude: 1,
  liquidMargin: 0.005,
  waveScaleLimit: true,
  frequency: 4,
  deliminator: '.',
  postfix: ''
};
exports.default = Liquid;