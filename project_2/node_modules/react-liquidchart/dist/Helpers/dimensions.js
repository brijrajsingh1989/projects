'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBackAndForth = exports.getWaveValueMovement = exports.sine = exports.getWave = exports.getWaveScaleLimit = exports.getWaveArea = exports.getScales = exports.getInnerShape = exports.getOuterShape = exports.getDimensions = undefined;

var _d3Shape = require('d3-shape');

var _d3Scale = require('d3-scale');

var _constants = require('./constants');

var getDimensions = exports.getDimensions = function getDimensions(_ref) {
  var width = _ref.width,
      height = _ref.height,
      innerBound = _ref.innerBound,
      liquidMargin = _ref.liquidMargin,
      _ref$chartMargin = _ref.chartMargin,
      chartMargin = _ref$chartMargin === undefined ? 0 : _ref$chartMargin;

  var cx = (width - chartMargin / 2) / 2;
  var cy = (height - chartMargin / 2) / 2;
  var radius = Math.min(cx, cy);
  var inner = radius * (innerBound - liquidMargin);
  return { cx: cx, cy: cy, radius: radius, inner: inner };
};

var getOuterShape = exports.getOuterShape = function getOuterShape(_ref2) {
  var outerBound = _ref2.outerBound,
      innerBound = _ref2.innerBound,
      radius = _ref2.radius;
  return (0, _d3Shape.arc)().innerRadius(innerBound * radius).outerRadius(outerBound * radius).startAngle(0).endAngle(Math.PI * 2);
};

var getInnerShape = exports.getInnerShape = function getInnerShape(_ref3) {
  var innerBound = _ref3.innerBound,
      radius = _ref3.radius,
      liquidMargin = _ref3.liquidMargin;
  return (0, _d3Shape.arc)().innerRadius(0).outerRadius((innerBound - liquidMargin) * radius).startAngle(0).endAngle(Math.PI * 2);
};

var getScales = exports.getScales = function getScales(props) {
  var _getDimensions = getDimensions(props),
      radius = _getDimensions.radius;

  var r = radius * (props.innerBound - props.liquidMargin);
  var xR = radius * props.outerBound;
  var rx = radius * props.outerBound;
  var x = (0, _d3Scale.scaleLinear)().range([-xR, xR]).domain([0, _constants.SAMPLING]);
  var y = (0, _d3Scale.scaleLinear)().range([r, -r]).domain([0, 100]);
  return { x: x, y: y, r: r };
};

var getWaveArea = exports.getWaveArea = function getWaveArea(props) {
  var _getScales = getScales(props),
      x = _getScales.x,
      y = _getScales.y,
      r = _getScales.r;

  var waveArea = (0, _d3Shape.area)().x(function (d, i) {
    return x(i);
  }).y1(function (d) {
    return r;
  });
  return { waveArea: waveArea, x: x, y: y };
};

var getWaveScaleLimit = exports.getWaveScaleLimit = function getWaveScaleLimit(_ref4) {
  var waveScaleLimit = _ref4.waveScaleLimit,
      amplitude = _ref4.amplitude;

  if (waveScaleLimit) {
    return (0, _d3Scale.scaleLinear)().range([0, amplitude, 0]).domain([0, 50, 100]);
  }
  return (0, _d3Scale.scaleLinear)().range([amplitude, amplitude]).domain([0, 100]);
};

var getWave = exports.getWave = function getWave(props) {
  var _getScales2 = getScales(props),
      x = _getScales2.x,
      y = _getScales2.y,
      r = _getScales2.r;

  var sine = function sine(a, i, f) {
    return a * Math.sin(Math.PI * 2 / _constants.SAMPLING * i * f);
  };
  var waveScale = getWaveScaleLimit(props);
  return (0, _d3Shape.area)().x(function (d, i) {
    return x(i);
  }).y0(function (d, i) {
    return y(sine(waveScale(props.value), i, 4) + props.value);
  }).y1(function (d) {
    return r;
  });
};

var sine = exports.sine = function sine(a, i, f, s) {
  return a * Math.sin(Math.PI * 2 / _constants.SAMPLING * i * f + s);
};

var getWaveValueMovement = exports.getWaveValueMovement = function getWaveValueMovement(node) {
  var isForth = node.M === 1;
  var amplitudeTo = isForth ? -1 : 1;
  var currAmplitude = node.A || -1;
  var currFreq = node.F || 0;
  var amplitudeScale = (0, _d3Scale.scaleLinear)().range([currAmplitude, 0, 1]).domain([0, 0.5, 1]);

  var frequencyScale = (0, _d3Scale.scaleLinear)().range([currFreq, 0]).domain([0, 1]);

  return {
    amplitudeScale: amplitudeScale,
    frequencyScale: frequencyScale
  };
};

var getBackAndForth = exports.getBackAndForth = function getBackAndForth() {
  var forthFrequency = (0, _d3Scale.scaleLinear)().range([0, Math.PI]).domain([0, 1]);
  var backFrequency = (0, _d3Scale.scaleLinear)().range([Math.PI, 0]).domain([0, 1]);
  var forthAmplitude = (0, _d3Scale.scaleLinear)().range([1, -1]).domain([0, 1]);
  var backAmplitude = (0, _d3Scale.scaleLinear)().range([-1, 1]).domain([0, 1]);
  return { forthFrequency: forthFrequency, backFrequency: backFrequency, forthAmplitude: forthAmplitude, backAmplitude: backAmplitude };
};