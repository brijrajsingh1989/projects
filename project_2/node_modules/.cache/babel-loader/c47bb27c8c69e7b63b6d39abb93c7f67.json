{"ast":null,"code":"'use strict'; // ==================================================================================\n// system.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 2. System (Hardware, BIOS, Base Board)\n// ----------------------------------------------------------------------------------\n\nvar exec = require('child_process').exec;\n\nvar fs = require('fs');\n\nvar util = require('./util');\n\nvar _platform = process.platform;\n\nvar _linux = _platform === 'linux';\n\nvar _darwin = _platform === 'darwin';\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd';\n\nvar _sunos = _platform === 'sunos';\n\nfunction system(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        manufacturer: '',\n        model: 'Computer',\n        version: '',\n        serial: '-',\n        uuid: '-',\n        sku: '-'\n      };\n\n      if (_linux || _freebsd || _openbsd) {\n        exec('dmidecode -t system', function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer');\n            result.model = util.getValue(lines, 'product name');\n            result.version = util.getValue(lines, 'version');\n            result.serial = util.getValue(lines, 'serial number');\n            result.uuid = util.getValue(lines, 'uuid');\n            result.sku = util.getValue(lines, 'sku number');\n            if (result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n            if (result.manufacturer.toLowerCase().indexOf('o.e.m.') !== -1) result.manufacturer = '';\n            if (result.model.toLowerCase().indexOf('o.e.m.') !== -1) result.model = 'Computer';\n            if (result.version.toLowerCase().indexOf('o.e.m.') !== -1) result.version = '';\n            if (result.sku.toLowerCase().indexOf('o.e.m.') !== -1) result.sku = '-';\n          } // detect docker\n\n\n          if (fs.existsSync('/.dockerenv') || fs.existsSync('/.dockerinit')) {\n            result.model = 'Docker Container';\n          }\n\n          if (result.manufacturer === '' && result.model === 'Computer' && result.version === '') {\n            // still default values\n            exec('dmesg | grep -i virtual | grep -iE \"vmware|qemu|kvm|xen\"', function (error, stdout) {\n              // detect virtual machines\n              if (!error) {\n                var _lines = stdout.toString().split('\\n');\n\n                if (_lines.length > 0) result.model = 'Virtual machine';\n              }\n\n              if (result.manufacturer === '' && result.model === 'Computer' && result.version === '') {\n                // Check Raspberry Pi\n                exec('cat /proc/cpuinfo', function (error, stdout) {\n                  if (!error) {\n                    var _lines2 = stdout.toString().split('\\n');\n\n                    result.model = util.getValue(_lines2, 'hardware', ':', true).toUpperCase();\n                    result.version = util.getValue(_lines2, 'revision', ':', true).toLowerCase();\n                    result.serial = util.getValue(_lines2, 'serial', ':', true); // reference values: https://elinux.org/RPi_HardwareHistory\n\n                    if (result.model === 'BCM2835' || result.model === 'BCM2708' || result.model === 'BCM2709' || result.model === 'BCM2835' || result.model === 'BCM2837') {\n                      // Pi 3\n                      if (['a02082', 'a22082', 'a32082'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi 3 Model B';\n                        result.version = result.version + ' - Rev. 1.2';\n                      }\n\n                      if (['a020d3'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi 3 Model B';\n                        result.version = result.version + ' - Rev. 1.3';\n                      } // Pi 2 Model B\n\n\n                      if (['a01040'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi 2 Model B';\n                        result.version = result.version + ' - Rev. 1.0';\n                      }\n\n                      if (['a01041', 'a21041'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi 2 Model B';\n                        result.version = result.version + ' - Rev. 1.1';\n                      }\n\n                      if (['a22042'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi 2 Model B';\n                        result.version = result.version + ' - Rev. 1.2';\n                      } // Pi Zero\n\n\n                      if (['900092'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Zero';\n                        result.version = result.version + ' - Rev 1.2';\n                      }\n\n                      if (['900093', '920093'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Zero';\n                        result.version = result.version + ' - Rev 1.3';\n                      }\n\n                      if (['9000c1'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Zero W';\n                        result.version = result.version + ' - Rev 1.1';\n                      } // A, B, A+ B+\n\n\n                      if (['0002', '0003'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Model B';\n                        result.version = result.version + ' - Rev 1.0';\n                      }\n\n                      if (['0004', '0005', '0006', '000d', '000e', '000f'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Model B';\n                        result.version = result.version + ' - Rev 2.0';\n                      }\n\n                      if (['0007', '0008', '0009'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Model A';\n                        result.version = result.version + ' - Rev 2.0';\n                      }\n\n                      if (['0010'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Model B+';\n                        result.version = result.version + ' - Rev 1.0';\n                      }\n\n                      if (['0012'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Model A+';\n                        result.version = result.version + ' - Rev 1.0';\n                      }\n\n                      if (['0013'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Model B+';\n                        result.version = result.version + ' - Rev 1.2';\n                      }\n\n                      if (['0015'].indexOf(result.version) >= 0) {\n                        result.model = result.model + ' - Pi Model A+';\n                        result.version = result.version + ' - Rev 1.1';\n                      }\n\n                      if (result.model.indexOf('Pi') !== -1 && result.version) {\n                        // Pi, Pi Zero\n                        result.manufacturer = 'Raspberry Pi Foundation';\n                      }\n                    }\n                  }\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                });\n              } else {\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              }\n            });\n          } else {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.uuid = util.getValue(lines, 'ioplatformuuid', '=', true);\n            result.sku = util.getValue(lines, 'board-id', '=', true);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          exec(util.getWmic() + ' csproduct get /value', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              // let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0)[0].trim().split(/\\s\\s+/);\n              var lines = stdout.split('\\r\\n');\n              result.manufacturer = util.getValue(lines, 'vendor', '=');\n              result.model = util.getValue(lines, 'name', '=');\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'identifyingnumber', '=');\n              result.uuid = util.getValue(lines, 'uuid', '=');\n              exec(util.getWmic() + ' /namespace:\\\\\\\\root\\\\wmi path MS_SystemInformation get /value', util.execOptsWin, function (error, stdout) {\n                if (!error) {\n                  var _lines3 = stdout.split('\\r\\n');\n\n                  result.sku = util.getValue(_lines3, 'systemsku', '=');\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              });\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.system = system;\n\nfunction bios(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        vendor: '',\n        version: '',\n        releaseDate: '',\n        revision: ''\n      };\n      var cmd = '';\n\n      if (_linux || _freebsd || _openbsd) {\n        if (process.arch === 'arm') {\n          cmd = 'cat /proc/cpuinfo | grep Serial';\n        } else {\n          cmd = 'dmidecode --type 0';\n        }\n\n        exec(cmd, function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().split('\\n');\n            result.vendor = util.getValue(lines, 'Vendor');\n            result.version = util.getValue(lines, 'Version');\n            var datetime = util.getValue(lines, 'Release Date');\n            result.releaseDate = util.parseDateTime(datetime).date;\n            result.revision = util.getValue(lines, 'BIOS Revision');\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        result.vendor = 'Apple Inc.';\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_sunos) {\n        result.vendor = 'Sun Microsystems';\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        // TODO: check BIOS windows\n        try {\n          exec(util.getWmic() + ' bios get /value', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              var lines = stdout.toString().split('\\r\\n');\n              var description = util.getValue(lines, 'description', '=');\n\n              if (description.indexOf(' Version ') !== -1) {\n                // ... Phoenix ROM BIOS PLUS Version 1.10 A04\n                result.vendor = description.split(' Version ')[0].trim();\n                result.version = description.split(' Version ')[1].trim();\n              } else if (description.indexOf(' Ver: ') !== -1) {\n                // ... BIOS Date: 06/27/16 17:50:16 Ver: 1.4.5\n                result.vendor = util.getValue(lines, 'manufacturer', '=');\n                result.version = description.split(' Ver: ')[1].trim();\n              } else {\n                result.vendor = util.getValue(lines, 'manufacturer', '=');\n                result.version = util.getValue(lines, 'version', '=');\n              }\n\n              result.releaseDate = util.getValue(lines, 'releasedate', '=');\n\n              if (result.releaseDate.length >= 10) {\n                result.releaseDate = result.releaseDate.substr(0, 4) + '-' + result.releaseDate.substr(4, 2) + '-' + result.releaseDate.substr(6, 2);\n              }\n\n              result.revision = util.getValue(lines, 'buildnumber', '=');\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.bios = bios;\n\nfunction baseboard(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        manufacturer: '',\n        model: '',\n        version: '',\n        serial: '-',\n        assetTag: '-'\n      };\n      var cmd = '';\n\n      if (_linux || _freebsd || _openbsd) {\n        if (process.arch === 'arm') {\n          cmd = 'cat /proc/cpuinfo | grep Serial'; // 'BCM2709', 'BCM2835', 'BCM2708' -->\n        } else {\n          cmd = 'dmidecode -t 2';\n        }\n\n        exec(cmd, function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().split('\\n');\n            result.manufacturer = util.getValue(lines, 'Manufacturer');\n            result.model = util.getValue(lines, 'Product Name');\n            result.version = util.getValue(lines, 'Version');\n            result.serial = util.getValue(lines, 'Serial Number');\n            result.assetTag = util.getValue(lines, 'Asset Tag');\n            if (result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n            if (result.assetTag.toLowerCase().indexOf('o.e.m.') !== -1) result.assetTag = '-';\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.assetTag = util.getValue(lines, 'board-id', '=', true);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          exec(util.getWmic() + ' baseboard get /value', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              var lines = stdout.toString().split('\\r\\n');\n              result.manufacturer = util.getValue(lines, 'manufacturer', '=');\n              result.model = util.getValue(lines, 'model', '=');\n\n              if (!result.model) {\n                result.model = util.getValue(lines, 'product', '=');\n              }\n\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'serialnumber', '=');\n              result.assetTag = util.getValue(lines, 'partnumber', '=');\n\n              if (!result.assetTag) {\n                result.assetTag = util.getValue(lines, 'sku', '=');\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.baseboard = baseboard;","map":null,"metadata":{},"sourceType":"script"}