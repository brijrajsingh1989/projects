{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport 'react-virtualized/styles.css';\nimport React from 'react';\nimport PureRenderMixin from 'rc-util/lib/PureRenderMixin';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport 'core-js/fn/array/includes';\nimport SelectList from './selectList';\nimport Operation from './operation';\nimport prefixCls from './constants';\n\nfunction noop() {}\n\nvar Transfer = function (_React$Component) {\n  _inherits(Transfer, _React$Component);\n\n  function Transfer(props) {\n    _classCallCheck(this, Transfer);\n\n    var _this = _possibleConstructorReturn(this, (Transfer.__proto__ || _Object$getPrototypeOf(Transfer)).call(this, props));\n\n    _this.state = {\n      leftSource: [],\n      rightSrouce: [],\n      sourceSelectedKeys: [],\n      targetSelectedKeys: []\n    };\n    _this.handleSelect = _this.handleSelect.bind(_this);\n    _this.initStateByProps = _this.initStateByProps.bind(_this);\n    _this.moveTo = _this.moveTo.bind(_this);\n    _this.moveToLeft = _this.moveToLeft.bind(_this);\n    _this.moveToRight = _this.moveToRight.bind(_this);\n    return _this;\n  }\n\n  _createClass(Transfer, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.initStateByProps(this.props);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.dataSource !== this.props.dataSource || nextProps.targetKeys !== this.props.targetKeys || nextProps.selectedKeys !== this.props.selectedKeys) {\n        this.initStateByProps(nextProps, true);\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return PureRenderMixin.shouldComponentUpdate.apply(this, args);\n    }\n  }, {\n    key: 'getSelectedKeysName',\n    value: function getSelectedKeysName(direction) {\n      return direction === 'left' ? 'sourceSelectedKeys' : 'targetSelectedKeys';\n    }\n  }, {\n    key: 'initStateByProps',\n    value: function initStateByProps(props, update) {\n      var leftSource = [];\n      var rightSrouce = new Array(props.targetKeys.length);\n      var sourceSelectedKeys = [];\n      var targetSelectedKeys = [];\n      var oldSourceSelectedKeys = this.state.sourceSelectedKeys;\n      var oldTargetSelectedKeys = this.state.targetSelectedKeys;\n      props.dataSource.forEach(function (item) {\n        if (props.rowKey) {\n          item.key = props.rowKey(item); // eslint-disable-line\n        } // rightSource should be ordered by targetKeys\n        // leftSource should be ordered by dataSource\n\n\n        var indexOfKey = props.targetKeys.indexOf(item.key);\n\n        if (indexOfKey !== -1) {\n          rightSrouce[indexOfKey] = item;\n        } else {\n          leftSource.push(item);\n        }\n\n        if (!props.selectedKeys && update) {\n          // fitler not exist keys\n          if (oldSourceSelectedKeys.includes(item.key) && !props.targetKeys.includes(item.key)) {\n            sourceSelectedKeys.push(item.key);\n          }\n\n          if (oldTargetSelectedKeys.includes(item.key) && props.targetKeys.includes(item.key)) {\n            targetSelectedKeys.push(item.key);\n          }\n        }\n      });\n\n      if (props.selectedKeys) {\n        props.selectedKeys.forEach(function (key) {\n          if (props.targetKeys.includes(key)) {\n            targetSelectedKeys.push(key);\n          } else {\n            sourceSelectedKeys.push(key);\n          }\n        });\n      }\n\n      this.setState({\n        leftSource: leftSource,\n        rightSrouce: rightSrouce,\n        sourceSelectedKeys: sourceSelectedKeys,\n        targetSelectedKeys: targetSelectedKeys\n      });\n    }\n  }, {\n    key: 'handleSelect',\n    value: function handleSelect(direction, selectedKeys) {\n      var leftKeys = direction === 'left' ? selectedKeys : this.state.sourceSelectedKeys;\n      var rightKeys = direction === 'right' ? selectedKeys : this.state.targetSelectedKeys;\n      var onSelectChange = this.props.onSelectChange;\n\n      if (onSelectChange) {\n        onSelectChange(leftKeys, rightKeys);\n      }\n\n      if (!this.props.selectedKeys) {\n        this.setState({\n          sourceSelectedKeys: leftKeys,\n          targetSelectedKeys: rightKeys\n        });\n      }\n    }\n  }, {\n    key: 'moveTo',\n    value: function moveTo(direction) {\n      var _props = this.props,\n          _props$targetKeys = _props.targetKeys,\n          targetKeys = _props$targetKeys === undefined ? [] : _props$targetKeys,\n          _props$dataSource = _props.dataSource,\n          dataSource = _props$dataSource === undefined ? [] : _props$dataSource,\n          onChange = _props.onChange;\n      var _state = this.state,\n          sourceSelectedKeys = _state.sourceSelectedKeys,\n          targetSelectedKeys = _state.targetSelectedKeys;\n      var moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys;\n      var newMoveKeys = []; // disable key can be selected in props, so there should fitler disabled keys\n\n      dataSource.forEach(function (item) {\n        if (!item.disabled && moveKeys.includes(item.key)) {\n          newMoveKeys.push(item.key);\n        }\n      }); // move items to target box\n\n      var newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(function (targetKey) {\n        return newMoveKeys.indexOf(targetKey) === -1;\n      }); // empty checked keys\n\n      var oppositeDirection = direction === 'right' ? 'left' : 'right';\n      this.setState(_defineProperty({}, this.getSelectedKeysName(oppositeDirection), []));\n      this.handleSelect(oppositeDirection, []);\n\n      if (onChange) {\n        onChange(newTargetKeys, direction, newMoveKeys);\n      }\n    }\n  }, {\n    key: 'moveToLeft',\n    value: function moveToLeft() {\n      this.moveTo('left');\n    }\n  }, {\n    key: 'moveToRight',\n    value: function moveToRight() {\n      this.moveTo('right');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state2 = this.state,\n          sourceSelectedKeys = _state2.sourceSelectedKeys,\n          targetSelectedKeys = _state2.targetSelectedKeys;\n      var _props2 = this.props,\n          titles = _props2.titles,\n          className = _props2.className,\n          filterOption = _props2.filterOption,\n          showSearch = _props2.showSearch,\n          footer = _props2.footer,\n          notFoundContent = _props2.notFoundContent,\n          searchPlaceholder = _props2.searchPlaceholder;\n      var leftActive = targetSelectedKeys.length > 0;\n      var rightActive = sourceSelectedKeys.length > 0;\n      var cls = classNames(_defineProperty({}, '' + prefixCls, true), className);\n      return React.createElement('div', {\n        className: cls\n      }, React.createElement(SelectList, {\n        dataSource: this.state.leftSource,\n        render: this.props.render,\n        selectedKeys: this.state.sourceSelectedKeys,\n        handleSelect: function handleSelect(selectedKeys) {\n          return _this2.handleSelect('left', selectedKeys);\n        },\n        showSearch: showSearch,\n        filterOption: filterOption,\n        itemsUnit: 'items',\n        itemUnit: 'item',\n        titleText: titles[0],\n        rowHeight: this.props.rowHeight,\n        style: this.props.listStyle,\n        footer: footer,\n        notFoundContent: notFoundContent,\n        searchPlaceholder: searchPlaceholder\n      }), React.createElement(Operation, {\n        className: prefixCls + '-operation',\n        leftActive: leftActive,\n        rightActive: rightActive,\n        moveToLeft: this.moveToLeft,\n        moveToRight: this.moveToRight,\n        leftArrowText: this.props.operations[0],\n        rightArrowText: this.props.operations[1]\n      }), React.createElement(SelectList, {\n        dataSource: this.state.rightSrouce,\n        render: this.props.render,\n        selectedKeys: this.state.targetSelectedKeys,\n        handleSelect: function handleSelect(selectedKeys) {\n          return _this2.handleSelect('right', selectedKeys);\n        },\n        showSearch: showSearch,\n        filterOption: filterOption,\n        itemsUnit: 'items',\n        itemUnit: 'item',\n        titleText: titles[1],\n        rowHeight: this.props.rowHeight,\n        style: this.props.listStyle,\n        footer: footer,\n        notFoundContent: notFoundContent,\n        searchPlaceholder: searchPlaceholder\n      }));\n    }\n  }]);\n\n  return Transfer;\n}(React.Component);\n\nexport default Transfer;\nTransfer.defaultProps = {\n  dataSource: [],\n  selectedKeys: undefined,\n  onSelectChange: undefined,\n  titles: ['', ''],\n  className: undefined,\n  filterOption: undefined,\n  listStyle: {\n    width: 200,\n    height: 300\n  },\n  operations: ['', ''],\n  showSearch: false,\n  footer: noop,\n  notFoundContent: 'Not Found',\n  searchPlaceholder: 'Search here',\n  rowKey: undefined,\n  onChange: undefined\n};\nTransfer.propTypes = {\n  dataSource: PropTypes.array,\n  render: PropTypes.func.isRequired,\n  targetKeys: PropTypes.array.isRequired,\n  selectedKeys: PropTypes.array,\n  onChange: PropTypes.func,\n  onSelectChange: PropTypes.func,\n  listStyle: PropTypes.shape({\n    height: PropTypes.number.isRequired,\n    // not support %\n    width: PropTypes.any\n  }),\n  className: PropTypes.string,\n  titles: PropTypes.array,\n  operations: PropTypes.array,\n  showSearch: PropTypes.bool,\n  filterOption: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  notFoundContent: PropTypes.string,\n  rowHeight: PropTypes.number.isRequired,\n  footer: PropTypes.func,\n  rowKey: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}