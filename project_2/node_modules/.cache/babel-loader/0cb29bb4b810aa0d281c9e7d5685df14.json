{"ast":null,"code":"'use strict'; // ==================================================================================\n// osinfo.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 3. Operating System\n// ----------------------------------------------------------------------------------\n\nvar os = require('os');\n\nvar exec = require('child_process').exec;\n\nvar util = require('./util');\n\nvar fs = require('fs');\n\nvar _platform = process.platform;\n\nvar _linux = _platform === 'linux';\n\nvar _darwin = _platform === 'darwin';\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd';\n\nvar _sunos = _platform === 'sunos';\n\nvar NOT_SUPPORTED = 'not supported'; // --------------------------\n// Get current time and OS uptime\n\nfunction time() {\n  var t = new Date().toString().split(' ');\n  return {\n    current: Date.now(),\n    uptime: os.uptime(),\n    timezone: t.length >= 7 ? t[5] : '',\n    timezoneName: t.length >= 7 ? t.slice(6).join(' ').replace(/\\(/g, '').replace(/\\)/g, '') : ''\n  };\n}\n\nexports.time = time; // --------------------------\n// Get logo filename of OS distribution\n\nfunction getLogoFile(distro) {\n  distro = distro || '';\n  distro = distro.toLowerCase();\n  var result = _platform;\n\n  if (_windows) {\n    result = 'windows';\n  } else if (distro.indexOf('mac os') !== -1) {\n    result = 'apple';\n  } else if (distro.indexOf('arch') !== -1) {\n    result = 'arch';\n  } else if (distro.indexOf('centos') !== -1) {\n    result = 'centos';\n  } else if (distro.indexOf('coreos') !== -1) {\n    result = 'coreos';\n  } else if (distro.indexOf('debian') !== -1) {\n    result = 'debian';\n  } else if (distro.indexOf('deepin') !== -1) {\n    result = 'deepin';\n  } else if (distro.indexOf('elementary') !== -1) {\n    result = 'elementary';\n  } else if (distro.indexOf('fedora') !== -1) {\n    result = 'fedora';\n  } else if (distro.indexOf('gentoo') !== -1) {\n    result = 'gentoo';\n  } else if (distro.indexOf('mageia') !== -1) {\n    result = 'mageia';\n  } else if (distro.indexOf('mandriva') !== -1) {\n    result = 'mandriva';\n  } else if (distro.indexOf('manjaro') !== -1) {\n    result = 'manjaro';\n  } else if (distro.indexOf('mint') !== -1) {\n    result = 'mint';\n  } else if (distro.indexOf('openbsd') !== -1) {\n    result = 'openbsd';\n  } else if (distro.indexOf('freebsd') !== -1) {\n    result = 'freebsd';\n  } else if (distro.indexOf('opensuse') !== -1) {\n    result = 'opensuse';\n  } else if (distro.indexOf('pclinuxos') !== -1) {\n    result = 'pclinuxos';\n  } else if (distro.indexOf('puppy') !== -1) {\n    result = 'puppy';\n  } else if (distro.indexOf('raspbian') !== -1) {\n    result = 'raspbian';\n  } else if (distro.indexOf('reactos') !== -1) {\n    result = 'reactos';\n  } else if (distro.indexOf('redhat') !== -1) {\n    result = 'redhat';\n  } else if (distro.indexOf('slackware') !== -1) {\n    result = 'slackware';\n  } else if (distro.indexOf('sugar') !== -1) {\n    result = 'sugar';\n  } else if (distro.indexOf('steam') !== -1) {\n    result = 'steam';\n  } else if (distro.indexOf('suse') !== -1) {\n    result = 'suse';\n  } else if (distro.indexOf('mate') !== -1) {\n    result = 'ubuntu-mate';\n  } else if (distro.indexOf('lubuntu') !== -1) {\n    result = 'lubuntu';\n  } else if (distro.indexOf('xubuntu') !== -1) {\n    result = 'xubuntu';\n  } else if (distro.indexOf('ubuntu') !== -1) {\n    result = 'ubuntu';\n  } else if (distro.indexOf('solaris') !== -1) {\n    result = 'solaris';\n  } else if (distro.indexOf('tails') !== -1) {\n    result = 'tails';\n  } else if (distro.indexOf('robolinux') !== -1) {\n    result = 'robolinux';\n  }\n\n  return result;\n} // --------------------------\n// OS Information\n\n\nfunction osInfo(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        platform: _platform === 'Windows_NT' ? 'Windows' : _platform,\n        distro: 'unknown',\n        release: 'unknown',\n        codename: '',\n        kernel: os.release(),\n        arch: os.arch(),\n        hostname: os.hostname(),\n        codepage: '',\n        logofile: '',\n        serial: '',\n        build: ''\n      };\n\n      if (_linux) {\n        exec('cat /etc/*-release', function (error, stdout) {\n          //if (!error) {\n\n          /**\n           * @namespace\n           * @property {string}  DISTRIB_ID\n           * @property {string}  NAME\n           * @property {string}  DISTRIB_RELEASE\n           * @property {string}  VERSION_ID\n           * @property {string}  DISTRIB_CODENAME\n           */\n          var release = {};\n          var lines = stdout.toString().split('\\n');\n          lines.forEach(function (line) {\n            if (line.indexOf('=') !== -1) {\n              release[line.split('=')[0].trim().toUpperCase()] = line.split('=')[1].trim();\n            }\n          });\n          result.distro = (release.DISTRIB_ID || release.NAME || 'unknown').replace(/\"/g, '');\n          result.logofile = getLogoFile(result.distro);\n          result.release = (release.DISTRIB_RELEASE || release.VERSION_ID || 'unknown').replace(/\"/g, '');\n          result.codename = (release.DISTRIB_CODENAME || '').replace(/\"/g, '');\n          result.codepage = util.getCodepage(); //}\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_freebsd || _openbsd) {\n        exec('sysctl kern.ostype kern.osrelease kern.osrevision kern.hostuuid', function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().split('\\n');\n            result.distro = util.getValue(lines, 'kern.ostype');\n            result.logofile = getLogoFile(result.distro);\n            result.release = util.getValue(lines, 'kern.osrelease').split('-')[0];\n            result.serial = util.getValue(lines, 'kern.uuid');\n            result.codename = '';\n            result.codepage = util.getCodepage();\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('sw_vers; sysctl kern.ostype kern.osrelease kern.osrevision kern.uuid', function (error, stdout) {\n          var lines = stdout.toString().split('\\n');\n          result.serial = util.getValue(lines, 'kern.uuid');\n          result.distro = util.getValue(lines, 'ProductName');\n          result.release = util.getValue(lines, 'ProductVersion');\n          result.build = util.getValue(lines, 'BuildVersion');\n          result.logofile = getLogoFile(result.distro);\n          result.codepage = util.getCodepage();\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        result.release = result.kernel;\n        exec('uname -o', function (error, stdout) {\n          var lines = stdout.toString().split('\\n');\n          result.distro = lines[0];\n          result.logofile = getLogoFile(result.distro);\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        result.logofile = getLogoFile();\n        result.release = result.kernel;\n\n        try {\n          util.execWin(util.getWmic() + ' os get /value', util.execOptsWin, function (error, stdout) {\n            var lines = stdout.toString().split('\\r\\n');\n            result.distro = util.getValue(lines, 'Caption', '=').trim();\n            result.serial = util.getValue(lines, 'SerialNumber', '=').trim();\n            result.build = util.getValue(lines, 'BuildNumber', '=').trim();\n            result.codepage = util.getCodepage();\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.osInfo = osInfo;\n\nfunction versions(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        kernel: os.release(),\n        openssl: process.versions.openssl,\n        systemOpenssl: '',\n        systemOpensslLib: '',\n        node: process.versions.node,\n        v8: process.versions.v8,\n        npm: '',\n        yarn: '',\n        pm2: '',\n        gulp: '',\n        grunt: '',\n        git: '',\n        tsc: '',\n        mysql: '',\n        redis: '',\n        mongodb: '',\n        nginx: '',\n        php: '',\n        docker: '',\n        postfix: '',\n        postgresql: ''\n      };\n\n      var functionProcessed = function () {\n        var totalFunctions = 16;\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        };\n      }();\n\n      try {\n        exec('openssl version', function (error, stdout) {\n          if (!error) {\n            var openssl_string = stdout.toString().split('\\n')[0].trim();\n            var openssl = openssl_string.split(' ');\n            result.systemOpenssl = openssl.length > 0 ? openssl[1] : openssl[0];\n            result.systemOpensslLib = openssl.length > 0 ? openssl[0] : 'openssl';\n          }\n\n          functionProcessed();\n        });\n        exec('npm -v', function (error, stdout) {\n          if (!error) {\n            result.npm = stdout.toString().split('\\n')[0];\n          }\n\n          functionProcessed();\n        });\n        exec('pm2 -v', function (error, stdout) {\n          if (!error) {\n            var pm2 = stdout.toString().split('\\n')[0].trim();\n\n            if (!pm2.startsWith('[PM2]')) {\n              result.pm2 = pm2;\n            }\n          }\n\n          functionProcessed();\n        });\n        exec('yarn --version', function (error, stdout) {\n          if (!error) {\n            result.yarn = stdout.toString().split('\\n')[0];\n          }\n\n          functionProcessed();\n        });\n        exec('gulp --version', function (error, stdout) {\n          if (!error) {\n            var gulp = stdout.toString().split('\\n')[0] || '';\n            result.gulp = (gulp.toLowerCase().split('version')[1] || '').trim();\n          }\n\n          functionProcessed();\n        });\n        exec('tsc --version', function (error, stdout) {\n          if (!error) {\n            var tsc = stdout.toString().split('\\n')[0] || '';\n            result.tsc = (tsc.toLowerCase().split('version')[1] || '').trim();\n          }\n\n          functionProcessed();\n        });\n        exec('grunt --version', function (error, stdout) {\n          if (!error) {\n            var grunt = stdout.toString().split('\\n')[0] || '';\n            result.grunt = (grunt.toLowerCase().split('cli v')[1] || '').trim();\n          }\n\n          functionProcessed();\n        });\n\n        if (_darwin) {\n          var filename = '/Library/Developer/CommandLineTools/';\n          fs.access(filename, fs.constants.F_OK, function (err) {\n            if (!err) {\n              exec('git --version', function (error, stdout) {\n                if (!error) {\n                  var git = stdout.toString().split('\\n')[0] || '';\n                  git = (git.toLowerCase().split('version')[1] || '').trim();\n                  result.git = (git.split(' ')[0] || '').trim();\n                }\n\n                functionProcessed();\n              });\n            }\n          });\n        } else {\n          exec('git --version', function (error, stdout) {\n            if (!error) {\n              var git = stdout.toString().split('\\n')[0] || '';\n              git = (git.toLowerCase().split('version')[1] || '').trim();\n              result.git = (git.split(' ')[0] || '').trim();\n            }\n\n            functionProcessed();\n          });\n        }\n\n        exec('nginx -v', function (error, stdout) {\n          if (!error) {\n            var nginx = stdout.toString().split('\\n')[0] || '';\n            result.nginx = (nginx.toLowerCase().split('/')[1] || '').trim();\n          }\n\n          functionProcessed();\n        });\n        exec('mysql -V', function (error, stdout) {\n          if (!error) {\n            var mysql = stdout.toString().split('\\n')[0] || '';\n            mysql = (mysql.toLowerCase().split(',')[0] || '').trim();\n            var parts = mysql.split(' ');\n            result.mysql = (parts[parts.length - 1] || '').trim();\n          }\n\n          functionProcessed();\n        });\n        exec('php -v', function (error, stdout) {\n          if (!error) {\n            var php = stdout.toString().split('\\n')[0] || '';\n            var parts = php.split('(');\n\n            if (parts[0].indexOf('-')) {\n              parts = parts[0].split('-');\n            }\n\n            result.php = parts[0].replace(/[^0-9.]/g, '');\n          }\n\n          functionProcessed();\n        });\n        exec('redis-server --version', function (error, stdout) {\n          if (!error) {\n            var redis = stdout.toString().split('\\n')[0] || '';\n            var parts = redis.split(' ');\n            result.redis = util.getValue(parts, 'v', '=', true);\n          }\n\n          functionProcessed();\n        });\n        exec('docker --version', function (error, stdout) {\n          if (!error) {\n            var docker = stdout.toString().split('\\n')[0] || '';\n            var parts = docker.split(' ');\n            result.docker = parts.length > 2 && parts[2].endsWith(',') ? parts[2].slice(0, -1) : '';\n          }\n\n          functionProcessed();\n        });\n        exec('postconf -d | grep mail_version', function (error, stdout) {\n          if (!error) {\n            var postfix = stdout.toString().split('\\n') || [];\n            result.postfix = util.getValue(postfix, 'mail_version', '=', true);\n          }\n\n          functionProcessed();\n        });\n        exec('mongod --version', function (error, stdout) {\n          if (!error) {\n            var mongodb = stdout.toString().split('\\n')[0] || '';\n            result.mongodb = (mongodb.toLowerCase().split(',')[0] || '').replace(/[^0-9.]/g, '');\n          }\n\n          functionProcessed();\n        });\n\n        if (_linux) {\n          exec('locate bin/postgres', function (error, stdout) {\n            if (!error) {\n              var postgresqlBin = stdout.toString().split('\\n').sort();\n\n              if (postgresqlBin.length) {\n                exec(postgresqlBin[postgresqlBin.length - 1] + ' -V', function (error, stdout) {\n                  if (!error) {\n                    var postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n                    result.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n                  }\n\n                  functionProcessed();\n                });\n              } else {\n                functionProcessed();\n              }\n            } else {\n              functionProcessed();\n            }\n          });\n        } else {\n          exec('postgres -V', function (error, stdout) {\n            if (!error) {\n              var postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n              result.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n            }\n\n            functionProcessed();\n          });\n        }\n      } catch (e) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.versions = versions;\n\nfunction shell(callback) {\n  return new Promise(function (resolve, reject) {\n    process.nextTick(function () {\n      if (_windows) {\n        var error = new Error(NOT_SUPPORTED);\n\n        if (callback) {\n          callback(NOT_SUPPORTED);\n        }\n\n        reject(error);\n      }\n\n      var result = '';\n      exec('echo $SHELL', function (error, stdout) {\n        if (!error) {\n          result = stdout.toString().split('\\n')[0];\n        }\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.shell = shell;\n\nfunction uuid(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        os: ''\n      };\n      var parts;\n\n      if (_darwin) {\n        exec('ioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID', function (error, stdout) {\n          if (!error) {\n            parts = stdout.toString().split('\\n')[0].replace(/\"/g, '').split('=');\n            result.os = parts.length > 1 ? parts[1].trim().toLowerCase() : '';\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_linux) {\n        exec('( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :', function (error, stdout) {\n          if (!error) {\n            result.os = stdout.toString().split('\\n')[0].trim().toLowerCase();\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_freebsd || _openbsd) {\n        exec('kenv -q smbios.system.uuid', function (error, stdout) {\n          if (!error) {\n            result.os = stdout.toString().split('\\n')[0].trim().toLowerCase();\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        exec('%windir%\\\\System32\\\\reg query \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\" /v MachineGuid', util.execOptsWin, function (error, stdout) {\n          if (!error) {\n            parts = stdout.toString().split('\\n\\r')[0].split('REG_SZ');\n            result.os = parts.length > 1 ? parts[1].replace(/\\r+|\\n+|\\s+/ig, '').toLowerCase() : '';\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n    });\n  });\n}\n\nexports.uuid = uuid;","map":null,"metadata":{},"sourceType":"script"}