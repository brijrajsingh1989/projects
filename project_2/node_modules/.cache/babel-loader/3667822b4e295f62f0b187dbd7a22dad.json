{"ast":null,"code":"'use strict'; // ==================================================================================\n// battery.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 6. Battery\n// ----------------------------------------------------------------------------------\n\nvar exec = require('child_process').exec;\n\nvar fs = require('fs');\n\nvar util = require('./util');\n\nvar _platform = process.platform;\n\nvar _linux = _platform === 'linux';\n\nvar _darwin = _platform === 'darwin';\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd';\n\nvar _sunos = _platform === 'sunos';\n\nmodule.exports = function (callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        hasbattery: false,\n        cyclecount: 0,\n        ischarging: false,\n        maxcapacity: 0,\n        currentcapacity: 0,\n        percent: 0,\n        timeremaining: -1,\n        acconnected: true,\n        type: '',\n        model: '',\n        manufacturer: '',\n        serial: ''\n      };\n\n      if (_linux) {\n        var battery_path = '';\n\n        if (fs.existsSync('/sys/class/power_supply/BAT1/uevent')) {\n          battery_path = '/sys/class/power_supply/BAT1/';\n        } else if (fs.existsSync('/sys/class/power_supply/BAT0/uevent')) {\n          battery_path = '/sys/class/power_supply/BAT0/';\n        }\n\n        if (battery_path) {\n          exec('cat ' + battery_path + 'uevent', function (error, stdout) {\n            if (!error) {\n              var lines = stdout.toString().split('\\n');\n              result.ischarging = util.getValue(lines, 'POWER_SUPPLY_STATUS', '=').toLowerCase() === 'charging';\n              result.acconnected = result.ischarging;\n              result.cyclecount = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CYCLE_COUNT', '='), 10);\n              result.maxcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_FULL', '='), 10);\n\n              if (!result.maxcapacity) {\n                result.maxcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_FULL', '='), 10);\n              }\n\n              result.currentcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_NOW', '='), 10);\n\n              if (!result.currentcapacity) {\n                result.currentcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_NOW', '='), 10);\n              }\n\n              var percent = util.getValue(lines, 'POWER_SUPPLY_CAPACITY', '=');\n              var energy = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_NOW', '='), 10);\n              var power = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_POWER_NOW', '='), 10);\n              var current = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CURRENT_NOW', '='), 10);\n              result.percent = parseInt('0' + percent, 10);\n\n              if (result.maxcapacity && result.currentcapacity) {\n                result.hasbattery = true;\n\n                if (!percent) {\n                  result.percent = 100.0 * result.currentcapacity / result.maxcapacity;\n                }\n              }\n\n              if (result.ischarging) {\n                result.hasbattery = true;\n              }\n\n              if (energy && power) {\n                result.timeremaining = Math.floor(energy / power * 60);\n              } else if (current && result.currentcapacity) {\n                result.timeremaining = Math.floor(result.currentcapacity / current * 60);\n              }\n\n              result.type = util.getValue(lines, 'POWER_SUPPLY_TECHNOLOGY', '=');\n              result.model = util.getValue(lines, 'POWER_SUPPLY_MODEL_NAME', '=');\n              result.manufacturer = util.getValue(lines, 'POWER_SUPPLY_MANUFACTURER', '=');\n              result.serial = util.getValue(lines, 'POWER_SUPPLY_SERIAL_NUMBER', '=');\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } else {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_freebsd || _openbsd) {\n        exec('sysctl hw.acpi.battery hw.acpi.acline', function (error, stdout) {\n          var lines = stdout.toString().split('\\n');\n          var batteries = parseInt('0' + util.getValue(lines, 'hw.acpi.battery.units'), 10);\n          var percent = parseInt('0' + util.getValue(lines, 'hw.acpi.battery.life'), 10);\n          result.hasbattery = batteries > 0;\n          result.cyclecount = -1;\n          result.ischarging = util.getValue(lines, 'hw.acpi.acline') !== '1';\n          result.acconnected = result.ischarging;\n          result.maxcapacity = -1;\n          result.currentcapacity = -1;\n          result.percent = batteries ? percent : -1;\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -n AppleSmartBattery -r | egrep \"CycleCount|IsCharging|MaxCapacity|CurrentCapacity|BatterySerialNumber|TimeRemaining\"; pmset -g batt | grep %', function (error, stdout) {\n          if (stdout) {\n            var lines = stdout.toString().replace(/ +/g, '').replace(/\"+/g, '').replace(/-/g, '').split('\\n');\n            result.cyclecount = parseInt('0' + util.getValue(lines, 'cyclecount', '='), 10);\n            result.maxcapacity = parseInt('0' + util.getValue(lines, 'maxcapacity', '='), 10);\n            result.currentcapacity = parseInt('0' + util.getValue(lines, 'currentcapacity', '='), 10);\n            result.manufacturer = 'Apple';\n            result.serial = util.getValue(lines, 'BatterySerialNumber', '=');\n            var percent = -1;\n            var line = util.getValue(lines, 'internal', 'Battery');\n            var parts = line.split(';');\n\n            if (parts && parts[0]) {\n              var parts2 = parts[0].split('\\t');\n\n              if (parts2 && parts2[1]) {\n                percent = parseFloat(parts2[1].trim().replace(/%/g, ''));\n              }\n            }\n\n            if (parts && parts[1]) {\n              result.ischarging = parts[1].trim() === 'charging';\n              result.acconnected = parts[1].trim() !== 'discharging';\n            } else {\n              result.ischarging = util.getValue(lines, 'ischarging', '=').toLowerCase() === 'yes';\n              result.acconnected = result.ischarging;\n            }\n\n            if (result.maxcapacity && result.currentcapacity) {\n              result.hasbattery = true;\n              result.type = 'Li-ion';\n              result.percent = percent !== -1 ? percent : Math.round(100.0 * result.currentcapacity / result.maxcapacity);\n\n              if (!result.ischarging) {\n                result.timeremaining = parseInt('0' + util.getValue(lines, 'TimeRemaining', '='), 10);\n              }\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          exec(util.getWmic() + ' Path Win32_Battery Get BatteryStatus, DesignCapacity, EstimatedChargeRemaining /value', util.execOptsWin, function (error, stdout) {\n            if (stdout) {\n              var lines = stdout.split('\\r\\n');\n              var status = util.getValue(lines, 'BatteryStatus', '=').trim(); // 1 = \"Discharging\"\n              // 2 = \"On A/C\"\n              // 3 = \"Fully Charged\"\n              // 4 = \"Low\"\n              // 5 = \"Critical\"\n              // 6 = \"Charging\"\n              // 7 = \"Charging High\"\n              // 8 = \"Charging Low\"\n              // 9 = \"Charging Critical\"\n              // 10 = \"Undefined\"\n              // 11 = \"Partially Charged\"\n\n              if (status && status != '10') {\n                var statusValue = parseInt(status);\n                result.hasbattery = true;\n                result.maxcapacity = parseInt(util.getValue(lines, 'DesignCapacity', '=') || 0);\n                result.percent = parseInt(util.getValue(lines, 'EstimatedChargeRemaining', '=') || 0);\n                result.currentcapacity = parseInt(result.maxcapacity * result.percent / 100);\n                result.ischarging = statusValue >= 6 && statusValue <= 9 || statusValue === 11 || !(statusValue === 3) && !(statusValue === 1) && result.percent < 100;\n                result.acconnected = result.ischarging;\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}