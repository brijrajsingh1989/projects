{"ast":null,"code":"'use strict'; // ==================================================================================\n// dockerSockets.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 13. DockerSockets\n// ----------------------------------------------------------------------------------\n\nvar _classCallCheck = require(\"D:\\\\ELK_6.5_LM\\\\logr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\ELK_6.5_LM\\\\logr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar net = require('net');\n\nvar isWin = require('os').type() === 'Windows_NT';\nvar socketPath = isWin ? '//./pipe/docker_engine' : '/var/run/docker.sock';\n\nvar DockerSocket =\n/*#__PURE__*/\nfunction () {\n  function DockerSocket() {\n    _classCallCheck(this, DockerSocket);\n  }\n\n  _createClass(DockerSocket, [{\n    key: \"listContainers\",\n    value: function listContainers(all, callback) {\n      try {\n        var socket = net.createConnection({\n          path: socketPath\n        });\n        var alldata = '';\n        var data;\n        socket.on('connect', function () {\n          socket.write('GET http:/containers/json' + (all ? '?all=1' : '') + ' HTTP/1.0\\r\\n\\r\\n');\n        });\n        socket.on('data', function (data) {\n          alldata = alldata + data.toString();\n        });\n        socket.on('error', function () {\n          socket = false;\n          callback({});\n        });\n        socket.on('end', function () {\n          var startbody = alldata.indexOf('\\r\\n\\r\\n');\n          alldata = alldata.substring(startbody + 4);\n          socket = false;\n\n          try {\n            data = JSON.parse(alldata);\n            callback(data);\n          } catch (err) {\n            callback({});\n          }\n        });\n      } catch (err) {\n        callback({});\n      }\n    }\n  }, {\n    key: \"getStats\",\n    value: function getStats(id, callback) {\n      id = id || '';\n\n      if (id) {\n        try {\n          var socket = net.createConnection({\n            path: socketPath\n          });\n          var alldata = '';\n          var data;\n          socket.on('connect', function () {\n            socket.write('GET http:/containers/' + id + '/stats?stream=0 HTTP/1.0\\r\\n\\r\\n');\n          });\n          socket.on('data', function (data) {\n            alldata = alldata + data.toString();\n          });\n          socket.on('error', function () {\n            socket = false;\n            callback({});\n          });\n          socket.on('end', function () {\n            var startbody = alldata.indexOf('\\r\\n\\r\\n');\n            alldata = alldata.substring(startbody + 4);\n            socket = false;\n\n            try {\n              data = JSON.parse(alldata);\n              callback(data);\n            } catch (err) {\n              callback({});\n            }\n          });\n        } catch (err) {\n          callback({});\n        }\n      } else {\n        callback({});\n      }\n    }\n  }, {\n    key: \"getProcesses\",\n    value: function getProcesses(id, callback) {\n      id = id || '';\n\n      if (id) {\n        try {\n          var socket = net.createConnection({\n            path: socketPath\n          });\n          var alldata = '';\n          var data;\n          socket.on('connect', function () {\n            socket.write('GET http:/containers/' + id + '/top?ps_args=-opid,ppid,pgid,vsz,time,etime,nice,ruser,user,rgroup,group,stat,rss,args HTTP/1.0\\r\\n\\r\\n');\n          });\n          socket.on('data', function (data) {\n            alldata = alldata + data.toString();\n          });\n          socket.on('error', function () {\n            socket = false;\n            callback({});\n          });\n          socket.on('end', function () {\n            var startbody = alldata.indexOf('\\r\\n\\r\\n');\n            alldata = alldata.substring(startbody + 4);\n            socket = false;\n\n            try {\n              data = JSON.parse(alldata);\n              callback(data);\n            } catch (err) {\n              callback({});\n            }\n          });\n        } catch (err) {\n          callback({});\n        }\n      } else {\n        callback({});\n      }\n    }\n  }]);\n\n  return DockerSocket;\n}();\n\nmodule.exports = DockerSocket;","map":null,"metadata":{},"sourceType":"script"}