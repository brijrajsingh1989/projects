{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _cloneChildren = require('react-offcharts-core/Utils/cloneChildren');\n\nvar _cloneChildren2 = _interopRequireDefault(_cloneChildren);\n\nvar _arcDimension = require('react-offcharts-core/Helpers/arcDimension');\n\nvar _arcDimension2 = _interopRequireDefault(_arcDimension);\n\nvar _numbers = require('react-offcharts-core/Utils/numbers');\n\nvar _d3Selection = require('d3-selection');\n\nvar _d3Scale = require('d3-scale');\n\nvar _d3Ease = require('d3-ease');\n\nvar ease = _interopRequireWildcard(_d3Ease);\n\nrequire('d3-transition');\n\nvar _d3Interpolate = require('d3-interpolate');\n\nvar _constants = require('../Helpers/constants');\n\nvar ch = _interopRequireWildcard(_constants);\n\nvar _dimensions = require('../Helpers/dimensions');\n\nvar dh = _interopRequireWildcard(_dimensions);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Liquid = function (_Component) {\n  _inherits(Liquid, _Component);\n\n  function Liquid(props) {\n    _classCallCheck(this, Liquid);\n\n    var _this = _possibleConstructorReturn(this, (Liquid.__proto__ || Object.getPrototypeOf(Liquid)).call(this));\n\n    if (props.innerBound > props.outerBound) {\n      console.warn(ch.INNER_BIGGER_THAN_OUTER);\n    } else if (props.outerBound > 1) {\n      console.warn(ch.OUTER_BIGGER_THAN_ONE);\n    }\n\n    _this.iter = 0;\n    return _this;\n  }\n\n  _createClass(Liquid, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.renderChart();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.renderChart();\n    }\n  }, {\n    key: 'getEasing',\n    value: function getEasing() {\n      var animationEase = ease[this.props.animationEase];\n\n      if (typeof animationEase === 'function') {\n        return animationEase;\n      }\n\n      return ease.easeCubicInOut;\n    }\n  }, {\n    key: 'getAnimationTime',\n    value: function getAnimationTime() {\n      var animationTime = this.props.animationTime;\n\n      if (animationTime === undefined) {\n        return 2000;\n      }\n\n      return animationTime;\n    }\n  }, {\n    key: 'animateBackAndForth',\n    value: function animateBackAndForth() {\n      var _this2 = this; // Set the sampling array to a new array of X times undefines\n      // does not matter because we only use zeros\n\n\n      var arr = new Array(ch.SAMPLING); // Get the container element\n\n      var container = (0, _d3Selection.select)(this.container); // select the clippath that is going to be animated\n\n      var wave = container.select('clipPath').select('path'); // Get the easing type, if the user misspelled the easing or\n\n      var animationEase = this.getEasing(); // Get the animationtime\n\n      var animationTime = this.getAnimationTime(); // get the wavescale\n\n      var waveScale = dh.getWaveScaleLimit(this.props); // get the scales and the area function\n\n      var _dh$getWaveArea = dh.getWaveArea(this.props),\n          waveArea = _dh$getWaveArea.waveArea,\n          x = _dh$getWaveArea.x,\n          y = _dh$getWaveArea.y; // { waveArea, x, y, w, h }\n      // The waves movement\n\n\n      var _dh$getBackAndForth = dh.getBackAndForth(),\n          forthAmplitude = _dh$getBackAndForth.forthAmplitude,\n          backAmplitude = _dh$getBackAndForth.backAmplitude,\n          forthFrequency = _dh$getBackAndForth.forthFrequency,\n          backFrequency = _dh$getBackAndForth.backFrequency; // get the tspan nodes\n\n\n      var textValue = container.selectAll('.' + ch.TEXT_VALUE);\n      var textDecimal = container.selectAll('.' + ch.TEXT_DECIMAL);\n\n      var animation = function animation() {\n        wave.transition().duration(_this2.props.animationWavesTime).ease(ease.easeSinInOut).attrTween('d', function () {\n          wave.node().M = 1;\n          return function (t1) {\n            var amp = forthAmplitude(t1);\n            var freq = forthFrequency(t1);\n            var ws = amp * waveScale(_this2.props.value);\n            waveArea.y0(function (d, i) {\n              return y(dh.sine(ws, i, _this2.props.frequency, freq) + _this2.props.value);\n            });\n            wave.node().A = amp;\n            wave.node().F = freq;\n            return waveArea(arr);\n          };\n        }).transition().duration(_this2.props.animationWavesTime).ease(ease.easeSinInOut).attrTween('d', function () {\n          wave.node().M = 0;\n          return function (t1) {\n            var amp = backAmplitude(t1);\n            var freq = backFrequency(t1);\n            var ws = amp * waveScale(_this2.props.value);\n            waveArea.y0(function (d, i) {\n              return y(dh.sine(ws, i, _this2.props.frequency, freq) + _this2.props.value);\n            });\n            wave.node().A = amp;\n            wave.node().F = freq;\n            return waveArea(arr);\n          };\n        }).on('end', function () {\n          animation();\n        });\n      };\n\n      wave.transition().duration(animationTime).ease(animationEase).attrTween('d', function () {\n        var interVal = (0, _d3Interpolate.interpolate)(wave.node().old || 0, _this2.props.value);\n\n        var _dh$getWaveValueMovem = dh.getWaveValueMovement(wave.node()),\n            amplitudeScale = _dh$getWaveValueMovem.amplitudeScale,\n            frequencyScale = _dh$getWaveValueMovem.frequencyScale;\n\n        var updateNum = function updateNum(val) {\n          var value = (0, _numbers.round)(val);\n          var sp = (0, _numbers.splitNumber)(value);\n          textValue.text(sp.number);\n          textDecimal.text('' + sp.deliminator + sp.fraction);\n        };\n\n        return function (t) {\n          var val = interVal(t);\n          var amp = amplitudeScale(t);\n          var freq = frequencyScale(t);\n          var ws = amp * waveScale(val);\n          waveArea.y0(function (d, i) {\n            return y(dh.sine(ws, i, _this2.props.frequency, freq) + val);\n          });\n          wave.node().old = val;\n          wave.node().A = amp;\n          wave.node().F = freq;\n          updateNum(val);\n          return waveArea(arr);\n        };\n      }).on('end', function () {\n        animation();\n      });\n    }\n  }, {\n    key: 'animateValue',\n    value: function animateValue() {\n      var _this3 = this; // Set the sampling array to a new array of X times undefines\n      // does not matter because we only use zeros\n\n\n      var arr = new Array(ch.SAMPLING); // Get the container element\n\n      var container = (0, _d3Selection.select)(this.container); // select the clippath that is going to be animated\n\n      var wave = container.select('clipPath').select('path'); // Get the easing type, if the user misspelled the easing or\n\n      var animationEase = this.getEasing(); // Get the animationtime\n\n      var animationTime = this.getAnimationTime(); // get the wavescale\n\n      var waveScale = dh.getWaveScaleLimit(this.props); // get the areafunction and dimensions\n\n      var _dh$getWaveArea2 = dh.getWaveArea(this.props),\n          waveArea = _dh$getWaveArea2.waveArea,\n          x = _dh$getWaveArea2.x,\n          y = _dh$getWaveArea2.y; // { waveArea, x, y, w, h }\n      // get the text variables\n\n\n      var textValue = container.selectAll('.' + ch.TEXT_VALUE);\n      var textDecimal = container.selectAll('.' + ch.TEXT_DECIMAL);\n      wave.transition().duration(animationTime).ease(animationEase).attrTween('d', function () {\n        var interVal = (0, _d3Interpolate.interpolate)(wave.node().old || 0, _this3.props.value);\n\n        var updateNum = function updateNum(val) {\n          var value = (0, _numbers.round)(val);\n          var sp = (0, _numbers.splitNumber)(value, '.');\n          textValue.text(sp.number);\n          textDecimal.text('.' + sp.fraction);\n        };\n\n        return function (t) {\n          var val = interVal(t);\n          var ws = waveScale(val);\n          waveArea.y0(function (d, i) {\n            return y(dh.sine(ws, i, _this3.props.frequency, 0) + val);\n          });\n          wave.node().old = val;\n          updateNum(val);\n          return waveArea(arr);\n        };\n      });\n    }\n  }, {\n    key: 'animate',\n    value: function animate() {\n      if (this.props.animationWavesTime) {\n        this.animateBackAndForth();\n        return;\n      }\n\n      this.animateValue();\n    }\n  }, {\n    key: 'draw',\n    value: function draw() {\n      var arr = new Array(ch.SAMPLING);\n      var container = (0, _d3Selection.select)(this.container);\n      var el = container.select('clipPath').select('path');\n      var textValue = container.selectAll('.' + ch.TEXT_VALUE);\n      var decimalValue = container.selectAll('.' + ch.TEXT_DECIMAL);\n      textValue.text(parseInt(this.props.value, 10));\n      el.attr('d', dh.getWave(this.props)(arr));\n    }\n  }, {\n    key: 'renderChart',\n    value: function renderChart() {\n      var shouldAnimate = this.props.animationTime || this.props.animationEase;\n\n      if (shouldAnimate) {\n        this.animate();\n        return;\n      }\n\n      this.draw();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var d = dh.getDimensions(this.props);\n      return _react2.default.createElement('g', {\n        ref: function ref(c) {\n          _this4.container = c;\n        },\n        transform: 'translate(' + d.cx + ',' + d.cy + ')'\n      }, (0, _cloneChildren2.default)(this.props, d));\n    }\n  }]);\n\n  return Liquid;\n}(_react.Component);\n\nLiquid.propTypes = {\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  outerBound: _propTypes2.default.number,\n  innerBound: _propTypes2.default.number,\n  animationEase: _propTypes2.default.string,\n  animationTime: _propTypes2.default.number,\n  animationWavesTime: _propTypes2.default.number,\n  frequency: _propTypes2.default.number\n};\nLiquid.defaultProps = {\n  amplitude: 1,\n  liquidMargin: 0.005,\n  waveScaleLimit: true,\n  frequency: 4,\n  deliminator: '.',\n  postfix: ''\n};\nexports.default = Liquid;","map":null,"metadata":{},"sourceType":"script"}