{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _c = require('c3');\n\nvar _c2 = _interopRequireDefault(_c);\n\nvar _deepmerge = require('deepmerge');\n\nvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\nvar _loadHistoricalData = require('./loadHistoricalData');\n\nvar _loadHistoricalData2 = _interopRequireDefault(_loadHistoricalData);\n\nvar _filterReactDomProps = require('filter-react-dom-props');\n\nvar _filterReactDomProps2 = _interopRequireDefault(_filterReactDomProps);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar isDate = function isDate(key) {\n  return key === \"date\";\n};\n\nvar isList = function isList(data) {\n  return data && data.length;\n};\n\nvar emptyList = function emptyList(list) {\n  return !isList(list) || list.length == 0;\n};\n\nvar hasDataProperty = function hasDataProperty(data) {\n  return data.hasOwnProperty('date');\n};\n\nvar updateHistoricalData = function updateHistoricalData(props, nextProps) {\n  var lastData = props.initialData;\n  var nextData = nextProps.initialData;\n  if (!lastData && !nextData) return false;\n  if (emptyList(nextData)) return false;\n\n  if (emptyList(lastData) && !emptyList(nextData)) {\n    return true;\n  }\n\n  return nextData.length != lastData.length;\n};\n\nvar RTChart = function (_Component) {\n  _inherits(RTChart, _Component);\n\n  function RTChart(props, context) {\n    _classCallCheck(this, RTChart);\n\n    var _this = _possibleConstructorReturn(this, (RTChart.__proto__ || Object.getPrototypeOf(RTChart)).call(this, props, context));\n\n    _this.state = {\n      chart: null\n    };\n    return _this;\n  }\n\n  _createClass(RTChart, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          initialData = _props.initialData,\n          maxValues = _props.maxValues;\n      this.limit = maxValues || 30;\n      this.count = isList(initialData) ? initialData.length : 0;\n      this.initChart(this.props);\n    }\n  }, {\n    key: 'unload',\n    value: function unload() {\n      this.state.chart.unload({\n        ids: this.props.fields\n      });\n    }\n  }, {\n    key: 'resetChart',\n    value: function resetChart() {\n      this.unload();\n      this.initChart(this.props);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (updateHistoricalData(this.props, nextProps)) {\n        this.initChart(nextProps);\n        return;\n      }\n\n      if (!this.state.chart) return;\n      if (!nextProps.data) return;\n\n      if (Object.keys(nextProps.data).length < this.props.fields.length) {\n        console.warn('Values has a length of ' + nextProps.values.length + ' but must be the same as fields: ' + this.props.fields.length);\n      }\n\n      if (nextProps.reset) {\n        this.resetChart(nextProps);\n      }\n\n      var columns = (0, _loadHistoricalData2.default)([nextProps.data], nextProps.fields, this.limit);\n      var args = (0, _deepmerge2.default)({\n        columns: columns,\n        duration: 400\n      }, this.props.flow || {});\n      if (this.count <= this.limit) this.count++;\n      if (this.count < this.limit) args['length'] = 0;\n      this.state.chart.flow(args);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement('div', _extends({}, (0, _filterReactDomProps2.default)(this.props), {\n        ref: 'chart'\n      }));\n    }\n  }, {\n    key: 'initChart',\n    value: function initChart() {\n      if (!this.props.fields) {\n        throw new Error(\"prop type fields are missing. fields={['field',..]}\");\n      }\n\n      if (this.state.chart) {\n        this.unload();\n      }\n\n      var _props2 = this.props,\n          initialData = _props2.initialData,\n          chart = _props2.chart,\n          fields = _props2.fields;\n      var defaultColumns = [['x']];\n      this.props.fields.forEach(function (f) {\n        return defaultColumns.push([f]);\n      });\n      var chart_temp = (0, _deepmerge2.default)({\n        axis: {\n          x: {\n            type: 'timeseries',\n            tick: {\n              format: '%H:%M:%S'\n            }\n          }\n        }\n      }, chart || {});\n      var columns = !emptyList(initialData) ? (0, _loadHistoricalData2.default)(initialData, fields, this.limit) : defaultColumns;\n      var chart_temp = (0, _deepmerge2.default)({\n        axis: {\n          x: {\n            type: 'timeseries',\n            tick: {\n              format: '%H:%M:%S'\n            }\n          }\n        },\n        data: {\n          x: 'x',\n          columns: columns\n        }\n      }, chart || {});\n      chart_temp.bindto = this.refs.chart;\n\n      var chart = _c2.default.generate(chart_temp);\n\n      this.setState({\n        chart: chart,\n        initialData: initialData\n      });\n    }\n  }]);\n\n  return RTChart;\n}(_react.Component);\n\nmodule.exports = RTChart;","map":null,"metadata":{},"sourceType":"script"}