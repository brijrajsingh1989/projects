{"ast":null,"code":"import _classCallCheck from \"D:\\\\ELK_6.5_LM\\\\logr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\ELK_6.5_LM\\\\logr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\ELK_6.5_LM\\\\logr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\ELK_6.5_LM\\\\logr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\ELK_6.5_LM\\\\logr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\ELK_6.5_LM\\\\logr\\\\src\\\\Modules\\\\Report\\\\Analytics.js\";\nimport React, { Component } from 'react';\nimport { Button, FormGroup, FormControl, ControlLabel, Grid, Row, Col, Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport './../../resources/styles/style.css';\nimport './Report.css';\nimport Label from './../../components/Label.js';\nimport TextBox from './../../components/TextBox.js';\nimport { Animated } from \"react-animated-css\";\nimport Iframe from 'react-iframe';\nimport Header from './../../components/Header.js';\nimport Config from '../Config/Config.js';\nimport SmoothieComponent from 'react-smoothie';\nimport axios from 'axios';\nimport Chart from 'react-google-charts';\n\nvar Analytics =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Analytics, _Component);\n\n  function Analytics(props) {\n    var _this;\n\n    _classCallCheck(this, Analytics);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Analytics).call(this, props));\n    _this.state = {\n      logLevel: {}\n    };\n    return _this;\n  }\n\n  _createClass(Analytics, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var thisObj = this;\n      var ts1 = this.refs.chart.addTimeSeries({\n        strokeStyle: 'rgba(0, 255, 0, 1)',\n        fillStyle: 'rgba(0, 255, 0, 0.1)',\n        lineWidth: 1\n      }); // var ts2 = this.refs.chart.addTimeSeries({\n      //   strokeStyle: 'rgba(255, 0, 0, 1)',\n      //   fillStyle: 'rgba(255, 0, 0, 0.2)',\n      //   lineWidth: 4,\n      // });\n\n      this.dataGenerator = setInterval(function () {\n        var time = new Date().getTime(); // Generate times slightly in the future\n\n        time += 1000;\n        axios.get('http://localhost:3001/api/v1/cpuinfo').then(function (res) {\n          console.log(res.data.cpu);\n          ts1.append(time, res.data.cpu); //ts2.append(time, Math.random());\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }, 1000);\n      var pageObj = this;\n      var inpData = {\n        'endDate': new Date().toISOString(),\n        'startDate': new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000).toISOString()\n      };\n      axios.post('http://localhost:3001/api/v1/elastic', inpData).then(function (res) {\n        pageObj.setState({\n          logLevel: res.data\n        });\n        console.log('res.data', res.data);\n        console.log('this.state.logLevel.Emergency', pageObj.state.logLevel.Emergency);\n      }).catch(function (err) {\n        console.log('err', err);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.dataGenerator);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"logStatesDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        md: 12,\n        style: {\n          padding: '5px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(SmoothieComponent, {\n        ref: \"chart\",\n        responsive: true,\n        interpolation: \"smooth\",\n        minValue: 0,\n        maxValue: 100,\n        strokeStyle: \"#ffffff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(Label, {\n        weight: \"bold\",\n        text: \"CPU States\",\n        color: \"#000\",\n        size: \"10px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        className: \"logStatesDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 12,\n        md: 12,\n        style: {\n          padding: '5px',\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        width: '100%',\n        height: '100%',\n        chartType: \"PieChart\",\n        loader: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"Loading\"),\n        data: [['LogLevel', 'Count'], ['Emergency', 17], ['Alert', 29], ['Critical', 11], ['Error', 21], ['Warning', 92], ['Notice', 132], ['Informational', 371], ['Debug', 536] // ['Emergency', this.state.logLevel.Emergency],\n        // ['Alert', this.state.logLevel.Alert],\n        // ['Critical', this.state.logLevel.Critical],\n        // ['Error', this.state.logLevel.Error],\n        // ['Warning', this.state.logLevel.Warning],\n        // ['Notice', this.state.logLevel.Notice],\n        // ['Informational', this.state.logLevel.Informational],\n        // ['Debug', this.state.logLevel.Debug]\n        ],\n        options: {\n          title: '',\n          is3D: true,\n          slices: {\n            0: {\n              color: '#ef0000'\n            },\n            1: {\n              color: '#a94442'\n            },\n            2: {\n              color: '#FFA500'\n            },\n            3: {\n              color: '#ffa578'\n            },\n            4: {\n              color: '#ff78a9'\n            },\n            5: {\n              color: '#1911bf'\n            },\n            6: {\n              color: '#10bf67'\n            },\n            7: {\n              color: '#00e822'\n            }\n          }\n        },\n        rootProps: {\n          'data-testid': '1'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(Label, {\n        weight: \"bold\",\n        text: \"Error States For Last 7 Days\",\n        color: \"#000\",\n        size: \"10px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Analytics;\n}(Component);\n\nexport default Analytics;","map":{"version":3,"sources":["D:\\ELK_6.5_LM\\logr\\src\\Modules\\Report\\Analytics.js"],"names":["React","Component","Button","FormGroup","FormControl","ControlLabel","Grid","Row","Col","Tooltip","OverlayTrigger","Label","TextBox","Animated","Iframe","Header","Config","SmoothieComponent","axios","Chart","Analytics","props","state","logLevel","thisObj","ts1","refs","chart","addTimeSeries","strokeStyle","fillStyle","lineWidth","dataGenerator","setInterval","time","Date","getTime","get","then","res","console","log","data","cpu","append","catch","err","pageObj","inpData","toISOString","post","setState","Emergency","clearInterval","padding","textAlign","title","is3D","slices","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button, FormGroup, FormControl, ControlLabel, Grid, Row, Col, Tooltip, OverlayTrigger} from 'react-bootstrap';\r\nimport './../../resources/styles/style.css';\r\nimport './Report.css';\r\nimport Label from './../../components/Label.js';\r\nimport TextBox from './../../components/TextBox.js';\r\nimport {Animated} from \"react-animated-css\";\r\nimport Iframe from 'react-iframe';\r\nimport Header from './../../components/Header.js';\r\nimport Config from '../Config/Config.js';\r\nimport SmoothieComponent from 'react-smoothie';\r\nimport axios from 'axios';\r\nimport Chart from 'react-google-charts';\r\n\r\nclass Analytics extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {logLevel:{}};\r\n  }\r\n\r\n  componentDidMount() {\r\n    let thisObj = this;\r\n\r\n      var ts1 = this.refs.chart.addTimeSeries({\r\n        strokeStyle: 'rgba(0, 255, 0, 1)',\r\n        fillStyle: 'rgba(0, 255, 0, 0.1)',\r\n        lineWidth: 1,\r\n      });\r\n      // var ts2 = this.refs.chart.addTimeSeries({\r\n      //   strokeStyle: 'rgba(255, 0, 0, 1)',\r\n      //   fillStyle: 'rgba(255, 0, 0, 0.2)',\r\n      //   lineWidth: 4,\r\n      // });\r\n      this.dataGenerator = setInterval(function() {\r\n        var time = new Date().getTime();\r\n        // Generate times slightly in the future\r\n        time += 1000;\r\n        axios.get('http://localhost:3001/api/v1/cpuinfo').then(function(res){\r\n          console.log(res.data.cpu);\r\n\r\n          ts1.append(time, res.data.cpu);\r\n          //ts2.append(time, Math.random());\r\n        }).catch(function(err){\r\n          console.log(err);\r\n        })\r\n\r\n      }, 1000);\r\n\r\n      let pageObj = this;\r\n\r\n      let inpData = {\r\n        'endDate': (new Date()).toISOString(),\r\n        'startDate': (new Date((new Date()).getTime() - (7 * 24 * 60 * 60 * 1000))).toISOString()\r\n      }\r\n\r\n      axios.post('http://localhost:3001/api/v1/elastic', inpData).then(function(res){\r\n\r\n            pageObj.setState({logLevel:res.data});\r\n            console.log('res.data',res.data);\r\n            console.log('this.state.logLevel.Emergency', pageObj.state.logLevel.Emergency);\r\n\r\n      }).catch(function(err)\r\n      {\r\n        console.log('err', err);\r\n      });\r\n    }\r\n\r\n  componentWillUnmount()\r\n  {\r\n    clearInterval(this.dataGenerator);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <Grid>\r\n                  <Row className=\"logStatesDiv\">\r\n                      {/*<Col xs={12} md={6}>\r\n                          <Label text={\"CPU States\"} color=\"#000\"></Label>\r\n                      </Col>*/}\r\n\r\n                      <Col xs={12} md={12}  style={{padding:'5px'}}>\r\n                            <SmoothieComponent ref=\"chart\" responsive={true} interpolation=\"smooth\" minValue={0}  maxValue={100} strokeStyle=\"#ffffff\"/>\r\n\r\n                                <Label weight=\"bold\" text={\"CPU States\"} color=\"#000\" size=\"10px\"></Label>\r\n                      </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"logStatesDiv\">\r\n                      <Col xs={12} md={12}  style={{padding:'5px', textAlign:'center'}}>\r\n                            <Chart\r\n                                width={'100%'}\r\n                                height={'100%'}\r\n                                chartType=\"PieChart\"\r\n                                loader={<div>Loading</div>}\r\n                                data={[\r\n                                ['LogLevel', 'Count'],\r\n                                ['Emergency', 17],\r\n                                ['Alert', 29],\r\n                                ['Critical', 11],\r\n                                ['Error', 21],\r\n                                ['Warning', 92],\r\n                                ['Notice', 132],\r\n                                ['Informational', 371],\r\n                                ['Debug', 536]\r\n\r\n                                // ['Emergency', this.state.logLevel.Emergency],\r\n                                // ['Alert', this.state.logLevel.Alert],\r\n                                // ['Critical', this.state.logLevel.Critical],\r\n                                // ['Error', this.state.logLevel.Error],\r\n                                // ['Warning', this.state.logLevel.Warning],\r\n                                // ['Notice', this.state.logLevel.Notice],\r\n                                // ['Informational', this.state.logLevel.Informational],\r\n                                // ['Debug', this.state.logLevel.Debug]\r\n                                ]}\r\n                                options={{\r\n                                title: '',\r\n                                is3D: true,\r\n                                slices: {\r\n                                          0: { color: '#ef0000' },\r\n                                          1: { color: '#a94442' },\r\n                                          2: { color: '#FFA500' },\r\n                                          3: { color: '#ffa578' },\r\n                                          4: { color: '#ff78a9' },\r\n                                          5: { color: '#1911bf' },\r\n                                          6: { color: '#10bf67' },\r\n                                          7: { color: '#00e822' },\r\n                                        }\r\n                                }}\r\n                                rootProps={{ 'data-testid': '1' }}\r\n                                />\r\n\r\n                            <Label weight=\"bold\" text={\"Error States For Last 7 Days\"} color=\"#000\" size=\"10px\"></Label>\r\n                      </Col>\r\n                  </Row>\r\n            </Grid>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Analytics;\r\n"]},"metadata":{},"sourceType":"module"}