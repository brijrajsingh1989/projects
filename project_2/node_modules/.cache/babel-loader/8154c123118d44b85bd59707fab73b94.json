{"ast":null,"code":"'use strict'; // ==================================================================================\n// memory.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 5. Memory\n// ----------------------------------------------------------------------------------\n\nvar os = require('os');\n\nvar exec = require('child_process').exec;\n\nvar util = require('./util');\n\nvar _platform = process.platform;\n\nvar _linux = _platform === 'linux';\n\nvar _darwin = _platform === 'darwin';\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd';\n\nvar _sunos = _platform === 'sunos';\n\nvar OSX_RAM_manufacturers = {\n  '0x014F': 'Transcend Information',\n  '0x2C00': 'Micron Technology Inc.',\n  '0x802C': 'Micron Technology Inc.',\n  '0x80AD': 'Hynix Semiconductor Inc.',\n  '0x80CE': 'Samsung Electronics Inc.',\n  '0xAD00': 'Hynix Semiconductor Inc.',\n  '0xCE00': 'Samsung Electronics Inc.',\n  '0x02FE': 'Elpida',\n  '0x5105': 'Qimonda AG i. In.',\n  '0x8551': 'Qimonda AG i. In.',\n  '0x859B': 'Crucial'\n}; // _______________________________________________________________________________________\n// |                         R A M                              |          H D           |\n// |______________________|_________________________|           |                        |\n// |        active             buffers/cache        |           |                        |\n// |________________________________________________|___________|_________|______________|\n// |                     used                            free   |   used       free      |\n// |____________________________________________________________|________________________|\n// |                        total                               |          swap          |\n// |____________________________________________________________|________________________|\n// free (older versions)\n// ----------------------------------\n// # free\n//              total       used        free     shared    buffers     cached\n// Mem:         16038 (1)   15653 (2)   384 (3)  0 (4)     236 (5)     14788 (6)\n// -/+ buffers/cache:       628 (7)     15409 (8)\n// Swap:        16371         83      16288\n//\n// |------------------------------------------------------------|\n// |                           R A M                            |\n// |______________________|_____________________________________|\n// | active (2-(5+6) = 7) |  available (3+5+6 = 8)              |\n// |______________________|_________________________|___________|\n// |        active        |  buffers/cache (5+6)    |           |\n// |________________________________________________|___________|\n// |                   used (2)                     | free (3)  |\n// |____________________________________________________________|\n// |                          total (1)                         |\n// |____________________________________________________________|\n//\n// free (since free von procps-ng 3.3.10)\n// ----------------------------------\n// # free\n//              total       used        free     shared    buffers/cache   available\n// Mem:         16038 (1)   628 (2)     386 (3)  0 (4)     15024 (5)     14788 (6)\n// Swap:        16371         83      16288\n//\n// |------------------------------------------------------------|\n// |                           R A M                            |\n// |______________________|_____________________________________|\n// |                      |      available (6) estimated        |\n// |______________________|_________________________|___________|\n// |     active (2)       |   buffers/cache (5)     | free (3)  |\n// |________________________________________________|___________|\n// |                          total (1)                         |\n// |____________________________________________________________|\n//\n// Reference: http://www.software-architect.net/blog/article/date/2015/06/12/-826c6e5052.html\n// /procs/meminfo - sample (all in kB)\n// \n// MemTotal:       32806380 kB\n// MemFree:        19220948 kB\n// MemAvailable:   20851100 kB\n// Buffers:          532892 kB\n// Cached:          1935000 kB\n// SwapCached:            0 kB\n// Active:         11953672 kB\n// Inactive:        1069288 kB\n// SwapTotal:      16768892 kB\n// SwapFree:       16768892 kB\n\nfunction mem(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        total: os.totalmem(),\n        free: os.freemem(),\n        used: os.totalmem() - os.freemem(),\n        active: os.totalmem() - os.freemem(),\n        // temporarily (fallback)\n        available: os.freemem(),\n        // temporarily (fallback)\n        buffcache: 0,\n        swaptotal: 0,\n        swapused: 0,\n        swapfree: 0\n      };\n\n      if (_linux) {\n        exec('export LC_ALL=C; cat /proc/meminfo ; unset LC_ALL', function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().split('\\n');\n            result.total = parseInt(util.getValue(lines, 'memtotal'), 10);\n            result.total = result.total ? result.total * 1024 : os.totalmem();\n            result.free = parseInt(util.getValue(lines, 'memfree'), 10);\n            result.free = result.free ? result.free * 1024 : os.freemem();\n            result.used = result.total - result.free;\n            var buffers = parseInt(util.getValue(lines, 'buffers'), 10);\n            buffers = buffers ? buffers * 1024 : 0;\n            var cached = parseInt(util.getValue(lines, 'cached'), 10);\n            cached = cached ? cached * 1024 : 0;\n            result.buffcache = buffers + cached;\n            result.available = parseInt(util.getValue(lines, 'memavailable'), 10);\n            result.available = result.available ? result.available * 1024 : os.freemem(); // result.active = result.total - result.free - result.buffcache;\n\n            result.active = parseInt(util.getValue(lines, 'active'), 10);\n            result.active = result.active ? result.active * 1024 : 0;\n            result.buffcache = result.total - result.free - result.active;\n            result.swaptotal = parseInt(util.getValue(lines, 'swaptotal'), 10);\n            result.swaptotal = result.swaptotal ? result.swaptotal * 1024 : 0;\n            result.swapfree = parseInt(util.getValue(lines, 'swapfree'), 10);\n            result.swapfree = result.swapfree ? result.swapfree * 1024 : 0;\n            result.swapused = parseInt(util.getValue(lines, 'swapcached'), 10);\n            result.swapused = result.swapused ? result.swapused * 1024 : 0;\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_freebsd || _openbsd) {\n        exec('/sbin/sysctl -a | grep -E \"hw.realmem|hw.physmem|vm.stats.vm.v_page_count|vm.stats.vm.v_wire_count|vm.stats.vm.v_active_count|vm.stats.vm.v_inactive_count|vm.stats.vm.v_cache_count|vm.stats.vm.v_free_count|vm.stats.vm.v_page_size\"', function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().split('\\n');\n            var pagesize = parseInt(util.getValue(lines, 'vm.stats.vm.v_page_size'), 10);\n            var inactive = parseInt(util.getValue(lines, 'vm.stats.vm.v_inactive_count'), 10) * pagesize;\n            var cache = parseInt(util.getValue(lines, 'vm.stats.vm.v_cache_count'), 10) * pagesize;\n            result.total = parseInt(util.getValue(lines, 'hw.realmem'), 10);\n            if (isNaN(result.total)) result.total = parseInt(util.getValue(lines, 'hw.physmem'), 10);\n            result.free = parseInt(util.getValue(lines, 'vm.stats.vm.v_free_count'), 10) * pagesize;\n            result.buffcache = inactive + cache;\n            result.available = result.buffcache + result.free;\n            result.active = result.total - result.free - result.buffcache;\n            result.swaptotal = 0;\n            result.swapfree = 0;\n            result.swapused = 0;\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_darwin) {\n        exec('vm_stat | grep \"Pages active\"', function (error, stdout) {\n          if (!error) {\n            var lines = stdout.toString().split('\\n');\n            result.active = parseInt(lines[0].split(':')[1], 10) * 4096;\n            result.buffcache = result.used - result.active;\n            result.available = result.free + result.buffcache;\n          }\n\n          exec('sysctl -n vm.swapusage', function (error, stdout) {\n            if (!error) {\n              var _lines = stdout.toString().split('\\n');\n\n              if (_lines.length > 0) {\n                var line = _lines[0].replace(/,/g, '.').replace(/M/g, '');\n\n                line = line.trim().split('  ');\n\n                for (var i = 0; i < line.length; i++) {\n                  if (line[i].toLowerCase().indexOf('total') !== -1) result.swaptotal = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                  if (line[i].toLowerCase().indexOf('used') !== -1) result.swapused = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                  if (line[i].toLowerCase().indexOf('free') !== -1) result.swapfree = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                }\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        });\n      }\n\n      if (_windows) {\n        var swaptotal = 0;\n        var swapused = 0;\n\n        try {\n          exec(util.getWmic() + ' pagefile get AllocatedBaseSize, CurrentUsage', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              var lines = stdout.split('\\r\\n').filter(function (line) {\n                return line.trim() !== '';\n              }).filter(function (line, idx) {\n                return idx > 0;\n              });\n              lines.forEach(function (line) {\n                if (line !== '') {\n                  line = line.trim().split(/\\s\\s+/);\n                  swaptotal = swaptotal + parseInt(line[0], 10);\n                  swapused = swapused + parseInt(line[1], 10);\n                }\n              });\n            }\n\n            result.swaptotal = swaptotal * 1024 * 1024;\n            result.swapused = swapused * 1024 * 1024;\n            result.swapfree = result.swaptotal - result.swapused;\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.mem = mem;\n\nfunction memLayout(callback) {\n  function getManufacturer(manId) {\n    if (OSX_RAM_manufacturers.hasOwnProperty(manId)) {\n      return OSX_RAM_manufacturers[manId];\n    }\n\n    return manId;\n  }\n\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = [];\n\n      if (_linux || _freebsd || _openbsd) {\n        exec('export LC_ALL=C; dmidecode -t memory | grep -iE \"Size:|Type|Speed|Manufacturer|Form Factor|Locator|Memory Device|Serial Number|Voltage|Part Number\"; unset LC_ALL', function (error, stdout) {\n          if (!error) {\n            var devices = stdout.toString().split('Memory Device');\n            devices.shift();\n            devices.forEach(function (device) {\n              var lines = device.split('\\n');\n\n              if (parseInt(util.getValue(lines, 'Size'), 10) > 0) {\n                result.push({\n                  size: parseInt(util.getValue(lines, 'Size'), 10) * 1024 * 1024,\n                  bank: util.getValue(lines, 'Bank Locator'),\n                  type: util.getValue(lines, 'Type:'),\n                  clockSpeed: util.getValue(lines, 'Configured Clock Speed:') ? parseInt(util.getValue(lines, 'Configured Clock Speed:'), 10) : util.getValue(lines, 'Speed:') ? parseInt(util.getValue(lines, 'Speed:'), 10) : -1,\n                  formFactor: util.getValue(lines, 'Form Factor:'),\n                  manufacturer: util.getValue(lines, 'Manufacturer:'),\n                  partNum: util.getValue(lines, 'Part Number:'),\n                  serialNum: util.getValue(lines, 'Serial Number:'),\n                  voltageConfigured: parseFloat(util.getValue(lines, 'Configured Voltage:') || -1),\n                  voltageMin: parseFloat(util.getValue(lines, 'Minimum Voltage:') || -1),\n                  voltageMax: parseFloat(util.getValue(lines, 'Maximum Voltage:') || -1)\n                });\n              } else {\n                result.push({\n                  size: 0,\n                  bank: util.getValue(lines, 'Bank Locator'),\n                  type: 'Empty',\n                  clockSpeed: 0,\n                  formFactor: util.getValue(lines, 'Form Factor:'),\n                  partNum: '',\n                  serialNum: '',\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1\n                });\n              }\n            });\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('system_profiler SPMemoryDataType', function (error, stdout) {\n          if (!error) {\n            var devices = stdout.toString().split('        BANK ');\n            devices.shift();\n            devices.forEach(function (device) {\n              var lines = device.split('\\n');\n              var bank = 'BANK ' + lines[0].trim();\n              var size = parseInt(util.getValue(lines, '          Size'));\n\n              if (size) {\n                result.push({\n                  size: size * 1024 * 1024 * 1024,\n                  bank: bank,\n                  type: util.getValue(lines, '          Type:'),\n                  clockSpeed: parseInt(util.getValue(lines, '          Speed:'), 10),\n                  formFactor: '',\n                  manufacturer: getManufacturer(util.getValue(lines, '          Manufacturer:')),\n                  partNum: util.getValue(lines, '          Part Number:'),\n                  serialNum: util.getValue(lines, '          Serial Number:'),\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1\n                });\n              } else {\n                result.push({\n                  size: 0,\n                  bank: bank,\n                  type: 'Empty',\n                  clockSpeed: 0,\n                  formFactor: '',\n                  manufacturer: '',\n                  partNum: '',\n                  serialNum: '',\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1\n                });\n              }\n            });\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        var memoryTypes = 'Unknown|Other|DRAM|Synchronous DRAM|Cache DRAM|EDO|EDRAM|VRAM|SRAM|RAM|ROM|FLASH|EEPROM|FEPROM|EPROM|CDRAM|3DRAM|SDRAM|SGRAM|RDRAM|DDR|DDR2|DDR2 FB-DIMM|Reserved|DDR3|FBD2|DDR4|LPDDR|LPDDR2|LPDDR3|LPDDR4'.split('|');\n        var FormFactors = 'Unknown|Other|SIP|DIP|ZIP|SOJ|Proprietary|SIMM|DIMM|TSOP|PGA|RIMM|SODIMM|SRIMM|SMD|SSMP|QFP|TQFP|SOIC|LCC|PLCC|BGA|FPBGA|LGA'.split('|');\n\n        try {\n          exec(util.getWmic() + ' memorychip get /value', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              var devices = stdout.toString().split('BankL');\n              devices.shift();\n              devices.forEach(function (device) {\n                var lines = device.split('\\r\\n');\n                result.push({\n                  size: parseInt(util.getValue(lines, 'Capacity', '='), 10) || 0,\n                  bank: util.getValue(lines, 'abel', '='),\n                  // BankLabel\n                  type: memoryTypes[parseInt(util.getValue(lines, 'MemoryType', '='), 10)],\n                  clockSpeed: parseInt(util.getValue(lines, 'ConfiguredClockSpeed', '='), 10) || 0,\n                  formFactor: FormFactors[parseInt(util.getValue(lines, 'FormFactor', '='), 10) || 0],\n                  manufacturer: util.getValue(lines, 'Manufacturer', '='),\n                  partNum: util.getValue(lines, 'PartNumber', '='),\n                  serialNum: util.getValue(lines, 'SerialNumber', '='),\n                  voltageConfigured: (parseInt(util.getValue(lines, 'ConfiguredVoltage', '='), 10) || 0) / 1000.0,\n                  voltageMin: (parseInt(util.getValue(lines, 'MinVoltage', '='), 10) || 0) / 1000.0,\n                  voltageMax: (parseInt(util.getValue(lines, 'MaxVoltage', '='), 10) || 0) / 1000.0\n                });\n              });\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.memLayout = memLayout;","map":null,"metadata":{},"sourceType":"script"}