{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"react-card-flip\", [], factory);else if (typeof exports === 'object') exports[\"react-card-flip\"] = factory();else root[\"react-card-flip\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 4);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports) {\n      // shim for using process in browser\n      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n      // don't break things.  But we need to wrap it in a try catch in case it is\n      // wrapped in strict mode code which doesn't define any globals.  It's inside a\n      // function because try/catches deoptimize in certain engines.\n\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n\n      function defaultSetTimout() {\n        throw new Error('setTimeout has not been defined');\n      }\n\n      function defaultClearTimeout() {\n        throw new Error('clearTimeout has not been defined');\n      }\n\n      (function () {\n        try {\n          if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n\n        try {\n          if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          //normal enviroments in sane situations\n          return setTimeout(fun, 0);\n        } // if setTimeout wasn't available but was latter defined\n\n\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          //normal enviroments in sane situations\n          return clearTimeout(marker);\n        } // if clearTimeout wasn't available but was latter defined\n\n\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n\n        draining = false;\n\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n\n          queueIndex = -1;\n          len = queue.length;\n        }\n\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n\n      process.nextTick = function (fun) {\n        var args = new Array(arguments.length - 1);\n\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n\n        queue.push(new Item(fun, args));\n\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      }; // v8 likes predictible objects\n\n\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n\n      Item.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      };\n\n      process.title = 'browser';\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = ''; // empty string to avoid regexp issues\n\n      process.versions = {};\n\n      function noop() {}\n\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n\n      process.listeners = function (name) {\n        return [];\n      };\n\n      process.binding = function (name) {\n        throw new Error('process.binding is not supported');\n      };\n\n      process.cwd = function () {\n        return '/';\n      };\n\n      process.chdir = function (dir) {\n        throw new Error('process.chdir is not supported');\n      };\n\n      process.umask = function () {\n        return 0;\n      };\n      /***/\n\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*\n      object-assign\n      (c) Sindre Sorhus\n      @license MIT\n      */\n\n      /* eslint-disable no-unused-vars */\n\n      var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n      function toObject(val) {\n        if (val === null || val === undefined) {\n          throw new TypeError('Object.assign cannot be called with null or undefined');\n        }\n\n        return Object(val);\n      }\n\n      function shouldUseNative() {\n        try {\n          if (!Object.assign) {\n            return false;\n          } // Detect buggy property enumeration order in older V8 versions.\n          // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n          var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n          test1[5] = 'de';\n\n          if (Object.getOwnPropertyNames(test1)[0] === '5') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test2 = {};\n\n          for (var i = 0; i < 10; i++) {\n            test2['_' + String.fromCharCode(i)] = i;\n          }\n\n          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n            return test2[n];\n          });\n\n          if (order2.join('') !== '0123456789') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test3 = {};\n          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n            test3[letter] = letter;\n          });\n\n          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n            return false;\n          }\n\n          return true;\n        } catch (err) {\n          // We don't expect any of the above to throw, but better to be safe.\n          return false;\n        }\n      }\n\n      module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n        var from;\n        var to = toObject(target);\n        var symbols;\n\n        for (var s = 1; s < arguments.length; s++) {\n          from = Object(arguments[s]);\n\n          for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n              to[key] = from[key];\n            }\n          }\n\n          if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n\n            for (var i = 0; i < symbols.length; i++) {\n              if (propIsEnumerable.call(from, symbols[i])) {\n                to[symbols[i]] = from[symbols[i]];\n              }\n            }\n          }\n        }\n\n        return to;\n      };\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n\n      var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n      module.exports = ReactPropTypesSecret;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (process) {\n        /**\n        * Copyright (c) 2013-present, Facebook, Inc.\n        *\n        * This source code is licensed under the MIT license found in the\n        * LICENSE file in the root directory of this source tree.\n        */\n        var printWarning = function printWarning() {};\n\n        if (process.env.NODE_ENV !== 'production') {\n          var ReactPropTypesSecret = __webpack_require__(2);\n\n          var loggedTypeFailures = {};\n\n          printWarning = function printWarning(text) {\n            var message = 'Warning: ' + text;\n\n            if (typeof console !== 'undefined') {\n              console.error(message);\n            }\n\n            try {\n              // --- Welcome to debugging React ---\n              // This error was thrown as a convenience so that you can use this stack\n              // to find the callsite that caused this warning to fire.\n              throw new Error(message);\n            } catch (x) {}\n          };\n        }\n        /**\n         * Assert that the values match with the type specs.\n         * Error messages are memorized and will only be shown once.\n         *\n         * @param {object} typeSpecs Map of name to a ReactPropType\n         * @param {object} values Runtime values that need to be type-checked\n         * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n         * @param {string} componentName Name of the component for error messages.\n         * @param {?Function} getStack Returns the component stack.\n         * @private\n         */\n\n\n        function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n          if (process.env.NODE_ENV !== 'production') {\n            for (var typeSpecName in typeSpecs) {\n              if (typeSpecs.hasOwnProperty(typeSpecName)) {\n                var error; // Prop type validation may throw. In case they do, we don't want to\n                // fail the render phase where it didn't fail before. So we log it.\n                // After these have been cleaned up, we'll let them throw.\n\n                try {\n                  // This is intentionally an invariant that gets caught. It's the same\n                  // behavior as without this statement except with a better message.\n                  if (typeof typeSpecs[typeSpecName] !== 'function') {\n                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');\n                    err.name = 'Invariant Violation';\n                    throw err;\n                  }\n\n                  error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n                } catch (ex) {\n                  error = ex;\n                }\n\n                if (error && !(error instanceof Error)) {\n                  printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');\n                }\n\n                if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n                  // Only monitor this failure once because there tends to be a lot of the\n                  // same error.\n                  loggedTypeFailures[error.message] = true;\n                  var stack = getStack ? getStack() : '';\n                  printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));\n                }\n              }\n            }\n          }\n        }\n\n        module.exports = checkPropTypes;\n        /* WEBPACK VAR INJECTION */\n      }).call(exports, __webpack_require__(0));\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _react = __webpack_require__(5);\n\n      var _react2 = _interopRequireDefault(_react);\n\n      var _propTypes = __webpack_require__(8);\n\n      var _propTypes2 = _interopRequireDefault(_propTypes);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n\n      var ReactCardFlip = function (_React$Component) {\n        _inherits(ReactCardFlip, _React$Component);\n\n        function ReactCardFlip(props) {\n          _classCallCheck(this, ReactCardFlip);\n\n          var _this = _possibleConstructorReturn(this, (ReactCardFlip.__proto__ || Object.getPrototypeOf(ReactCardFlip)).call(this, props));\n\n          _this.state = {\n            isFlipped: _this.props.isFlipped,\n            rotation: 0\n          };\n          return _this;\n        }\n\n        _createClass(ReactCardFlip, [{\n          key: 'componentWillReceiveProps',\n          value: function componentWillReceiveProps(nextProps) {\n            if (nextProps.isFlipped !== this.props.isFlipped) {\n              this.setState({\n                isFlipped: nextProps.isFlipped\n              });\n              this.setState({\n                rotation: this.state.rotation + 180\n              });\n            }\n          }\n        }, {\n          key: 'getComponent',\n          value: function getComponent(key) {\n            return this.props.children.filter(function (component) {\n              return component.key === key;\n            });\n          }\n        }, {\n          key: 'render',\n          value: function render() {\n            var styles = {\n              container: {\n                perspective: '1000px',\n                transformStyle: 'preserve-3d'\n              },\n              flipper: {\n                position: 'relative',\n                transformStyle: 'preserve-3d'\n              },\n              front: _extends({\n                WebkitBackfaceVisibility: 'hidden',\n                backfaceVisibility: 'hidden',\n                left: '0',\n                position: 'absolute',\n                top: '0',\n                transform: 'rotateY(' + (this.props.infinite ? this.state.rotation : this.state.isFlipped ? 180 : 0) + 'deg)',\n                transformStyle: 'preserve-3d',\n                width: '100%',\n                zIndex: '2',\n                transition: this.props.flipSpeedBackToFront + 's'\n              }, this.props.cardStyles.front),\n              back: _extends({\n                WebkitBackfaceVisibility: 'hidden',\n                backfaceVisibility: 'hidden',\n                left: '0',\n                position: 'absolute',\n                transform: 'rotateY(' + (this.props.infinite ? this.state.rotation + 180 : this.state.isFlipped ? 0 : -180) + 'deg)',\n                transformStyle: 'preserve-3d',\n                top: '0',\n                width: '100%',\n                transition: this.props.flipSpeedFrontToBack + 's'\n              }, this.props.cardStyles.back)\n            };\n            return _react2.default.createElement('div', {\n              className: 'react-card-flip',\n              style: styles.container\n            }, _react2.default.createElement('div', {\n              className: 'react-card-flipper',\n              style: styles.flipper\n            }, _react2.default.createElement('div', {\n              className: 'react-card-front',\n              style: styles.front\n            }, this.getComponent('front')), _react2.default.createElement('div', {\n              className: 'react-card-back',\n              style: styles.back\n            }, this.getComponent('back'))));\n          }\n        }]);\n\n        return ReactCardFlip;\n      }(_react2.default.Component);\n\n      ReactCardFlip.propTypes = {\n        cardStyles: _propTypes2.default.shape({\n          front: _propTypes2.default.object,\n          back: _propTypes2.default.object\n        }),\n        children: function children(props, propName, componentName) {\n          if (_react2.default.Children.count(props[propName]) !== 2) {\n            return new Error(componentName + ' requires two children.');\n          }\n\n          return null;\n        },\n        flipSpeedBackToFront: _propTypes2.default.number,\n        flipSpeedFrontToBack: _propTypes2.default.number,\n        infinite: _propTypes2.default.bool,\n        isFlipped: _propTypes2.default.bool\n      };\n      ReactCardFlip.defaultProps = {\n        cardStyles: {\n          front: {},\n          back: {}\n        },\n        flipSpeedBackToFront: 0.6,\n        flipSpeedFrontToBack: 0.6,\n        infinite: false,\n        isFlipped: false\n      };\n      exports.default = ReactCardFlip;\n      module.exports = exports['default'];\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (process) {\n        if (process.env.NODE_ENV === 'production') {\n          module.exports = __webpack_require__(6);\n        } else {\n          module.exports = __webpack_require__(7);\n        }\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, __webpack_require__(0));\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /** @license React v16.6.0\n       * react.production.min.js\n       *\n       * Copyright (c) Facebook, Inc. and its affiliates.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n\n      var k = __webpack_require__(1),\n          n = \"function\" === typeof Symbol && Symbol.for,\n          p = n ? Symbol.for(\"react.element\") : 60103,\n          q = n ? Symbol.for(\"react.portal\") : 60106,\n          r = n ? Symbol.for(\"react.fragment\") : 60107,\n          t = n ? Symbol.for(\"react.strict_mode\") : 60108,\n          u = n ? Symbol.for(\"react.profiler\") : 60114,\n          v = n ? Symbol.for(\"react.provider\") : 60109,\n          w = n ? Symbol.for(\"react.context\") : 60110,\n          x = n ? Symbol.for(\"react.concurrent_mode\") : 60111,\n          y = n ? Symbol.for(\"react.forward_ref\") : 60112,\n          z = n ? Symbol.for(\"react.suspense\") : 60113,\n          A = n ? Symbol.for(\"react.memo\") : 60115,\n          B = n ? Symbol.for(\"react.lazy\") : 60116,\n          C = \"function\" === typeof Symbol && Symbol.iterator;\n\n      function aa(a, b, e, c, d, g, h, f) {\n        if (!a) {\n          a = void 0;\n          if (void 0 === b) a = Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else {\n            var l = [e, c, d, g, h, f],\n                m = 0;\n            a = Error(b.replace(/%s/g, function () {\n              return l[m++];\n            }));\n            a.name = \"Invariant Violation\";\n          }\n          a.framesToPop = 1;\n          throw a;\n        }\n      }\n\n      function D(a) {\n        for (var b = arguments.length - 1, e = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, c = 0; c < b; c++) {\n          e += \"&args[]=\" + encodeURIComponent(arguments[c + 1]);\n        }\n\n        aa(!1, \"Minified React error #\" + a + \"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \", e);\n      }\n\n      var E = {\n        isMounted: function isMounted() {\n          return !1;\n        },\n        enqueueForceUpdate: function enqueueForceUpdate() {},\n        enqueueReplaceState: function enqueueReplaceState() {},\n        enqueueSetState: function enqueueSetState() {}\n      },\n          F = {};\n\n      function G(a, b, e) {\n        this.props = a;\n        this.context = b;\n        this.refs = F;\n        this.updater = e || E;\n      }\n\n      G.prototype.isReactComponent = {};\n\n      G.prototype.setState = function (a, b) {\n        \"object\" !== typeof a && \"function\" !== typeof a && null != a ? D(\"85\") : void 0;\n        this.updater.enqueueSetState(this, a, b, \"setState\");\n      };\n\n      G.prototype.forceUpdate = function (a) {\n        this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n      };\n\n      function H() {}\n\n      H.prototype = G.prototype;\n\n      function I(a, b, e) {\n        this.props = a;\n        this.context = b;\n        this.refs = F;\n        this.updater = e || E;\n      }\n\n      var J = I.prototype = new H();\n      J.constructor = I;\n      k(J, G.prototype);\n      J.isPureReactComponent = !0;\n      var K = {\n        current: null,\n        currentDispatcher: null\n      },\n          L = Object.prototype.hasOwnProperty,\n          M = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n      };\n\n      function N(a, b, e) {\n        var c = void 0,\n            d = {},\n            g = null,\n            h = null;\n        if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = \"\" + b.key), b) {\n          L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = b[c]);\n        }\n        var f = arguments.length - 2;\n        if (1 === f) d.children = e;else if (1 < f) {\n          for (var l = Array(f), m = 0; m < f; m++) {\n            l[m] = arguments[m + 2];\n          }\n\n          d.children = l;\n        }\n        if (a && a.defaultProps) for (c in f = a.defaultProps, f) {\n          void 0 === d[c] && (d[c] = f[c]);\n        }\n        return {\n          $$typeof: p,\n          type: a,\n          key: g,\n          ref: h,\n          props: d,\n          _owner: K.current\n        };\n      }\n\n      function ba(a, b) {\n        return {\n          $$typeof: p,\n          type: a.type,\n          key: b,\n          ref: a.ref,\n          props: a.props,\n          _owner: a._owner\n        };\n      }\n\n      function O(a) {\n        return \"object\" === typeof a && null !== a && a.$$typeof === p;\n      }\n\n      function escape(a) {\n        var b = {\n          \"=\": \"=0\",\n          \":\": \"=2\"\n        };\n        return \"$\" + (\"\" + a).replace(/[=:]/g, function (a) {\n          return b[a];\n        });\n      }\n\n      var P = /\\/+/g,\n          Q = [];\n\n      function R(a, b, e, c) {\n        if (Q.length) {\n          var d = Q.pop();\n          d.result = a;\n          d.keyPrefix = b;\n          d.func = e;\n          d.context = c;\n          d.count = 0;\n          return d;\n        }\n\n        return {\n          result: a,\n          keyPrefix: b,\n          func: e,\n          context: c,\n          count: 0\n        };\n      }\n\n      function S(a) {\n        a.result = null;\n        a.keyPrefix = null;\n        a.func = null;\n        a.context = null;\n        a.count = 0;\n        10 > Q.length && Q.push(a);\n      }\n\n      function T(a, b, e, c) {\n        var d = typeof a;\n        if (\"undefined\" === d || \"boolean\" === d) a = null;\n        var g = !1;\n        if (null === a) g = !0;else switch (d) {\n          case \"string\":\n          case \"number\":\n            g = !0;\n            break;\n\n          case \"object\":\n            switch (a.$$typeof) {\n              case p:\n              case q:\n                g = !0;\n            }\n\n        }\n        if (g) return e(c, a, \"\" === b ? \".\" + U(a, 0) : b), 1;\n        g = 0;\n        b = \"\" === b ? \".\" : b + \":\";\n        if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {\n          d = a[h];\n          var f = b + U(d, h);\n          g += T(d, f, e, c);\n        } else if (null === a || \"object\" !== typeof a ? f = null : (f = C && a[C] || a[\"@@iterator\"], f = \"function\" === typeof f ? f : null), \"function\" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) {\n          d = d.value, f = b + U(d, h++), g += T(d, f, e, c);\n        } else \"object\" === d && (e = \"\" + a, D(\"31\", \"[object Object]\" === e ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : e, \"\"));\n        return g;\n      }\n\n      function V(a, b, e) {\n        return null == a ? 0 : T(a, \"\", b, e);\n      }\n\n      function U(a, b) {\n        return \"object\" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);\n      }\n\n      function ca(a, b) {\n        a.func.call(a.context, b, a.count++);\n      }\n\n      function da(a, b, e) {\n        var c = a.result,\n            d = a.keyPrefix;\n        a = a.func.call(a.context, b, a.count++);\n        Array.isArray(a) ? W(a, c, e, function (a) {\n          return a;\n        }) : null != a && (O(a) && (a = ba(a, d + (!a.key || b && b.key === a.key ? \"\" : (\"\" + a.key).replace(P, \"$&/\") + \"/\") + e)), c.push(a));\n      }\n\n      function W(a, b, e, c, d) {\n        var g = \"\";\n        null != e && (g = (\"\" + e).replace(P, \"$&/\") + \"/\");\n        b = R(b, g, c, d);\n        V(a, da, b);\n        S(b);\n      }\n\n      var X = {\n        Children: {\n          map: function map(a, b, e) {\n            if (null == a) return a;\n            var c = [];\n            W(a, c, null, b, e);\n            return c;\n          },\n          forEach: function forEach(a, b, e) {\n            if (null == a) return a;\n            b = R(null, null, b, e);\n            V(a, ca, b);\n            S(b);\n          },\n          count: function count(a) {\n            return V(a, function () {\n              return null;\n            }, null);\n          },\n          toArray: function toArray(a) {\n            var b = [];\n            W(a, b, null, function (a) {\n              return a;\n            });\n            return b;\n          },\n          only: function only(a) {\n            O(a) ? void 0 : D(\"143\");\n            return a;\n          }\n        },\n        createRef: function createRef() {\n          return {\n            current: null\n          };\n        },\n        Component: G,\n        PureComponent: I,\n        createContext: function createContext(a, b) {\n          void 0 === b && (b = null);\n          a = {\n            $$typeof: w,\n            _calculateChangedBits: b,\n            _currentValue: a,\n            _currentValue2: a,\n            Provider: null,\n            Consumer: null\n          };\n          a.Provider = {\n            $$typeof: v,\n            _context: a\n          };\n          return a.Consumer = a;\n        },\n        forwardRef: function forwardRef(a) {\n          return {\n            $$typeof: y,\n            render: a\n          };\n        },\n        lazy: function lazy(a) {\n          return {\n            $$typeof: B,\n            _ctor: a,\n            _status: -1,\n            _result: null\n          };\n        },\n        memo: function memo(a, b) {\n          return {\n            $$typeof: A,\n            type: a,\n            compare: void 0 === b ? null : b\n          };\n        },\n        Fragment: r,\n        StrictMode: t,\n        unstable_ConcurrentMode: x,\n        Suspense: z,\n        unstable_Profiler: u,\n        createElement: N,\n        cloneElement: function cloneElement(a, b, e) {\n          null === a || void 0 === a ? D(\"267\", a) : void 0;\n          var c = void 0,\n              d = k({}, a.props),\n              g = a.key,\n              h = a.ref,\n              f = a._owner;\n\n          if (null != b) {\n            void 0 !== b.ref && (h = b.ref, f = K.current);\n            void 0 !== b.key && (g = \"\" + b.key);\n            var l = void 0;\n            a.type && a.type.defaultProps && (l = a.type.defaultProps);\n\n            for (c in b) {\n              L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== l ? l[c] : b[c]);\n            }\n          }\n\n          c = arguments.length - 2;\n          if (1 === c) d.children = e;else if (1 < c) {\n            l = Array(c);\n\n            for (var m = 0; m < c; m++) {\n              l[m] = arguments[m + 2];\n            }\n\n            d.children = l;\n          }\n          return {\n            $$typeof: p,\n            type: a.type,\n            key: g,\n            ref: h,\n            props: d,\n            _owner: f\n          };\n        },\n        createFactory: function createFactory(a) {\n          var b = N.bind(null, a);\n          b.type = a;\n          return b;\n        },\n        isValidElement: O,\n        version: \"16.6.0\",\n        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n          ReactCurrentOwner: K,\n          assign: k\n        }\n      },\n          Y = {\n        default: X\n      },\n          Z = Y && X || Y;\n      module.exports = Z.default || Z;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (process) {\n        /** @license React v16.6.0\n        * react.development.js\n        *\n        * Copyright (c) Facebook, Inc. and its affiliates.\n        *\n        * This source code is licensed under the MIT license found in the\n        * LICENSE file in the root directory of this source tree.\n        */\n        if (process.env.NODE_ENV !== \"production\") {\n          (function () {\n            'use strict';\n\n            var _assign = __webpack_require__(1);\n\n            var checkPropTypes = __webpack_require__(3); // TODO: this is special because it gets imported during build.\n\n\n            var ReactVersion = '16.6.0'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n            // nor polyfill, then a plain number is used for performance.\n\n            var hasSymbol = typeof Symbol === 'function' && Symbol.for;\n            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;\n            var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n            var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n            var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n            function getIteratorFn(maybeIterable) {\n              if (maybeIterable === null || typeof maybeIterable !== 'object') {\n                return null;\n              }\n\n              var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n              if (typeof maybeIterator === 'function') {\n                return maybeIterator;\n              }\n\n              return null;\n            }\n            /**\n             * Use invariant() to assert state which your program assumes to be true.\n             *\n             * Provide sprintf-style format (only %s is supported) and arguments\n             * to provide information about what broke and what you were\n             * expecting.\n             *\n             * The invariant message will be stripped in production, but the invariant\n             * will remain to ensure logic does not differ in production.\n             */\n\n\n            var validateFormat = function validateFormat() {};\n\n            {\n              validateFormat = function validateFormat(format) {\n                if (format === undefined) {\n                  throw new Error('invariant requires an error message argument');\n                }\n              };\n            }\n\n            function invariant(condition, format, a, b, c, d, e, f) {\n              validateFormat(format);\n\n              if (!condition) {\n                var error = void 0;\n\n                if (format === undefined) {\n                  error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n                } else {\n                  var args = [a, b, c, d, e, f];\n                  var argIndex = 0;\n                  error = new Error(format.replace(/%s/g, function () {\n                    return args[argIndex++];\n                  }));\n                  error.name = 'Invariant Violation';\n                }\n\n                error.framesToPop = 1; // we don't care about invariant's own frame\n\n                throw error;\n              }\n            } // Relying on the `invariant()` implementation lets us\n            // preserve the format and params in the www builds.\n\n            /**\n             * Forked from fbjs/warning:\n             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n             *\n             * Only change is we use console.warn instead of console.error,\n             * and do nothing when 'console' is not supported.\n             * This really simplifies the code.\n             * ---\n             * Similar to invariant but only logs a warning if the condition is not met.\n             * This can be used to log issues in development environments in critical\n             * paths. Removing the logging code for production environments will keep the\n             * same logic and follow the same code paths.\n             */\n\n\n            var lowPriorityWarning = function lowPriorityWarning() {};\n\n            {\n              var printWarning = function printWarning(format) {\n                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                  args[_key - 1] = arguments[_key];\n                }\n\n                var argIndex = 0;\n                var message = 'Warning: ' + format.replace(/%s/g, function () {\n                  return args[argIndex++];\n                });\n\n                if (typeof console !== 'undefined') {\n                  console.warn(message);\n                }\n\n                try {\n                  // --- Welcome to debugging React ---\n                  // This error was thrown as a convenience so that you can use this stack\n                  // to find the callsite that caused this warning to fire.\n                  throw new Error(message);\n                } catch (x) {}\n              };\n\n              lowPriorityWarning = function lowPriorityWarning(condition, format) {\n                if (format === undefined) {\n                  throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n                }\n\n                if (!condition) {\n                  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n                    args[_key2 - 2] = arguments[_key2];\n                  }\n\n                  printWarning.apply(undefined, [format].concat(args));\n                }\n              };\n            }\n            var lowPriorityWarning$1 = lowPriorityWarning;\n            /**\n             * Similar to invariant but only logs a warning if the condition is not met.\n             * This can be used to log issues in development environments in critical\n             * paths. Removing the logging code for production environments will keep the\n             * same logic and follow the same code paths.\n             */\n\n            var warningWithoutStack = function warningWithoutStack() {};\n\n            {\n              warningWithoutStack = function warningWithoutStack(condition, format) {\n                for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                  args[_key - 2] = arguments[_key];\n                }\n\n                if (format === undefined) {\n                  throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n                }\n\n                if (args.length > 8) {\n                  // Check before the condition to catch violations early.\n                  throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n                }\n\n                if (condition) {\n                  return;\n                }\n\n                if (typeof console !== 'undefined') {\n                  var _args$map = args.map(function (item) {\n                    return '' + item;\n                  }),\n                      a = _args$map[0],\n                      b = _args$map[1],\n                      c = _args$map[2],\n                      d = _args$map[3],\n                      e = _args$map[4],\n                      f = _args$map[5],\n                      g = _args$map[6],\n                      h = _args$map[7];\n\n                  var message = 'Warning: ' + format; // We intentionally don't use spread (or .apply) because it breaks IE9:\n                  // https://github.com/facebook/react/issues/13610\n\n                  switch (args.length) {\n                    case 0:\n                      console.error(message);\n                      break;\n\n                    case 1:\n                      console.error(message, a);\n                      break;\n\n                    case 2:\n                      console.error(message, a, b);\n                      break;\n\n                    case 3:\n                      console.error(message, a, b, c);\n                      break;\n\n                    case 4:\n                      console.error(message, a, b, c, d);\n                      break;\n\n                    case 5:\n                      console.error(message, a, b, c, d, e);\n                      break;\n\n                    case 6:\n                      console.error(message, a, b, c, d, e, f);\n                      break;\n\n                    case 7:\n                      console.error(message, a, b, c, d, e, f, g);\n                      break;\n\n                    case 8:\n                      console.error(message, a, b, c, d, e, f, g, h);\n                      break;\n\n                    default:\n                      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n                  }\n                }\n\n                try {\n                  // --- Welcome to debugging React ---\n                  // This error was thrown as a convenience so that you can use this stack\n                  // to find the callsite that caused this warning to fire.\n                  var argIndex = 0;\n\n                  var _message = 'Warning: ' + format.replace(/%s/g, function () {\n                    return args[argIndex++];\n                  });\n\n                  throw new Error(_message);\n                } catch (x) {}\n              };\n            }\n            var warningWithoutStack$1 = warningWithoutStack;\n            var didWarnStateUpdateForUnmountedComponent = {};\n\n            function warnNoop(publicInstance, callerName) {\n              {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n                var warningKey = componentName + '.' + callerName;\n\n                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n                  return;\n                }\n\n                warningWithoutStack$1(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n                didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n              }\n            }\n            /**\n             * This is the abstract API for an update queue.\n             */\n\n\n            var ReactNoopUpdateQueue = {\n              /**\n               * Checks whether or not this composite component is mounted.\n               * @param {ReactClass} publicInstance The instance we want to test.\n               * @return {boolean} True if mounted, false otherwise.\n               * @protected\n               * @final\n               */\n              isMounted: function isMounted(publicInstance) {\n                return false;\n              },\n\n              /**\n               * Forces an update. This should only be invoked when it is known with\n               * certainty that we are **not** in a DOM transaction.\n               *\n               * You may want to call this when you know that some deeper aspect of the\n               * component's state has changed but `setState` was not called.\n               *\n               * This will not invoke `shouldComponentUpdate`, but it will invoke\n               * `componentWillUpdate` and `componentDidUpdate`.\n               *\n               * @param {ReactClass} publicInstance The instance that should rerender.\n               * @param {?function} callback Called after component is updated.\n               * @param {?string} callerName name of the calling function in the public API.\n               * @internal\n               */\n              enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {\n                warnNoop(publicInstance, 'forceUpdate');\n              },\n\n              /**\n               * Replaces all of the state. Always use this or `setState` to mutate state.\n               * You should treat `this.state` as immutable.\n               *\n               * There is no guarantee that `this.state` will be immediately updated, so\n               * accessing `this.state` after calling this method may return the old value.\n               *\n               * @param {ReactClass} publicInstance The instance that should rerender.\n               * @param {object} completeState Next state.\n               * @param {?function} callback Called after component is updated.\n               * @param {?string} callerName name of the calling function in the public API.\n               * @internal\n               */\n              enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {\n                warnNoop(publicInstance, 'replaceState');\n              },\n\n              /**\n               * Sets a subset of the state. This only exists because _pendingState is\n               * internal. This provides a merging strategy that is not available to deep\n               * properties which is confusing. TODO: Expose pendingState or don't use it\n               * during the merge.\n               *\n               * @param {ReactClass} publicInstance The instance that should rerender.\n               * @param {object} partialState Next partial state to be merged with state.\n               * @param {?function} callback Called after component is updated.\n               * @param {?string} Name of the calling function in the public API.\n               * @internal\n               */\n              enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {\n                warnNoop(publicInstance, 'setState');\n              }\n            };\n            var emptyObject = {};\n            {\n              Object.freeze(emptyObject);\n            }\n            /**\n             * Base class helpers for the updating state of a component.\n             */\n\n            function Component(props, context, updater) {\n              this.props = props;\n              this.context = context; // If a component has string refs, we will assign a different object later.\n\n              this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n              // renderer.\n\n              this.updater = updater || ReactNoopUpdateQueue;\n            }\n\n            Component.prototype.isReactComponent = {};\n            /**\n             * Sets a subset of the state. Always use this to mutate\n             * state. You should treat `this.state` as immutable.\n             *\n             * There is no guarantee that `this.state` will be immediately updated, so\n             * accessing `this.state` after calling this method may return the old value.\n             *\n             * There is no guarantee that calls to `setState` will run synchronously,\n             * as they may eventually be batched together.  You can provide an optional\n             * callback that will be executed when the call to setState is actually\n             * completed.\n             *\n             * When a function is provided to setState, it will be called at some point in\n             * the future (not synchronously). It will be called with the up to date\n             * component arguments (state, props, context). These values can be different\n             * from this.* because your function may be called after receiveProps but before\n             * shouldComponentUpdate, and this new state, props, and context will not yet be\n             * assigned to this.\n             *\n             * @param {object|function} partialState Next partial state or function to\n             *        produce next partial state to be merged with current state.\n             * @param {?function} callback Called after state is updated.\n             * @final\n             * @protected\n             */\n\n            Component.prototype.setState = function (partialState, callback) {\n              !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;\n              this.updater.enqueueSetState(this, partialState, callback, 'setState');\n            };\n            /**\n             * Forces an update. This should only be invoked when it is known with\n             * certainty that we are **not** in a DOM transaction.\n             *\n             * You may want to call this when you know that some deeper aspect of the\n             * component's state has changed but `setState` was not called.\n             *\n             * This will not invoke `shouldComponentUpdate`, but it will invoke\n             * `componentWillUpdate` and `componentDidUpdate`.\n             *\n             * @param {?function} callback Called after update is complete.\n             * @final\n             * @protected\n             */\n\n\n            Component.prototype.forceUpdate = function (callback) {\n              this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n            };\n            /**\n             * Deprecated APIs. These APIs used to exist on classic React classes but since\n             * we would like to deprecate them, we're not going to move them over to this\n             * modern base class. Instead, we define a getter that warns if it's accessed.\n             */\n\n\n            {\n              var deprecatedAPIs = {\n                isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n                replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n              };\n\n              var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {\n                Object.defineProperty(Component.prototype, methodName, {\n                  get: function get() {\n                    lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n                    return undefined;\n                  }\n                });\n              };\n\n              for (var fnName in deprecatedAPIs) {\n                if (deprecatedAPIs.hasOwnProperty(fnName)) {\n                  defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n                }\n              }\n            }\n\n            function ComponentDummy() {}\n\n            ComponentDummy.prototype = Component.prototype;\n            /**\n             * Convenience component with default shallow equality check for sCU.\n             */\n\n            function PureComponent(props, context, updater) {\n              this.props = props;\n              this.context = context; // If a component has string refs, we will assign a different object later.\n\n              this.refs = emptyObject;\n              this.updater = updater || ReactNoopUpdateQueue;\n            }\n\n            var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n            pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n            _assign(pureComponentPrototype, Component.prototype);\n\n            pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value\n\n            function createRef() {\n              var refObject = {\n                current: null\n              };\n              {\n                Object.seal(refObject);\n              }\n              return refObject;\n            }\n            /**\n             * Keeps track of the current owner.\n             *\n             * The current owner is the component who should own any components that are\n             * currently being constructed.\n             */\n\n\n            var ReactCurrentOwner = {\n              /**\n               * @internal\n               * @type {ReactComponent}\n               */\n              current: null,\n              currentDispatcher: null\n            };\n            var BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\n            var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {\n              var sourceInfo = '';\n\n              if (source) {\n                var path = source.fileName;\n                var fileName = path.replace(BEFORE_SLASH_RE, '');\n                {\n                  // In DEV, include code for a common special case:\n                  // prefer \"folder/index.js\" instead of just \"index.js\".\n                  if (/^index\\./.test(fileName)) {\n                    var match = path.match(BEFORE_SLASH_RE);\n\n                    if (match) {\n                      var pathBeforeSlash = match[1];\n\n                      if (pathBeforeSlash) {\n                        var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n                        fileName = folderName + '/' + fileName;\n                      }\n                    }\n                  }\n                }\n                sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n              } else if (ownerName) {\n                sourceInfo = ' (created by ' + ownerName + ')';\n              }\n\n              return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n            };\n\n            var Resolved = 1;\n\n            function refineResolvedLazyComponent(lazyComponent) {\n              return lazyComponent._status === Resolved ? lazyComponent._result : null;\n            }\n\n            function getWrappedName(outerType, innerType, wrapperName) {\n              var functionName = innerType.displayName || innerType.name || '';\n              return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);\n            }\n\n            function getComponentName(type) {\n              if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n              }\n\n              {\n                if (typeof type.tag === 'number') {\n                  warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n                }\n              }\n\n              if (typeof type === 'function') {\n                return type.displayName || type.name || null;\n              }\n\n              if (typeof type === 'string') {\n                return type;\n              }\n\n              switch (type) {\n                case REACT_CONCURRENT_MODE_TYPE:\n                  return 'ConcurrentMode';\n\n                case REACT_FRAGMENT_TYPE:\n                  return 'Fragment';\n\n                case REACT_PORTAL_TYPE:\n                  return 'Portal';\n\n                case REACT_PROFILER_TYPE:\n                  return 'Profiler';\n\n                case REACT_STRICT_MODE_TYPE:\n                  return 'StrictMode';\n\n                case REACT_SUSPENSE_TYPE:\n                  return 'Suspense';\n              }\n\n              if (typeof type === 'object') {\n                switch (type.$$typeof) {\n                  case REACT_CONTEXT_TYPE:\n                    return 'Context.Consumer';\n\n                  case REACT_PROVIDER_TYPE:\n                    return 'Context.Provider';\n\n                  case REACT_FORWARD_REF_TYPE:\n                    return getWrappedName(type, type.render, 'ForwardRef');\n\n                  case REACT_MEMO_TYPE:\n                    return getComponentName(type.type);\n\n                  case REACT_LAZY_TYPE:\n                    {\n                      var thenable = type;\n                      var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n                      if (resolvedThenable) {\n                        return getComponentName(resolvedThenable);\n                      }\n                    }\n                }\n              }\n\n              return null;\n            }\n\n            var ReactDebugCurrentFrame = {};\n            var currentlyValidatingElement = null;\n\n            function setCurrentlyValidatingElement(element) {\n              {\n                currentlyValidatingElement = element;\n              }\n            }\n\n            {\n              // Stack implementation injected by the current renderer.\n              ReactDebugCurrentFrame.getCurrentStack = null;\n\n              ReactDebugCurrentFrame.getStackAddendum = function () {\n                var stack = ''; // Add an extra top frame while an element is being validated\n\n                if (currentlyValidatingElement) {\n                  var name = getComponentName(currentlyValidatingElement.type);\n                  var owner = currentlyValidatingElement._owner;\n                  stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n                } // Delegate to the injected renderer-specific implementation\n\n\n                var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n                if (impl) {\n                  stack += impl() || '';\n                }\n\n                return stack;\n              };\n            }\n            var ReactSharedInternals = {\n              ReactCurrentOwner: ReactCurrentOwner,\n              // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n              assign: _assign\n            };\n            {\n              _assign(ReactSharedInternals, {\n                // These should not be included in production.\n                ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n                // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n                // TODO: remove in React 17.0.\n                ReactComponentTreeHook: {}\n              });\n            }\n            /**\n             * Similar to invariant but only logs a warning if the condition is not met.\n             * This can be used to log issues in development environments in critical\n             * paths. Removing the logging code for production environments will keep the\n             * same logic and follow the same code paths.\n             */\n\n            var warning = warningWithoutStack$1;\n            {\n              warning = function warning(condition, format) {\n                if (condition) {\n                  return;\n                }\n\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args\n\n                for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                  args[_key - 2] = arguments[_key];\n                }\n\n                warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));\n              };\n            }\n            var warning$1 = warning;\n            var hasOwnProperty = Object.prototype.hasOwnProperty;\n            var RESERVED_PROPS = {\n              key: true,\n              ref: true,\n              __self: true,\n              __source: true\n            };\n            var specialPropKeyWarningShown = void 0;\n            var specialPropRefWarningShown = void 0;\n\n            function hasValidRef(config) {\n              {\n                if (hasOwnProperty.call(config, 'ref')) {\n                  var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n                  if (getter && getter.isReactWarning) {\n                    return false;\n                  }\n                }\n              }\n              return config.ref !== undefined;\n            }\n\n            function hasValidKey(config) {\n              {\n                if (hasOwnProperty.call(config, 'key')) {\n                  var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n                  if (getter && getter.isReactWarning) {\n                    return false;\n                  }\n                }\n              }\n              return config.key !== undefined;\n            }\n\n            function defineKeyPropWarningGetter(props, displayName) {\n              var warnAboutAccessingKey = function warnAboutAccessingKey() {\n                if (!specialPropKeyWarningShown) {\n                  specialPropKeyWarningShown = true;\n                  warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n                }\n              };\n\n              warnAboutAccessingKey.isReactWarning = true;\n              Object.defineProperty(props, 'key', {\n                get: warnAboutAccessingKey,\n                configurable: true\n              });\n            }\n\n            function defineRefPropWarningGetter(props, displayName) {\n              var warnAboutAccessingRef = function warnAboutAccessingRef() {\n                if (!specialPropRefWarningShown) {\n                  specialPropRefWarningShown = true;\n                  warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n                }\n              };\n\n              warnAboutAccessingRef.isReactWarning = true;\n              Object.defineProperty(props, 'ref', {\n                get: warnAboutAccessingRef,\n                configurable: true\n              });\n            }\n            /**\n             * Factory method to create a new React element. This no longer adheres to\n             * the class pattern, so do not use new to call it. Also, no instanceof check\n             * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n             * if something is a React Element.\n             *\n             * @param {*} type\n             * @param {*} key\n             * @param {string|object} ref\n             * @param {*} self A *temporary* helper to detect places where `this` is\n             * different from the `owner` when React.createElement is called, so that we\n             * can warn. We want to get rid of owner and replace string `ref`s with arrow\n             * functions, and as long as `this` and owner are the same, there will be no\n             * change in behavior.\n             * @param {*} source An annotation object (added by a transpiler or otherwise)\n             * indicating filename, line number, and/or other information.\n             * @param {*} owner\n             * @param {*} props\n             * @internal\n             */\n\n\n            var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {\n              var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n              };\n              {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n\n                Object.defineProperty(element._store, 'validated', {\n                  configurable: false,\n                  enumerable: false,\n                  writable: true,\n                  value: false\n                }); // self and source are DEV only properties.\n\n                Object.defineProperty(element, '_self', {\n                  configurable: false,\n                  enumerable: false,\n                  writable: false,\n                  value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n\n                Object.defineProperty(element, '_source', {\n                  configurable: false,\n                  enumerable: false,\n                  writable: false,\n                  value: source\n                });\n\n                if (Object.freeze) {\n                  Object.freeze(element.props);\n                  Object.freeze(element);\n                }\n              }\n              return element;\n            };\n            /**\n             * Create and return a new ReactElement of the given type.\n             * See https://reactjs.org/docs/react-api.html#createelement\n             */\n\n\n            function createElement(type, config, children) {\n              var propName = void 0; // Reserved names are extracted\n\n              var props = {};\n              var key = null;\n              var ref = null;\n              var self = null;\n              var source = null;\n\n              if (config != null) {\n                if (hasValidRef(config)) {\n                  ref = config.ref;\n                }\n\n                if (hasValidKey(config)) {\n                  key = '' + config.key;\n                }\n\n                self = config.__self === undefined ? null : config.__self;\n                source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n                for (propName in config) {\n                  if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                    props[propName] = config[propName];\n                  }\n                }\n              } // Children can be more than one argument, and those are transferred onto\n              // the newly allocated props object.\n\n\n              var childrenLength = arguments.length - 2;\n\n              if (childrenLength === 1) {\n                props.children = children;\n              } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n\n                for (var i = 0; i < childrenLength; i++) {\n                  childArray[i] = arguments[i + 2];\n                }\n\n                {\n                  if (Object.freeze) {\n                    Object.freeze(childArray);\n                  }\n                }\n                props.children = childArray;\n              } // Resolve default props\n\n\n              if (type && type.defaultProps) {\n                var defaultProps = type.defaultProps;\n\n                for (propName in defaultProps) {\n                  if (props[propName] === undefined) {\n                    props[propName] = defaultProps[propName];\n                  }\n                }\n              }\n\n              {\n                if (key || ref) {\n                  var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n                  if (key) {\n                    defineKeyPropWarningGetter(props, displayName);\n                  }\n\n                  if (ref) {\n                    defineRefPropWarningGetter(props, displayName);\n                  }\n                }\n              }\n              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n            }\n            /**\n             * Return a function that produces ReactElements of a given type.\n             * See https://reactjs.org/docs/react-api.html#createfactory\n             */\n\n\n            function cloneAndReplaceKey(oldElement, newKey) {\n              var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n              return newElement;\n            }\n            /**\n             * Clone and return a new ReactElement using element as the starting point.\n             * See https://reactjs.org/docs/react-api.html#cloneelement\n             */\n\n\n            function cloneElement(element, config, children) {\n              !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;\n              var propName = void 0; // Original props are copied\n\n              var props = _assign({}, element.props); // Reserved names are extracted\n\n\n              var key = element.key;\n              var ref = element.ref; // Self is preserved since the owner is preserved.\n\n              var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n              // transpiler, and the original source is probably a better indicator of the\n              // true owner.\n\n              var source = element._source; // Owner will be preserved, unless ref is overridden\n\n              var owner = element._owner;\n\n              if (config != null) {\n                if (hasValidRef(config)) {\n                  // Silently steal the ref from the parent.\n                  ref = config.ref;\n                  owner = ReactCurrentOwner.current;\n                }\n\n                if (hasValidKey(config)) {\n                  key = '' + config.key;\n                } // Remaining properties override existing props\n\n\n                var defaultProps = void 0;\n\n                if (element.type && element.type.defaultProps) {\n                  defaultProps = element.type.defaultProps;\n                }\n\n                for (propName in config) {\n                  if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                    if (config[propName] === undefined && defaultProps !== undefined) {\n                      // Resolve default props\n                      props[propName] = defaultProps[propName];\n                    } else {\n                      props[propName] = config[propName];\n                    }\n                  }\n                }\n              } // Children can be more than one argument, and those are transferred onto\n              // the newly allocated props object.\n\n\n              var childrenLength = arguments.length - 2;\n\n              if (childrenLength === 1) {\n                props.children = children;\n              } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n\n                for (var i = 0; i < childrenLength; i++) {\n                  childArray[i] = arguments[i + 2];\n                }\n\n                props.children = childArray;\n              }\n\n              return ReactElement(element.type, key, ref, self, source, owner, props);\n            }\n            /**\n             * Verifies the object is a ReactElement.\n             * See https://reactjs.org/docs/react-api.html#isvalidelement\n             * @param {?object} object\n             * @return {boolean} True if `object` is a ReactElement.\n             * @final\n             */\n\n\n            function isValidElement(object) {\n              return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n\n            var SEPARATOR = '.';\n            var SUBSEPARATOR = ':';\n            /**\n             * Escape and wrap key so it is safe to use as a reactid\n             *\n             * @param {string} key to be escaped.\n             * @return {string} the escaped key.\n             */\n\n            function escape(key) {\n              var escapeRegex = /[=:]/g;\n              var escaperLookup = {\n                '=': '=0',\n                ':': '=2'\n              };\n              var escapedString = ('' + key).replace(escapeRegex, function (match) {\n                return escaperLookup[match];\n              });\n              return '$' + escapedString;\n            }\n            /**\n             * TODO: Test that a single child and an array with one item have the same key\n             * pattern.\n             */\n\n\n            var didWarnAboutMaps = false;\n            var userProvidedKeyEscapeRegex = /\\/+/g;\n\n            function escapeUserProvidedKey(text) {\n              return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n            }\n\n            var POOL_SIZE = 10;\n            var traverseContextPool = [];\n\n            function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n              if (traverseContextPool.length) {\n                var traverseContext = traverseContextPool.pop();\n                traverseContext.result = mapResult;\n                traverseContext.keyPrefix = keyPrefix;\n                traverseContext.func = mapFunction;\n                traverseContext.context = mapContext;\n                traverseContext.count = 0;\n                return traverseContext;\n              } else {\n                return {\n                  result: mapResult,\n                  keyPrefix: keyPrefix,\n                  func: mapFunction,\n                  context: mapContext,\n                  count: 0\n                };\n              }\n            }\n\n            function releaseTraverseContext(traverseContext) {\n              traverseContext.result = null;\n              traverseContext.keyPrefix = null;\n              traverseContext.func = null;\n              traverseContext.context = null;\n              traverseContext.count = 0;\n\n              if (traverseContextPool.length < POOL_SIZE) {\n                traverseContextPool.push(traverseContext);\n              }\n            }\n            /**\n             * @param {?*} children Children tree container.\n             * @param {!string} nameSoFar Name of the key path so far.\n             * @param {!function} callback Callback to invoke with each child found.\n             * @param {?*} traverseContext Used to pass information throughout the traversal\n             * process.\n             * @return {!number} The number of children in this subtree.\n             */\n\n\n            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n              var type = typeof children;\n\n              if (type === 'undefined' || type === 'boolean') {\n                // All of the above are perceived as null.\n                children = null;\n              }\n\n              var invokeCallback = false;\n\n              if (children === null) {\n                invokeCallback = true;\n              } else {\n                switch (type) {\n                  case 'string':\n                  case 'number':\n                    invokeCallback = true;\n                    break;\n\n                  case 'object':\n                    switch (children.$$typeof) {\n                      case REACT_ELEMENT_TYPE:\n                      case REACT_PORTAL_TYPE:\n                        invokeCallback = true;\n                    }\n\n                }\n              }\n\n              if (invokeCallback) {\n                callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n                // so that it's consistent if the number of children grows.\n                nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n                return 1;\n              }\n\n              var child = void 0;\n              var nextName = void 0;\n              var subtreeCount = 0; // Count of children found in the current subtree.\n\n              var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n              if (Array.isArray(children)) {\n                for (var i = 0; i < children.length; i++) {\n                  child = children[i];\n                  nextName = nextNamePrefix + getComponentKey(child, i);\n                  subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n                }\n              } else {\n                var iteratorFn = getIteratorFn(children);\n\n                if (typeof iteratorFn === 'function') {\n                  {\n                    // Warn about using Maps as children\n                    if (iteratorFn === children.entries) {\n                      !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;\n                      didWarnAboutMaps = true;\n                    }\n                  }\n                  var iterator = iteratorFn.call(children);\n                  var step = void 0;\n                  var ii = 0;\n\n                  while (!(step = iterator.next()).done) {\n                    child = step.value;\n                    nextName = nextNamePrefix + getComponentKey(child, ii++);\n                    subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n                  }\n                } else if (type === 'object') {\n                  var addendum = '';\n                  {\n                    addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n                  }\n                  var childrenString = '' + children;\n                  invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);\n                }\n              }\n\n              return subtreeCount;\n            }\n            /**\n             * Traverses children that are typically specified as `props.children`, but\n             * might also be specified through attributes:\n             *\n             * - `traverseAllChildren(this.props.children, ...)`\n             * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n             *\n             * The `traverseContext` is an optional argument that is passed through the\n             * entire traversal. It can be used to store accumulations or anything else that\n             * the callback might find relevant.\n             *\n             * @param {?*} children Children tree object.\n             * @param {!function} callback To invoke upon traversing each child.\n             * @param {?*} traverseContext Context for traversal.\n             * @return {!number} The number of children in this subtree.\n             */\n\n\n            function traverseAllChildren(children, callback, traverseContext) {\n              if (children == null) {\n                return 0;\n              }\n\n              return traverseAllChildrenImpl(children, '', callback, traverseContext);\n            }\n            /**\n             * Generate a key string that identifies a component within a set.\n             *\n             * @param {*} component A component that could contain a manual key.\n             * @param {number} index Index that is used if a manual key is not provided.\n             * @return {string}\n             */\n\n\n            function getComponentKey(component, index) {\n              // Do some typechecking here since we call this blindly. We want to ensure\n              // that we don't block potential future ES APIs.\n              if (typeof component === 'object' && component !== null && component.key != null) {\n                // Explicit key\n                return escape(component.key);\n              } // Implicit key determined by the index in the set\n\n\n              return index.toString(36);\n            }\n\n            function forEachSingleChild(bookKeeping, child, name) {\n              var func = bookKeeping.func,\n                  context = bookKeeping.context;\n              func.call(context, child, bookKeeping.count++);\n            }\n            /**\n             * Iterates through children that are typically specified as `props.children`.\n             *\n             * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n             *\n             * The provided forEachFunc(child, index) will be called for each\n             * leaf child.\n             *\n             * @param {?*} children Children tree container.\n             * @param {function(*, int)} forEachFunc\n             * @param {*} forEachContext Context for forEachContext.\n             */\n\n\n            function forEachChildren(children, forEachFunc, forEachContext) {\n              if (children == null) {\n                return children;\n              }\n\n              var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n              traverseAllChildren(children, forEachSingleChild, traverseContext);\n              releaseTraverseContext(traverseContext);\n            }\n\n            function mapSingleChildIntoContext(bookKeeping, child, childKey) {\n              var result = bookKeeping.result,\n                  keyPrefix = bookKeeping.keyPrefix,\n                  func = bookKeeping.func,\n                  context = bookKeeping.context;\n              var mappedChild = func.call(context, child, bookKeeping.count++);\n\n              if (Array.isArray(mappedChild)) {\n                mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n                  return c;\n                });\n              } else if (mappedChild != null) {\n                if (isValidElement(mappedChild)) {\n                  mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n                  // traverseAllChildren used to do for objects as children\n                  keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n                }\n\n                result.push(mappedChild);\n              }\n            }\n\n            function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n              var escapedPrefix = '';\n\n              if (prefix != null) {\n                escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n              }\n\n              var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n              traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n              releaseTraverseContext(traverseContext);\n            }\n            /**\n             * Maps children that are typically specified as `props.children`.\n             *\n             * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n             *\n             * The provided mapFunction(child, key, index) will be called for each\n             * leaf child.\n             *\n             * @param {?*} children Children tree container.\n             * @param {function(*, int)} func The map function.\n             * @param {*} context Context for mapFunction.\n             * @return {object} Object containing the ordered map of results.\n             */\n\n\n            function mapChildren(children, func, context) {\n              if (children == null) {\n                return children;\n              }\n\n              var result = [];\n              mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n              return result;\n            }\n            /**\n             * Count the number of children that are typically specified as\n             * `props.children`.\n             *\n             * See https://reactjs.org/docs/react-api.html#reactchildrencount\n             *\n             * @param {?*} children Children tree container.\n             * @return {number} The number of children.\n             */\n\n\n            function countChildren(children) {\n              return traverseAllChildren(children, function () {\n                return null;\n              }, null);\n            }\n            /**\n             * Flatten a children object (typically specified as `props.children`) and\n             * return an array with appropriately re-keyed children.\n             *\n             * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n             */\n\n\n            function toArray(children) {\n              var result = [];\n              mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n                return child;\n              });\n              return result;\n            }\n            /**\n             * Returns the first child in a collection of children and verifies that there\n             * is only one child in the collection.\n             *\n             * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n             *\n             * The current implementation of this function assumes that a single child gets\n             * passed without a wrapper, but the purpose of this helper function is to\n             * abstract away the particular structure of children.\n             *\n             * @param {?object} children Child collection structure.\n             * @return {ReactElement} The first and only `ReactElement` contained in the\n             * structure.\n             */\n\n\n            function onlyChild(children) {\n              !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;\n              return children;\n            }\n\n            function createContext(defaultValue, calculateChangedBits) {\n              if (calculateChangedBits === undefined) {\n                calculateChangedBits = null;\n              } else {\n                {\n                  !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;\n                }\n              }\n\n              var context = {\n                $$typeof: REACT_CONTEXT_TYPE,\n                _calculateChangedBits: calculateChangedBits,\n                // As a workaround to support multiple concurrent renderers, we categorize\n                // some renderers as primary and others as secondary. We only expect\n                // there to be two concurrent renderers at most: React Native (primary) and\n                // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                // Secondary renderers store their context values on separate fields.\n                _currentValue: defaultValue,\n                _currentValue2: defaultValue,\n                // These are circular\n                Provider: null,\n                Consumer: null\n              };\n              context.Provider = {\n                $$typeof: REACT_PROVIDER_TYPE,\n                _context: context\n              };\n              var hasWarnedAboutUsingNestedContextConsumers = false;\n              var hasWarnedAboutUsingConsumerProvider = false;\n              {\n                // A separate object, but proxies back to the original context object for\n                // backwards compatibility. It has a different $$typeof, so we can properly\n                // warn for the incorrect usage of Context as a Consumer.\n                var Consumer = {\n                  $$typeof: REACT_CONTEXT_TYPE,\n                  _context: context,\n                  _calculateChangedBits: context._calculateChangedBits\n                }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n                Object.defineProperties(Consumer, {\n                  Provider: {\n                    get: function get() {\n                      if (!hasWarnedAboutUsingConsumerProvider) {\n                        hasWarnedAboutUsingConsumerProvider = true;\n                        warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n                      }\n\n                      return context.Provider;\n                    },\n                    set: function set(_Provider) {\n                      context.Provider = _Provider;\n                    }\n                  },\n                  _currentValue: {\n                    get: function get() {\n                      return context._currentValue;\n                    },\n                    set: function set(_currentValue) {\n                      context._currentValue = _currentValue;\n                    }\n                  },\n                  _currentValue2: {\n                    get: function get() {\n                      return context._currentValue2;\n                    },\n                    set: function set(_currentValue2) {\n                      context._currentValue2 = _currentValue2;\n                    }\n                  },\n                  Consumer: {\n                    get: function get() {\n                      if (!hasWarnedAboutUsingNestedContextConsumers) {\n                        hasWarnedAboutUsingNestedContextConsumers = true;\n                        warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n                      }\n\n                      return context.Consumer;\n                    }\n                  }\n                }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n                context.Consumer = Consumer;\n              }\n              {\n                context._currentRenderer = null;\n                context._currentRenderer2 = null;\n              }\n              return context;\n            }\n\n            function lazy(ctor) {\n              return {\n                $$typeof: REACT_LAZY_TYPE,\n                _ctor: ctor,\n                // React uses these fields to store the result.\n                _status: -1,\n                _result: null\n              };\n            }\n\n            function forwardRef(render) {\n              {\n                if (typeof render !== 'function') {\n                  warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n                } else {\n                  !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object\n                  render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;\n                }\n\n                if (render != null) {\n                  !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;\n                }\n              }\n              return {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: render\n              };\n            }\n\n            function isValidElementType(type) {\n              return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n              type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);\n            }\n\n            function memo(type, compare) {\n              {\n                if (!isValidElementType(type)) {\n                  warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n                }\n              }\n              return {\n                $$typeof: REACT_MEMO_TYPE,\n                type: type,\n                compare: compare === undefined ? null : compare\n              };\n            }\n            /**\n             * ReactElementValidator provides a wrapper around a element factory\n             * which validates the props passed to the element. This is intended to be\n             * used only in DEV and could be replaced by a static type checker for languages\n             * that support it.\n             */\n\n\n            var propTypesMisspellWarningShown = void 0;\n            {\n              propTypesMisspellWarningShown = false;\n            }\n\n            function getDeclarationErrorAddendum() {\n              if (ReactCurrentOwner.current) {\n                var name = getComponentName(ReactCurrentOwner.current.type);\n\n                if (name) {\n                  return '\\n\\nCheck the render method of `' + name + '`.';\n                }\n              }\n\n              return '';\n            }\n\n            function getSourceInfoErrorAddendum(elementProps) {\n              if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {\n                var source = elementProps.__source;\n                var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n                var lineNumber = source.lineNumber;\n                return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n              }\n\n              return '';\n            }\n            /**\n             * Warn if there's no key explicitly set on dynamic arrays of children or\n             * object keys are not valid. This allows us to keep track of children between\n             * updates.\n             */\n\n\n            var ownerHasKeyUseWarning = {};\n\n            function getCurrentComponentErrorInfo(parentType) {\n              var info = getDeclarationErrorAddendum();\n\n              if (!info) {\n                var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n                if (parentName) {\n                  info = '\\n\\nCheck the top-level render call using <' + parentName + '>.';\n                }\n              }\n\n              return info;\n            }\n            /**\n             * Warn if the element doesn't have an explicit key assigned to it.\n             * This element is in an array. The array could grow and shrink or be\n             * reordered. All children that haven't already been validated are required to\n             * have a \"key\" property assigned to it. Error statuses are cached so a warning\n             * will only be shown once.\n             *\n             * @internal\n             * @param {ReactElement} element Element that requires a key.\n             * @param {*} parentType element's parent's type.\n             */\n\n\n            function validateExplicitKey(element, parentType) {\n              if (!element._store || element._store.validated || element.key != null) {\n                return;\n              }\n\n              element._store.validated = true;\n              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                return;\n              }\n\n              ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n              // property, it may be the creator of the child that's responsible for\n              // assigning it a key.\n\n              var childOwner = '';\n\n              if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                // Give the component that originally created this child.\n                childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';\n              }\n\n              setCurrentlyValidatingElement(element);\n              {\n                warning$1(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n              }\n              setCurrentlyValidatingElement(null);\n            }\n            /**\n             * Ensure that every element either is passed in a static location, in an\n             * array with an explicit keys property defined, or in an object literal\n             * with valid key property.\n             *\n             * @internal\n             * @param {ReactNode} node Statically passed child of any type.\n             * @param {*} parentType node's parent's type.\n             */\n\n\n            function validateChildKeys(node, parentType) {\n              if (typeof node !== 'object') {\n                return;\n              }\n\n              if (Array.isArray(node)) {\n                for (var i = 0; i < node.length; i++) {\n                  var child = node[i];\n\n                  if (isValidElement(child)) {\n                    validateExplicitKey(child, parentType);\n                  }\n                }\n              } else if (isValidElement(node)) {\n                // This element was passed in a valid location.\n                if (node._store) {\n                  node._store.validated = true;\n                }\n              } else if (node) {\n                var iteratorFn = getIteratorFn(node);\n\n                if (typeof iteratorFn === 'function') {\n                  // Entry iterators used to provide implicit keys,\n                  // but now we print a separate warning for them later.\n                  if (iteratorFn !== node.entries) {\n                    var iterator = iteratorFn.call(node);\n                    var step = void 0;\n\n                    while (!(step = iterator.next()).done) {\n                      if (isValidElement(step.value)) {\n                        validateExplicitKey(step.value, parentType);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            /**\n             * Given an element, validate that its props follow the propTypes definition,\n             * provided by the type.\n             *\n             * @param {ReactElement} element\n             */\n\n\n            function validatePropTypes(element) {\n              var type = element.type;\n              var name = void 0,\n                  propTypes = void 0;\n\n              if (typeof type === 'function') {\n                // Class or function component\n                name = type.displayName || type.name;\n                propTypes = type.propTypes;\n              } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {\n                // ForwardRef\n                var functionName = type.render.displayName || type.render.name || '';\n                name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');\n                propTypes = type.propTypes;\n              } else {\n                return;\n              }\n\n              if (propTypes) {\n                setCurrentlyValidatingElement(element);\n                checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n                setCurrentlyValidatingElement(null);\n              } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                propTypesMisspellWarningShown = true;\n                warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n              }\n\n              if (typeof type.getDefaultProps === 'function') {\n                !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n              }\n            }\n            /**\n             * Given a fragment, validate that it can only be provided with fragment props\n             * @param {ReactElement} fragment\n             */\n\n\n            function validateFragmentProps(fragment) {\n              setCurrentlyValidatingElement(fragment);\n              var keys = Object.keys(fragment.props);\n\n              for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n\n                if (key !== 'children' && key !== 'key') {\n                  warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n                  break;\n                }\n              }\n\n              if (fragment.ref !== null) {\n                warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');\n              }\n\n              setCurrentlyValidatingElement(null);\n            }\n\n            function createElementWithValidation(type, props, children) {\n              var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n              // succeed and there will likely be errors in render.\n\n              if (!validType) {\n                var info = '';\n\n                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                  info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n                }\n\n                var sourceInfo = getSourceInfoErrorAddendum(props);\n\n                if (sourceInfo) {\n                  info += sourceInfo;\n                } else {\n                  info += getDeclarationErrorAddendum();\n                }\n\n                var typeString = void 0;\n\n                if (type === null) {\n                  typeString = 'null';\n                } else if (Array.isArray(type)) {\n                  typeString = 'array';\n                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                  typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';\n                  info = ' Did you accidentally export a JSX literal instead of a component?';\n                } else {\n                  typeString = typeof type;\n                }\n\n                warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n              }\n\n              var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n              // TODO: Drop this when these are no longer allowed as the type argument.\n\n              if (element == null) {\n                return element;\n              } // Skip key warning if the type isn't valid since our key validation logic\n              // doesn't expect a non-string/function type and can throw confusing errors.\n              // We don't want exception behavior to differ between dev and prod.\n              // (Rendering will throw with a helpful message and as soon as the type is\n              // fixed, the key warnings will appear.)\n\n\n              if (validType) {\n                for (var i = 2; i < arguments.length; i++) {\n                  validateChildKeys(arguments[i], type);\n                }\n              }\n\n              if (type === REACT_FRAGMENT_TYPE) {\n                validateFragmentProps(element);\n              } else {\n                validatePropTypes(element);\n              }\n\n              return element;\n            }\n\n            function createFactoryWithValidation(type) {\n              var validatedFactory = createElementWithValidation.bind(null, type);\n              validatedFactory.type = type; // Legacy hook: remove it\n\n              {\n                Object.defineProperty(validatedFactory, 'type', {\n                  enumerable: false,\n                  get: function get() {\n                    lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n                    Object.defineProperty(this, 'type', {\n                      value: type\n                    });\n                    return type;\n                  }\n                });\n              }\n              return validatedFactory;\n            }\n\n            function cloneElementWithValidation(element, props, children) {\n              var newElement = cloneElement.apply(this, arguments);\n\n              for (var i = 2; i < arguments.length; i++) {\n                validateChildKeys(arguments[i], newElement.type);\n              }\n\n              validatePropTypes(newElement);\n              return newElement;\n            }\n\n            var React = {\n              Children: {\n                map: mapChildren,\n                forEach: forEachChildren,\n                count: countChildren,\n                toArray: toArray,\n                only: onlyChild\n              },\n              createRef: createRef,\n              Component: Component,\n              PureComponent: PureComponent,\n              createContext: createContext,\n              forwardRef: forwardRef,\n              lazy: lazy,\n              memo: memo,\n              Fragment: REACT_FRAGMENT_TYPE,\n              StrictMode: REACT_STRICT_MODE_TYPE,\n              unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,\n              Suspense: REACT_SUSPENSE_TYPE,\n              unstable_Profiler: REACT_PROFILER_TYPE,\n              createElement: createElementWithValidation,\n              cloneElement: cloneElementWithValidation,\n              createFactory: createFactoryWithValidation,\n              isValidElement: isValidElement,\n              version: ReactVersion,\n              __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals\n            };\n            var React$2 = Object.freeze({\n              default: React\n            });\n            var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.\n            // This is hacky but makes it work with both Rollup and Jest.\n\n            var react = React$3.default || React$3;\n            module.exports = react;\n          })();\n        }\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, __webpack_require__(0));\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /* WEBPACK VAR INJECTION */\n      (function (process) {\n        /**\n        * Copyright (c) 2013-present, Facebook, Inc.\n        *\n        * This source code is licensed under the MIT license found in the\n        * LICENSE file in the root directory of this source tree.\n        */\n        if (process.env.NODE_ENV !== 'production') {\n          var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n\n          var isValidElement = function isValidElement(object) {\n            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n          }; // By explicitly using `prop-types` you are opting into new development behavior.\n          // http://fb.me/prop-types-in-prod\n\n\n          var throwOnDirectAccess = true;\n          module.exports = __webpack_require__(9)(isValidElement, throwOnDirectAccess);\n        } else {\n          // By explicitly using `prop-types` you are opting into new production behavior.\n          // http://fb.me/prop-types-in-prod\n          module.exports = __webpack_require__(10)();\n        }\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, __webpack_require__(0));\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (process) {\n        /**\n        * Copyright (c) 2013-present, Facebook, Inc.\n        *\n        * This source code is licensed under the MIT license found in the\n        * LICENSE file in the root directory of this source tree.\n        */\n        var assign = __webpack_require__(1);\n\n        var ReactPropTypesSecret = __webpack_require__(2);\n\n        var checkPropTypes = __webpack_require__(3);\n\n        var printWarning = function printWarning() {};\n\n        if (process.env.NODE_ENV !== 'production') {\n          printWarning = function printWarning(text) {\n            var message = 'Warning: ' + text;\n\n            if (typeof console !== 'undefined') {\n              console.error(message);\n            }\n\n            try {\n              // --- Welcome to debugging React ---\n              // This error was thrown as a convenience so that you can use this stack\n              // to find the callsite that caused this warning to fire.\n              throw new Error(message);\n            } catch (x) {}\n          };\n        }\n\n        function emptyFunctionThatReturnsNull() {\n          return null;\n        }\n\n        module.exports = function (isValidElement, throwOnDirectAccess) {\n          /* global Symbol */\n          var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n          var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n          /**\n           * Returns the iterator method function contained on the iterable object.\n           *\n           * Be sure to invoke the function with the iterable as context:\n           *\n           *     var iteratorFn = getIteratorFn(myIterable);\n           *     if (iteratorFn) {\n           *       var iterator = iteratorFn.call(myIterable);\n           *       ...\n           *     }\n           *\n           * @param {?object} maybeIterable\n           * @return {?function}\n           */\n\n          function getIteratorFn(maybeIterable) {\n            var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n\n            if (typeof iteratorFn === 'function') {\n              return iteratorFn;\n            }\n          }\n          /**\n           * Collection of methods that allow declaration and validation of props that are\n           * supplied to React components. Example usage:\n           *\n           *   var Props = require('ReactPropTypes');\n           *   var MyArticle = React.createClass({\n           *     propTypes: {\n           *       // An optional string prop named \"description\".\n           *       description: Props.string,\n           *\n           *       // A required enum prop named \"category\".\n           *       category: Props.oneOf(['News','Photos']).isRequired,\n           *\n           *       // A prop named \"dialog\" that requires an instance of Dialog.\n           *       dialog: Props.instanceOf(Dialog).isRequired\n           *     },\n           *     render: function() { ... }\n           *   });\n           *\n           * A more formal specification of how these methods are used:\n           *\n           *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n           *   decl := ReactPropTypes.{type}(.isRequired)?\n           *\n           * Each and every declaration produces a function with the same signature. This\n           * allows the creation of custom validation functions. For example:\n           *\n           *  var MyLink = React.createClass({\n           *    propTypes: {\n           *      // An optional string or URI prop named \"href\".\n           *      href: function(props, propName, componentName) {\n           *        var propValue = props[propName];\n           *        if (propValue != null && typeof propValue !== 'string' &&\n           *            !(propValue instanceof URI)) {\n           *          return new Error(\n           *            'Expected a string or an URI for ' + propName + ' in ' +\n           *            componentName\n           *          );\n           *        }\n           *      }\n           *    },\n           *    render: function() {...}\n           *  });\n           *\n           * @internal\n           */\n\n\n          var ANONYMOUS = '<<anonymous>>'; // Important!\n          // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n\n          var ReactPropTypes = {\n            array: createPrimitiveTypeChecker('array'),\n            bool: createPrimitiveTypeChecker('boolean'),\n            func: createPrimitiveTypeChecker('function'),\n            number: createPrimitiveTypeChecker('number'),\n            object: createPrimitiveTypeChecker('object'),\n            string: createPrimitiveTypeChecker('string'),\n            symbol: createPrimitiveTypeChecker('symbol'),\n            any: createAnyTypeChecker(),\n            arrayOf: createArrayOfTypeChecker,\n            element: createElementTypeChecker(),\n            instanceOf: createInstanceTypeChecker,\n            node: createNodeChecker(),\n            objectOf: createObjectOfTypeChecker,\n            oneOf: createEnumTypeChecker,\n            oneOfType: createUnionTypeChecker,\n            shape: createShapeTypeChecker,\n            exact: createStrictShapeTypeChecker\n          };\n          /**\n           * inlined Object.is polyfill to avoid requiring consumers ship their own\n           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n           */\n\n          /*eslint-disable no-self-compare*/\n\n          function is(x, y) {\n            // SameValue algorithm\n            if (x === y) {\n              // Steps 1-5, 7-10\n              // Steps 6.b-6.e: +0 != -0\n              return x !== 0 || 1 / x === 1 / y;\n            } else {\n              // Step 6.a: NaN == NaN\n              return x !== x && y !== y;\n            }\n          }\n          /*eslint-enable no-self-compare*/\n\n          /**\n           * We use an Error-like object for backward compatibility as people may call\n           * PropTypes directly and inspect their output. However, we don't use real\n           * Errors anymore. We don't inspect their stack anyway, and creating them\n           * is prohibitively expensive if they are created too often, such as what\n           * happens in oneOfType() for any type before the one that matched.\n           */\n\n\n          function PropTypeError(message) {\n            this.message = message;\n            this.stack = '';\n          } // Make `instanceof Error` still work for returned errors.\n\n\n          PropTypeError.prototype = Error.prototype;\n\n          function createChainableTypeChecker(validate) {\n            if (process.env.NODE_ENV !== 'production') {\n              var manualPropTypeCallCache = {};\n              var manualPropTypeWarningCount = 0;\n            }\n\n            function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n              componentName = componentName || ANONYMOUS;\n              propFullName = propFullName || propName;\n\n              if (secret !== ReactPropTypesSecret) {\n                if (throwOnDirectAccess) {\n                  // New behavior only for users of `prop-types` package\n                  var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n                  err.name = 'Invariant Violation';\n                  throw err;\n                } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n                  // Old behavior for people using React.PropTypes\n                  var cacheKey = componentName + ':' + propName;\n\n                  if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n                  manualPropTypeWarningCount < 3) {\n                    printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');\n                    manualPropTypeCallCache[cacheKey] = true;\n                    manualPropTypeWarningCount++;\n                  }\n                }\n              }\n\n              if (props[propName] == null) {\n                if (isRequired) {\n                  if (props[propName] === null) {\n                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n                  }\n\n                  return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n                }\n\n                return null;\n              } else {\n                return validate(props, propName, componentName, location, propFullName);\n              }\n            }\n\n            var chainedCheckType = checkType.bind(null, false);\n            chainedCheckType.isRequired = checkType.bind(null, true);\n            return chainedCheckType;\n          }\n\n          function createPrimitiveTypeChecker(expectedType) {\n            function validate(props, propName, componentName, location, propFullName, secret) {\n              var propValue = props[propName];\n              var propType = getPropType(propValue);\n\n              if (propType !== expectedType) {\n                // `propValue` being instance of, say, date/regexp, pass the 'object'\n                // check, but we can offer a more precise error message here rather than\n                // 'of type `object`'.\n                var preciseType = getPreciseType(propValue);\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createAnyTypeChecker() {\n            return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n          }\n\n          function createArrayOfTypeChecker(typeChecker) {\n            function validate(props, propName, componentName, location, propFullName) {\n              if (typeof typeChecker !== 'function') {\n                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n              }\n\n              var propValue = props[propName];\n\n              if (!Array.isArray(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n              }\n\n              for (var i = 0; i < propValue.length; i++) {\n                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n\n                if (error instanceof Error) {\n                  return error;\n                }\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createElementTypeChecker() {\n            function validate(props, propName, componentName, location, propFullName) {\n              var propValue = props[propName];\n\n              if (!isValidElement(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createInstanceTypeChecker(expectedClass) {\n            function validate(props, propName, componentName, location, propFullName) {\n              if (!(props[propName] instanceof expectedClass)) {\n                var expectedClassName = expectedClass.name || ANONYMOUS;\n                var actualClassName = getClassName(props[propName]);\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createEnumTypeChecker(expectedValues) {\n            if (!Array.isArray(expectedValues)) {\n              process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n              return emptyFunctionThatReturnsNull;\n            }\n\n            function validate(props, propName, componentName, location, propFullName) {\n              var propValue = props[propName];\n\n              for (var i = 0; i < expectedValues.length; i++) {\n                if (is(propValue, expectedValues[i])) {\n                  return null;\n                }\n              }\n\n              var valuesString = JSON.stringify(expectedValues);\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createObjectOfTypeChecker(typeChecker) {\n            function validate(props, propName, componentName, location, propFullName) {\n              if (typeof typeChecker !== 'function') {\n                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n              }\n\n              var propValue = props[propName];\n              var propType = getPropType(propValue);\n\n              if (propType !== 'object') {\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n              }\n\n              for (var key in propValue) {\n                if (propValue.hasOwnProperty(key)) {\n                  var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n                  if (error instanceof Error) {\n                    return error;\n                  }\n                }\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createUnionTypeChecker(arrayOfTypeCheckers) {\n            if (!Array.isArray(arrayOfTypeCheckers)) {\n              process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n              return emptyFunctionThatReturnsNull;\n            }\n\n            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n              var checker = arrayOfTypeCheckers[i];\n\n              if (typeof checker !== 'function') {\n                printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');\n                return emptyFunctionThatReturnsNull;\n              }\n            }\n\n            function validate(props, propName, componentName, location, propFullName) {\n              for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n                var checker = arrayOfTypeCheckers[i];\n\n                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n                  return null;\n                }\n              }\n\n              return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createNodeChecker() {\n            function validate(props, propName, componentName, location, propFullName) {\n              if (!isNode(props[propName])) {\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createShapeTypeChecker(shapeTypes) {\n            function validate(props, propName, componentName, location, propFullName) {\n              var propValue = props[propName];\n              var propType = getPropType(propValue);\n\n              if (propType !== 'object') {\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n              }\n\n              for (var key in shapeTypes) {\n                var checker = shapeTypes[key];\n\n                if (!checker) {\n                  continue;\n                }\n\n                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n                if (error) {\n                  return error;\n                }\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function createStrictShapeTypeChecker(shapeTypes) {\n            function validate(props, propName, componentName, location, propFullName) {\n              var propValue = props[propName];\n              var propType = getPropType(propValue);\n\n              if (propType !== 'object') {\n                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n              } // We need to check all keys in case some are required but missing from\n              // props.\n\n\n              var allKeys = assign({}, props[propName], shapeTypes);\n\n              for (var key in allKeys) {\n                var checker = shapeTypes[key];\n\n                if (!checker) {\n                  return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));\n                }\n\n                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n                if (error) {\n                  return error;\n                }\n              }\n\n              return null;\n            }\n\n            return createChainableTypeChecker(validate);\n          }\n\n          function isNode(propValue) {\n            switch (typeof propValue) {\n              case 'number':\n              case 'string':\n              case 'undefined':\n                return true;\n\n              case 'boolean':\n                return !propValue;\n\n              case 'object':\n                if (Array.isArray(propValue)) {\n                  return propValue.every(isNode);\n                }\n\n                if (propValue === null || isValidElement(propValue)) {\n                  return true;\n                }\n\n                var iteratorFn = getIteratorFn(propValue);\n\n                if (iteratorFn) {\n                  var iterator = iteratorFn.call(propValue);\n                  var step;\n\n                  if (iteratorFn !== propValue.entries) {\n                    while (!(step = iterator.next()).done) {\n                      if (!isNode(step.value)) {\n                        return false;\n                      }\n                    }\n                  } else {\n                    // Iterator will provide entry [k,v] tuples rather than values.\n                    while (!(step = iterator.next()).done) {\n                      var entry = step.value;\n\n                      if (entry) {\n                        if (!isNode(entry[1])) {\n                          return false;\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  return false;\n                }\n\n                return true;\n\n              default:\n                return false;\n            }\n          }\n\n          function isSymbol(propType, propValue) {\n            // Native Symbol.\n            if (propType === 'symbol') {\n              return true;\n            } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\n\n            if (propValue['@@toStringTag'] === 'Symbol') {\n              return true;\n            } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n            if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n              return true;\n            }\n\n            return false;\n          } // Equivalent of `typeof` but with special handling for array and regexp.\n\n\n          function getPropType(propValue) {\n            var propType = typeof propValue;\n\n            if (Array.isArray(propValue)) {\n              return 'array';\n            }\n\n            if (propValue instanceof RegExp) {\n              // Old webkits (at least until Android 4.0) return 'function' rather than\n              // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n              // passes PropTypes.object.\n              return 'object';\n            }\n\n            if (isSymbol(propType, propValue)) {\n              return 'symbol';\n            }\n\n            return propType;\n          } // This handles more types than `getPropType`. Only used for error messages.\n          // See `createPrimitiveTypeChecker`.\n\n\n          function getPreciseType(propValue) {\n            if (typeof propValue === 'undefined' || propValue === null) {\n              return '' + propValue;\n            }\n\n            var propType = getPropType(propValue);\n\n            if (propType === 'object') {\n              if (propValue instanceof Date) {\n                return 'date';\n              } else if (propValue instanceof RegExp) {\n                return 'regexp';\n              }\n            }\n\n            return propType;\n          } // Returns a string that is postfixed to a warning about an invalid type.\n          // For example, \"undefined\" or \"of type array\"\n\n\n          function getPostfixForTypeWarning(value) {\n            var type = getPreciseType(value);\n\n            switch (type) {\n              case 'array':\n              case 'object':\n                return 'an ' + type;\n\n              case 'boolean':\n              case 'date':\n              case 'regexp':\n                return 'a ' + type;\n\n              default:\n                return type;\n            }\n          } // Returns class name of the object, if any.\n\n\n          function getClassName(propValue) {\n            if (!propValue.constructor || !propValue.constructor.name) {\n              return ANONYMOUS;\n            }\n\n            return propValue.constructor.name;\n          }\n\n          ReactPropTypes.checkPropTypes = checkPropTypes;\n          ReactPropTypes.PropTypes = ReactPropTypes;\n          return ReactPropTypes;\n        };\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, __webpack_require__(0));\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       *\n       * This source code is licensed under the MIT license found in the\n       * LICENSE file in the root directory of this source tree.\n       */\n\n      var ReactPropTypesSecret = __webpack_require__(2);\n\n      function emptyFunction() {}\n\n      module.exports = function () {\n        function shim(props, propName, componentName, location, propFullName, secret) {\n          if (secret === ReactPropTypesSecret) {\n            // It is still safe when called from React.\n            return;\n          }\n\n          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n          err.name = 'Invariant Violation';\n          throw err;\n        }\n\n        ;\n        shim.isRequired = shim;\n\n        function getShim() {\n          return shim;\n        }\n\n        ; // Important!\n        // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n        var ReactPropTypes = {\n          array: shim,\n          bool: shim,\n          func: shim,\n          number: shim,\n          object: shim,\n          string: shim,\n          symbol: shim,\n          any: shim,\n          arrayOf: getShim,\n          element: shim,\n          instanceOf: getShim,\n          node: shim,\n          objectOf: getShim,\n          oneOf: getShim,\n          oneOfType: getShim,\n          shape: getShim,\n          exact: getShim\n        };\n        ReactPropTypes.checkPropTypes = emptyFunction;\n        ReactPropTypes.PropTypes = ReactPropTypes;\n        return ReactPropTypes;\n      };\n      /***/\n\n    }])\n  );\n});","map":null,"metadata":{},"sourceType":"script"}