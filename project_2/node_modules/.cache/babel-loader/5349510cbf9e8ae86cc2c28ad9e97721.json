{"ast":null,"code":"'use strict'; // ==================================================================================\n// utils.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 0. helper functions\n// ----------------------------------------------------------------------------------\n\nvar os = require('os');\n\nvar fs = require('fs');\n\nvar spawn = require('child_process').spawn;\n\nvar exec = require('child_process').exec;\n\nvar execSync = require('child_process').execSync;\n\nvar _platform = process.platform;\n\nvar _linux = _platform === 'linux';\n\nvar _darwin = _platform === 'darwin';\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd'; // const _sunos = (_platform === 'sunos');\n\n\nvar _cores = 0;\nvar wmic = '';\nvar codepage = '';\nvar execOptsWin = {\n  windowsHide: true,\n  maxBuffer: 1024 * 2000,\n  encoding: 'UTF-8'\n};\n\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\nfunction unique(obj) {\n  var uniques = [];\n  var stringify = {};\n\n  for (var i = 0; i < obj.length; i++) {\n    var keys = Object.keys(obj[i]);\n    keys.sort(function (a, b) {\n      return a - b;\n    });\n    var str = '';\n\n    for (var j = 0; j < keys.length; j++) {\n      str += JSON.stringify(keys[j]);\n      str += JSON.stringify(obj[i][keys[j]]);\n    }\n\n    if (!stringify.hasOwnProperty(str)) {\n      uniques.push(obj[i]);\n      stringify[str] = true;\n    }\n  }\n\n  return uniques;\n}\n\nfunction sortByKey(array, keys) {\n  return array.sort(function (a, b) {\n    var x = '';\n    var y = '';\n    keys.forEach(function (key) {\n      x = x + a[key];\n      y = y + b[key];\n    });\n    return x < y ? -1 : x > y ? 1 : 0;\n  });\n}\n\nfunction cores() {\n  if (_cores === 0) {\n    _cores = os.cpus().length;\n  }\n\n  return _cores;\n}\n\nfunction getValue(lines, property, separator, trimmed) {\n  separator = separator || ':';\n  property = property.toLowerCase();\n  trimmed = trimmed || false;\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].toLowerCase().replace(/\\t/g, '');\n\n    if (trimmed) {\n      line = line.trim();\n    }\n\n    if (line.startsWith(property)) {\n      var parts = lines[i].split(separator);\n\n      if (parts.length >= 2) {\n        parts.shift();\n        return parts.join(separator).trim();\n      } else {\n        return '';\n      }\n    }\n  }\n\n  return '';\n}\n\nfunction decodeEscapeSequence(str, base) {\n  base = base || 16;\n  return str.replace(/\\\\x([0-9A-Fa-f]{2})/g, function () {\n    return String.fromCharCode(parseInt(arguments[1], base));\n  });\n}\n\nfunction parseDateTime(dt) {\n  var result = {\n    date: '',\n    time: ''\n  };\n  var parts = dt.split(' ');\n\n  if (parts[0]) {\n    if (parts[0].indexOf('/') >= 0) {\n      // Dateformat: mm/dd/yyyy\n      var dtparts = parts[0].split('/');\n\n      if (dtparts.length === 3) {\n        result.date = dtparts[2] + '-' + ('0' + dtparts[0]).substr(-2) + '-' + ('0' + dtparts[1]).substr(-2);\n      }\n    }\n\n    if (parts[0].indexOf('.') >= 0) {\n      // Dateformat: dd.mm.yyyy\n      var _dtparts = parts[0].split('.');\n\n      if (_dtparts.length === 3) {\n        result.date = _dtparts[2] + '-' + ('0' + _dtparts[1]).substr(-2) + '-' + ('0' + _dtparts[0]).substr(-2);\n      }\n    }\n\n    if (parts[0].indexOf('-') >= 0) {\n      // Dateformat: yyyy-mm-dd\n      var _dtparts2 = parts[0].split('-');\n\n      if (_dtparts2.length === 3) {\n        result.date = _dtparts2[0] + '-' + ('0' + _dtparts2[1]).substr(-2) + '-' + ('0' + _dtparts2[2]).substr(-2);\n      }\n    }\n  }\n\n  if (parts[1]) {\n    result.time = parts[1];\n  }\n\n  return result;\n}\n\nfunction parseHead(head, rights) {\n  var space = rights > 0;\n  var count = 1;\n  var from = 0;\n  var to = 0;\n  var result = [];\n\n  for (var _i = 0; _i < head.length; _i++) {\n    if (count <= rights) {\n      // if (head[i] === ' ' && !space) {\n      if (/\\s/.test(head[_i]) && !space) {\n        to = _i - 1;\n        result.push({\n          from: from,\n          to: to + 1,\n          cap: head.substring(from, to + 1)\n        });\n        from = to + 2;\n        count++;\n      }\n\n      space = head[_i] === ' ';\n    } else {\n      if (!/\\s/.test(head[_i]) && space) {\n        to = _i - 1;\n\n        if (from < to) {\n          result.push({\n            from: from,\n            to: to,\n            cap: head.substring(from, to)\n          });\n        }\n\n        from = to + 1;\n        count++;\n      }\n\n      space = head[_i] === ' ';\n    }\n  }\n\n  to = 1000;\n  result.push({\n    from: from,\n    to: to,\n    cap: head.substring(from, to)\n  });\n  var len = result.length;\n\n  for (var i = 0; i < len; i++) {\n    if (result[i].cap.replace(/\\s/g, '').length === 0) {\n      if (i + 1 < len) {\n        result[i].to = result[i + 1].to;\n        result[i].cap = result[i].cap + result[i + 1].cap;\n        result.splice(i + 1, 1);\n        len = len - 1;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction findObjectByKey(array, key, value) {\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][key] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction getWmic() {\n  if (os.type() === 'Windows_NT' && !wmic) {\n    if (fs.existsSync(process.env.WINDIR + '\\\\system32\\\\wbem\\\\wmic.exe')) {\n      wmic = process.env.WINDIR + '\\\\system32\\\\wbem\\\\wmic.exe';\n    } else wmic = 'wmic';\n  }\n\n  return wmic;\n}\n\nfunction powerShell(cmd) {\n  return new Promise(function (resolve, reject) {\n    process.nextTick(function () {\n      var result = '';\n      var child = spawn('powershell.exe', ['-NoLogo', '-InputFormat', 'Text', '-NoExit', '-ExecutionPolicy', 'Unrestricted', '-Command', '-'], {\n        stdio: 'pipe'\n      });\n      child.stdout.on('data', function (data) {\n        result = result + data.toString('utf8');\n      });\n      child.stderr.on('data', function (data) {\n        child.kill();\n        reject(data);\n      });\n      child.on('close', function () {\n        child.kill();\n        resolve(result);\n      });\n      child.stdin.write(cmd + '\\n');\n      child.stdin.end();\n    });\n  });\n}\n\nfunction getCodepage() {\n  if (_windows) {\n    if (!codepage) {\n      try {\n        var stdout = execSync('chcp');\n        var lines = stdout.toString().split('\\r\\n');\n        var parts = lines[0].split(':');\n        codepage = parts.length > 1 ? parts[1].replace('.', '') : '';\n      } catch (err) {\n        codepage = '437';\n      }\n    }\n\n    return codepage;\n  }\n\n  if (_linux || _darwin || _freebsd || _openbsd) {\n    if (!codepage) {\n      try {\n        var _stdout = execSync('echo $LANG');\n\n        var _lines = _stdout.toString().split('\\r\\n');\n\n        var _parts = _lines[0].split('.');\n\n        codepage = _parts.length > 1 ? _parts[1].trim : '';\n      } catch (err) {\n        codepage = 'UTF-8';\n      }\n    }\n\n    return codepage;\n  }\n}\n\nfunction execWin(cmd, opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = execOptsWin;\n  }\n\n  var newCmd = 'chcp 65001 > nul && cmd /C ' + cmd + ' && chcp ' + codepage + ' > nul';\n  exec(newCmd, opts, function (error, stdout) {\n    callback(error, stdout);\n  });\n}\n\nfunction nanoSeconds() {\n  var time = process.hrtime();\n\n  if (!Array.isArray(time) || time.length !== 2) {\n    return 0;\n  }\n\n  return +time[0] * 1e9 + +time[1];\n}\n\nfunction countUniqueLines(lines, startingWith) {\n  startingWith = startingWith || '';\n  var uniqueLines = [];\n  lines.forEach(function (line) {\n    if (line.indexOf(startingWith) === 0) {\n      if (uniqueLines.indexOf(line) === -1) {\n        uniqueLines.push(line);\n      }\n    }\n  });\n  return uniqueLines.length;\n}\n\nfunction noop() {}\n\nexports.execOptsWin = execOptsWin;\nexports.getCodepage = getCodepage;\nexports.execWin = execWin;\nexports.isFunction = isFunction;\nexports.unique = unique;\nexports.sortByKey = sortByKey;\nexports.cores = cores;\nexports.getValue = getValue;\nexports.decodeEscapeSequence = decodeEscapeSequence;\nexports.parseDateTime = parseDateTime;\nexports.parseHead = parseHead;\nexports.findObjectByKey = findObjectByKey;\nexports.getWmic = getWmic;\nexports.powerShell = powerShell;\nexports.nanoSeconds = nanoSeconds;\nexports.countUniqueLines = countUniqueLines;\nexports.noop = noop;","map":null,"metadata":{},"sourceType":"script"}