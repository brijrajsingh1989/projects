{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.degToRad = exports.scale = exports.dimensions = undefined;\n\nvar _d3Scale = require('d3-scale');\n/*\n  return the chart dimensions\n*/\n\n\nvar dimensions = exports.dimensions = function dimensions(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === undefined ? {\n    height: 0,\n    width: 0\n  } : _ref$margin;\n  var cx = (width - +margin.width / 2) / 2;\n  var cy = (height - +margin.height / 2) / 2;\n  var radius = Math.min(cx, cy);\n  return {\n    cx: cx,\n    cy: cy,\n    radius: radius\n  };\n};\n/*\n  returns an arc scale based on the arc range\n*/\n\n\nvar scale = exports.scale = function scale(_ref2) {\n  var startAngle = _ref2.startAngle,\n      endAngle = _ref2.endAngle,\n      _ref2$domain = _ref2.domain,\n      domain = _ref2$domain === undefined ? [0, 100] : _ref2$domain;\n  return (0, _d3Scale.scaleLinear)().range([startAngle, endAngle]).domain(domain);\n};\n/*\n  Rad to Deg\n*/\n\n\nvar degToRad = exports.degToRad = function degToRad() {\n  var deg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return deg * (Math.PI / 180);\n};","map":null,"metadata":{},"sourceType":"script"}