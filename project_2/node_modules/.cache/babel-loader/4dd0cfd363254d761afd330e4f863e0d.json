{"ast":null,"code":"var _jsxFileName = \"D:\\\\ELK_6.5_LM\\\\logr\\\\src\\\\components\\\\meter.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, FormGroup, FormControl, ControlLabel, Grid, Row, Col } from 'react-bootstrap';\nimport '../resources/styles/meter.css';\nimport { Animated } from \"react-animated-css\";\nimport ReactSpeedometer from \"react-d3-speedometer\";\nimport Label from './Label.js';\n\nvar Meter = function Meter(props) {\n  return React.createElement(\"div\", {\n    className: \"meter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Label, {\n    text: props.logLevelDescription,\n    color: \"#000\",\n    size: \"14px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  })), React.createElement(Col, {\n    xs: 12,\n    md: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Label, {\n    text: \"Top Appliances\",\n    color: \"#000\",\n    size: \"14px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }))), React.createElement(Row, {\n    className: \"show-grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(ReactSpeedometer, {\n    maxValue: props.totalPackets,\n    value: props.packetsForLogLevel,\n    needleColor: \"purple\",\n    startColor: \"green\",\n    segments: 5,\n    endColor: \"red\",\n    width: 250,\n    height: 160,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), React.createElement(Col, {\n    xs: 12,\n    md: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, props.topApplicances.length > 0 ? props.topApplicances.map(function (value, index) {\n    return React.createElement(Button, {\n      onClick: props.onApplicanceClick,\n      key: index,\n      name: value.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, value.key + ' (' + value.doc_count + \")\");\n  }) : React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"No Appliance\")))));\n};\n\nMeter.propTypes = {\n  logLevelDescription: PropTypes.string,\n  topApplicances: PropTypes.array,\n  totalPackets: PropTypes.number,\n  packetsForLogLevel: PropTypes.number,\n  onApplicanceClick: PropTypes.func,\n  logLevel: PropTypes.number\n};\nexport default Meter;","map":{"version":3,"sources":["D:\\ELK_6.5_LM\\logr\\src\\components\\meter.js"],"names":["React","Component","PropTypes","Button","FormGroup","FormControl","ControlLabel","Grid","Row","Col","Animated","ReactSpeedometer","Label","Meter","props","logLevelDescription","totalPackets","packetsForLogLevel","topApplicances","length","map","value","index","onApplicanceClick","key","doc_count","propTypes","string","array","number","func","logLevel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, FormGroup, FormControl, ControlLabel,Grid,Row,Col } from 'react-bootstrap';\r\nimport '../resources/styles/meter.css';\r\nimport {Animated} from \"react-animated-css\";\r\nimport ReactSpeedometer from \"react-d3-speedometer\";\r\nimport Label from './Label.js';\r\n\r\nconst Meter = (props) => (\r\n    <div className=\"meter\">\r\n      <Grid>\r\n          <Row>\r\n            <Col xs={12} md={4}>\r\n              <Label text={props.logLevelDescription} color={\"#000\"} size={\"14px\"}></Label>\r\n            </Col>\r\n            <Col xs={12} md={8}>\r\n              <Label text={\"Top Appliances\"} color={\"#000\"} size={\"14px\"}></Label>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"show-grid\">\r\n            <Col xs={12} md={4}>\r\n                <ReactSpeedometer\r\n                    maxValue={props.totalPackets}\r\n                    value={props.packetsForLogLevel}\r\n                    needleColor=\"purple\"\r\n                    startColor=\"green\"\r\n                    segments={5}\r\n                    endColor=\"red\"\r\n                    width={250}\r\n                    height={160}\r\n                    />\r\n            </Col>\r\n            <Col xs={12} md={8}>\r\n              {\r\n                (props.topApplicances.length > 0)?(props.topApplicances.map((value,index)=>{\r\n\r\n                  return <Button onClick={props.onApplicanceClick} key={index} name={value.key}>{value.key + ' (' + value.doc_count+\")\"}</Button>\r\n                })):<Button>No Appliance</Button>\r\n\r\n\r\n              }\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n    </div>\r\n);\r\n\r\nMeter.propTypes = {\r\n    logLevelDescription: PropTypes.string,\r\n    topApplicances: PropTypes.array,\r\n    totalPackets: PropTypes.number,\r\n    packetsForLogLevel: PropTypes.number,\r\n    onApplicanceClick: PropTypes.func,\r\n    logLevel : PropTypes.number\r\n};\r\n\r\nexport default Meter;\r\n"]},"metadata":{},"sourceType":"module"}