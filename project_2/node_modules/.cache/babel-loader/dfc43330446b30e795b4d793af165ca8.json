{"ast":null,"code":"'use strict'; // ==================================================================================\n// internet.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 12. Internet\n// ----------------------------------------------------------------------------------\n\nvar exec = require('child_process').exec;\n\nvar util = require('./util');\n\nvar _platform = process.platform;\n\nvar _linux = _platform === 'linux';\n\nvar _darwin = _platform === 'darwin';\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd';\n\nvar _sunos = _platform === 'sunos'; // --------------------------\n// check if external site is available\n\n\nfunction inetChecksite(url, callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = {\n        url: url,\n        ok: false,\n        status: 404,\n        ms: -1\n      };\n\n      if (url) {\n        url = url.toLowerCase();\n        var t = Date.now();\n\n        if (_linux || _freebsd || _openbsd || _darwin || _sunos) {\n          var args = ' -I --connect-timeout 5 -m 5 ' + url + ' 2>/dev/null | head -n 1 | cut -d \" \" -f2';\n          var cmd = 'curl';\n          exec(cmd + args, function (error, stdout) {\n            var statusCode = parseInt(stdout.toString());\n            result.status = statusCode || 404;\n            result.ok = !error && (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n            result.ms = result.ok ? Date.now() - t : -1;\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        }\n\n        if (_windows) {\n          // if this is stable, this can be used for all OS types\n          var http = url.startsWith('https:') ? require('https') : require('http');\n\n          try {\n            http.get(url, function (res) {\n              var statusCode = res.statusCode;\n              result.status = statusCode || 404;\n              result.ok = statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304;\n\n              if (statusCode !== 200) {\n                res.resume();\n                result.ms = result.ok ? Date.now() - t : -1;\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              } else {\n                res.on('data', function () {});\n                res.on('end', function () {\n                  result.ms = result.ok ? Date.now() - t : -1;\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                });\n              }\n            }).on('error', function () {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            });\n          } catch (err) {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        }\n      } else {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.inetChecksite = inetChecksite; // --------------------------\n// check inet latency\n\nfunction inetLatency(host, callback) {\n  // fallback - if only callback is given\n  if (util.isFunction(host) && !callback) {\n    callback = host;\n    host = '';\n  }\n\n  host = host || '8.8.8.8';\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var cmd;\n\n      if (_linux || _freebsd || _openbsd || _darwin) {\n        if (_linux) {\n          cmd = 'ping -c 2 -w 3 ' + host + ' | grep rtt';\n        }\n\n        if (_freebsd || _openbsd) {\n          cmd = 'ping -c 2 -t 3 ' + host + ' | grep round-trip';\n        }\n\n        if (_darwin) {\n          cmd = 'ping -c 2 -t 3 ' + host + ' | grep avg';\n        }\n\n        exec(cmd, function (error, stdout) {\n          var result = -1;\n\n          if (!error) {\n            var line = stdout.toString().split('=');\n\n            if (line.length > 1) {\n              var parts = line[1].split('/');\n\n              if (parts.length > 1) {\n                result = parseFloat(parts[1]);\n              }\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        exec('ping -s -a ' + host + ' 56 2 | grep avg', {\n          timeout: 3000\n        }, function (error, stdout) {\n          var result = -1;\n\n          if (!error) {\n            var line = stdout.toString().split('=');\n\n            if (line.length > 1) {\n              var parts = line[1].split('/');\n\n              if (parts.length > 1) {\n                result = parseFloat(parts[1].replace(',', '.'));\n              }\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        var result = -1;\n\n        try {\n          exec('ping ' + host + ' -n 1', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              var lines = stdout.toString().split('\\r\\n');\n              lines.shift();\n              lines.forEach(function (line) {\n                if (line.toLowerCase().startsWith('    min')) {\n                  var l = line.replace(/ +/g, ' ').split(' ');\n\n                  if (l.length > 8) {\n                    result = parseFloat(l[9]);\n                  }\n                }\n              });\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.inetLatency = inetLatency;","map":null,"metadata":{},"sourceType":"script"}