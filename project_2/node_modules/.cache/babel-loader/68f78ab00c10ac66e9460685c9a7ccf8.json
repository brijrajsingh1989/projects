{"ast":null,"code":"// MIT License:\n//\n// Copyright (c) 2010-2013, Joe Walnes\n//               2013-2018, Drew Noakes\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Smoothie Charts - http://smoothiecharts.org/\n * (c) 2010-2013, Joe Walnes\n *     2013-2018, Drew Noakes\n *\n * v1.0: Main charting library, by Joe Walnes\n * v1.1: Auto scaling of axis, by Neil Dunn\n * v1.2: fps (frames per second) option, by Mathias Petterson\n * v1.3: Fix for divide by zero, by Paul Nikitochkin\n * v1.4: Set minimum, top-scale padding, remove timeseries, add optional timer to reset bounds, by Kelley Reynolds\n * v1.5: Set default frames per second to 50... smoother.\n *       .start(), .stop() methods for conserving CPU, by Dmitry Vyal\n *       options.interpolation = 'bezier' or 'line', by Dmitry Vyal\n *       options.maxValue to fix scale, by Dmitry Vyal\n * v1.6: minValue/maxValue will always get converted to floats, by Przemek Matylla\n * v1.7: options.grid.fillStyle may be a transparent color, by Dmitry A. Shashkin\n *       Smooth rescaling, by Kostas Michalopoulos\n * v1.8: Set max length to customize number of live points in the dataset with options.maxDataSetLength, by Krishna Narni\n * v1.9: Display timestamps along the bottom, by Nick and Stev-io\n *       (https://groups.google.com/forum/?fromgroups#!topic/smoothie-charts/-Ywse8FCpKI%5B1-25%5D)\n *       Refactored by Krishna Narni, to support timestamp formatting function\n * v1.10: Switch to requestAnimationFrame, removed the now obsoleted options.fps, by Gergely Imreh\n * v1.11: options.grid.sharpLines option added, by @drewnoakes\n *        Addressed warning seen in Firefox when seriesOption.fillStyle undefined, by @drewnoakes\n * v1.12: Support for horizontalLines added, by @drewnoakes\n *        Support for yRangeFunction callback added, by @drewnoakes\n * v1.13: Fixed typo (#32), by @alnikitich\n * v1.14: Timer cleared when last TimeSeries removed (#23), by @davidgaleano\n *        Fixed diagonal line on chart at start/end of data stream, by @drewnoakes\n * v1.15: Support for npm package (#18), by @dominictarr\n *        Fixed broken removeTimeSeries function (#24) by @davidgaleano\n *        Minor performance and tidying, by @drewnoakes\n * v1.16: Bug fix introduced in v1.14 relating to timer creation/clearance (#23), by @drewnoakes\n *        TimeSeries.append now deals with out-of-order timestamps, and can merge duplicates, by @zacwitte (#12)\n *        Documentation and some local variable renaming for clarity, by @drewnoakes\n * v1.17: Allow control over font size (#10), by @drewnoakes\n *        Timestamp text won't overlap, by @drewnoakes\n * v1.18: Allow control of max/min label precision, by @drewnoakes\n *        Added 'borderVisible' chart option, by @drewnoakes\n *        Allow drawing series with fill but no stroke (line), by @drewnoakes\n * v1.19: Avoid unnecessary repaints, and fixed flicker in old browsers having multiple charts in document (#40), by @asbai\n * v1.20: Add SmoothieChart.getTimeSeriesOptions and SmoothieChart.bringToFront functions, by @drewnoakes\n * v1.21: Add 'step' interpolation mode, by @drewnoakes\n * v1.22: Add support for different pixel ratios. Also add optional y limit formatters, by @copacetic\n * v1.23: Fix bug introduced in v1.22 (#44), by @drewnoakes\n * v1.24: Fix bug introduced in v1.23, re-adding parseFloat to y-axis formatter defaults, by @siggy_sf\n * v1.25: Fix bug seen when adding a data point to TimeSeries which is older than the current data, by @Nking92\n *        Draw time labels on top of series, by @comolosabia\n *        Add TimeSeries.clear function, by @drewnoakes\n * v1.26: Add support for resizing on high device pixel ratio screens, by @copacetic\n * v1.27: Fix bug introduced in v1.26 for non whole number devicePixelRatio values, by @zmbush\n * v1.28: Add 'minValueScale' option, by @megawac\n *        Fix 'labelPos' for different size of 'minValueString' 'maxValueString', by @henryn\n * v1.29: Support responsive sizing, by @drewnoakes\n * v1.29.1: Include types in package, and make property optional, by @TrentHouliston\n * v1.30: Fix inverted logic in devicePixelRatio support, by @scanlime\n * v1.31: Support tooltips, by @Sly1024 and @drewnoakes\n * v1.32: Support frame rate limit, by @dpuyosa\n * v1.33: Use Date static method instead of instance, by @nnnoel\n *        Fix bug with tooltips when multiple charts on a page, by @jpmbiz70\n * v1.34: Add disabled option to TimeSeries, by @TechGuard (#91)\n *        Add nonRealtimeData option, by @annazhelt (#92, #93)\n *        Add showIntermediateLabels option, by @annazhelt (#94)\n *        Add displayDataFromPercentile option, by @annazhelt (#95)\n *        Fix bug when hiding tooltip element, by @ralphwetzel (#96)\n *        Support intermediate y-axis labels, by @beikeland (#99)\n * v1.35: Fix issue with responsive mode at high DPI, by @drewnoakes (#101)\n */\n;\n\n(function (exports) {\n  // Date.now polyfill\n  Date.now = Date.now || function () {\n    return new Date().getTime();\n  };\n\n  var Util = {\n    extend: function extend() {\n      arguments[0] = arguments[0] || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) {\n            if (typeof arguments[i][key] === 'object') {\n              if (arguments[i][key] instanceof Array) {\n                arguments[0][key] = arguments[i][key];\n              } else {\n                arguments[0][key] = Util.extend(arguments[0][key], arguments[i][key]);\n              }\n            } else {\n              arguments[0][key] = arguments[i][key];\n            }\n          }\n        }\n      }\n\n      return arguments[0];\n    },\n    binarySearch: function binarySearch(data, value) {\n      var low = 0,\n          high = data.length;\n\n      while (low < high) {\n        var mid = low + high >> 1;\n        if (value < data[mid][0]) high = mid;else low = mid + 1;\n      }\n\n      return low;\n    }\n  };\n  /**\n   * Initialises a new <code>TimeSeries</code> with optional data options.\n   *\n   * Options are of the form (defaults shown):\n   *\n   * <pre>\n   * {\n   *   resetBounds: true,        // enables/disables automatic scaling of the y-axis\n   *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis\n   * }\n   * </pre>\n   *\n   * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.\n   *\n   * @constructor\n   */\n\n  function TimeSeries(options) {\n    this.options = Util.extend({}, TimeSeries.defaultOptions, options);\n    this.disabled = false;\n    this.clear();\n  }\n\n  TimeSeries.defaultOptions = {\n    resetBoundsInterval: 3000,\n    resetBounds: true\n  };\n  /**\n   * Clears all data and state from this TimeSeries object.\n   */\n\n  TimeSeries.prototype.clear = function () {\n    this.data = [];\n    this.maxValue = Number.NaN; // The maximum value ever seen in this TimeSeries.\n\n    this.minValue = Number.NaN; // The minimum value ever seen in this TimeSeries.\n  };\n  /**\n   * Recalculate the min/max values for this <code>TimeSeries</code> object.\n   *\n   * This causes the graph to scale itself in the y-axis.\n   */\n\n\n  TimeSeries.prototype.resetBounds = function () {\n    if (this.data.length) {\n      // Walk through all data points, finding the min/max value\n      this.maxValue = this.data[0][1];\n      this.minValue = this.data[0][1];\n\n      for (var i = 1; i < this.data.length; i++) {\n        var value = this.data[i][1];\n\n        if (value > this.maxValue) {\n          this.maxValue = value;\n        }\n\n        if (value < this.minValue) {\n          this.minValue = value;\n        }\n      }\n    } else {\n      // No data exists, so set min/max to NaN\n      this.maxValue = Number.NaN;\n      this.minValue = Number.NaN;\n    }\n  };\n  /**\n   * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.\n   *\n   * @param timestamp the position, in time, of this data point\n   * @param value the value of this data point\n   * @param sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls\n   * whether it is replaced, or the values summed (defaults to false.)\n   */\n\n\n  TimeSeries.prototype.append = function (timestamp, value, sumRepeatedTimeStampValues) {\n    // Rewind until we hit an older timestamp\n    var i = this.data.length - 1;\n\n    while (i >= 0 && this.data[i][0] > timestamp) {\n      i--;\n    }\n\n    if (i === -1) {\n      // This new item is the oldest data\n      this.data.splice(0, 0, [timestamp, value]);\n    } else if (this.data.length > 0 && this.data[i][0] === timestamp) {\n      // Update existing values in the array\n      if (sumRepeatedTimeStampValues) {\n        // Sum this value into the existing 'bucket'\n        this.data[i][1] += value;\n        value = this.data[i][1];\n      } else {\n        // Replace the previous value\n        this.data[i][1] = value;\n      }\n    } else if (i < this.data.length - 1) {\n      // Splice into the correct position to keep timestamps in order\n      this.data.splice(i + 1, 0, [timestamp, value]);\n    } else {\n      // Add to the end of the array\n      this.data.push([timestamp, value]);\n    }\n\n    this.maxValue = isNaN(this.maxValue) ? value : Math.max(this.maxValue, value);\n    this.minValue = isNaN(this.minValue) ? value : Math.min(this.minValue, value);\n  };\n\n  TimeSeries.prototype.dropOldData = function (oldestValidTime, maxDataSetLength) {\n    // We must always keep one expired data point as we need this to draw the\n    // line that comes into the chart from the left, but any points prior to that can be removed.\n    var removeCount = 0;\n\n    while (this.data.length - removeCount >= maxDataSetLength && this.data[removeCount + 1][0] < oldestValidTime) {\n      removeCount++;\n    }\n\n    if (removeCount !== 0) {\n      this.data.splice(0, removeCount);\n    }\n  };\n  /**\n   * Initialises a new <code>SmoothieChart</code>.\n   *\n   * Options are optional, and should be of the form below. Just specify the values you\n   * need and the rest will be given sensible defaults as shown:\n   *\n   * <pre>\n   * {\n   *   minValue: undefined,                      // specify to clamp the lower y-axis to a given value\n   *   maxValue: undefined,                      // specify to clamp the upper y-axis to a given value\n   *   maxValueScale: 1,                         // allows proportional padding to be added above the chart. for 10% padding, specify 1.1.\n   *   minValueScale: 1,                         // allows proportional padding to be added below the chart. for 10% padding, specify 1.1.\n   *   yRangeFunction: undefined,                // function({min: , max: }) { return {min: , max: }; }\n   *   scaleSmoothing: 0.125,                    // controls the rate at which y-value zoom animation occurs\n   *   millisPerPixel: 20,                       // sets the speed at which the chart pans by\n   *   enableDpiScaling: true,                   // support rendering at different DPI depending on the device\n   *   yMinFormatter: function(min, precision) { // callback function that formats the min y value label\n   *     return parseFloat(min).toFixed(precision);\n   *   },\n   *   yMaxFormatter: function(max, precision) { // callback function that formats the max y value label\n   *     return parseFloat(max).toFixed(precision);\n   *   },\n   *   yIntermediateFormatter: function(intermediate, precision) { // callback function that formats the intermediate y value labels\n   *     return parseFloat(intermediate).toFixed(precision);\n   *   },\n   *   maxDataSetLength: 2,\n   *   interpolation: 'bezier'                   // one of 'bezier', 'linear', or 'step'\n   *   timestampFormatter: null,                 // optional function to format time stamps for bottom of chart\n   *                                             // you may use SmoothieChart.timeFormatter, or your own: function(date) { return ''; }\n   *   scrollBackwards: false,                   // reverse the scroll direction of the chart\n   *   horizontalLines: [],                      // [ { value: 0, color: '#ffffff', lineWidth: 1 } ]\n   *   grid:\n   *   {\n   *     fillStyle: '#000000',                   // the background colour of the chart\n   *     lineWidth: 1,                           // the pixel width of grid lines\n   *     strokeStyle: '#777777',                 // colour of grid lines\n   *     millisPerLine: 1000,                    // distance between vertical grid lines\n   *     sharpLines: false,                      // controls whether grid lines are 1px sharp, or softened\n   *     verticalSections: 2,                    // number of vertical sections marked out by horizontal grid lines\n   *     borderVisible: true                     // whether the grid lines trace the border of the chart or not\n   *   },\n   *   labels\n   *   {\n   *     disabled: false,                        // enables/disables labels showing the min/max values\n   *     fillStyle: '#ffffff',                   // colour for text of labels,\n   *     fontSize: 15,\n   *     fontFamily: 'sans-serif',\n   *     precision: 2,\n   *     showIntermediateLabels: false,          // shows intermediate labels between min and max values along y axis\n   *     intermediateLabelSameAxis: true,\n   *   },\n   *   tooltip: false                            // show tooltip when mouse is over the chart\n   *   tooltipLine: {                            // properties for a vertical line at the cursor position\n   *     lineWidth: 1,\n   *     strokeStyle: '#BBBBBB'\n   *   },\n   *   tooltipFormatter: SmoothieChart.tooltipFormatter, // formatter function for tooltip text\n   *   nonRealtimeData: false,                   // use time of latest data as current time\n   *   displayDataFromPercentile: 1,             // display not latest data, but data from the given percentile\n   *                                             // useful when trying to see old data saved by setting a high value for maxDataSetLength\n   *                                             // should be a value between 0 and 1\n   *   responsive: false,                        // whether the chart should adapt to the size of the canvas\n   *   limitFPS: 0                               // maximum frame rate the chart will render at, in FPS (zero means no limit)\n   * }\n   * </pre>\n   *\n   * @constructor\n   */\n\n\n  function SmoothieChart(options) {\n    this.options = Util.extend({}, SmoothieChart.defaultChartOptions, options);\n    this.seriesSet = [];\n    this.currentValueRange = 1;\n    this.currentVisMinValue = 0;\n    this.lastRenderTimeMillis = 0;\n    this.lastChartTimestamp = 0;\n    this.mousemove = this.mousemove.bind(this);\n    this.mouseout = this.mouseout.bind(this);\n  }\n  /** Formats the HTML string content of the tooltip. */\n\n\n  SmoothieChart.tooltipFormatter = function (timestamp, data) {\n    var timestampFormatter = this.options.timestampFormatter || SmoothieChart.timeFormatter,\n        lines = [timestampFormatter(new Date(timestamp))];\n\n    for (var i = 0; i < data.length; ++i) {\n      lines.push('<span style=\"color:' + data[i].series.options.strokeStyle + '\">' + this.options.yMaxFormatter(data[i].value, this.options.labels.precision) + '</span>');\n    }\n\n    return lines.join('<br>');\n  };\n\n  SmoothieChart.defaultChartOptions = {\n    millisPerPixel: 20,\n    enableDpiScaling: true,\n    yMinFormatter: function yMinFormatter(min, precision) {\n      return parseFloat(min).toFixed(precision);\n    },\n    yMaxFormatter: function yMaxFormatter(max, precision) {\n      return parseFloat(max).toFixed(precision);\n    },\n    yIntermediateFormatter: function yIntermediateFormatter(intermediate, precision) {\n      return parseFloat(intermediate).toFixed(precision);\n    },\n    maxValueScale: 1,\n    minValueScale: 1,\n    interpolation: 'bezier',\n    scaleSmoothing: 0.125,\n    maxDataSetLength: 2,\n    scrollBackwards: false,\n    displayDataFromPercentile: 1,\n    grid: {\n      fillStyle: '#000000',\n      strokeStyle: '#777777',\n      lineWidth: 1,\n      sharpLines: false,\n      millisPerLine: 1000,\n      verticalSections: 2,\n      borderVisible: true\n    },\n    labels: {\n      fillStyle: '#ffffff',\n      disabled: false,\n      fontSize: 10,\n      fontFamily: 'monospace',\n      precision: 2,\n      showIntermediateLabels: false,\n      intermediateLabelSameAxis: true\n    },\n    horizontalLines: [],\n    tooltip: false,\n    tooltipLine: {\n      lineWidth: 1,\n      strokeStyle: '#BBBBBB'\n    },\n    tooltipFormatter: SmoothieChart.tooltipFormatter,\n    nonRealtimeData: false,\n    responsive: false,\n    limitFPS: 0\n  }; // Based on http://inspirit.github.com/jsfeat/js/compatibility.js\n\n  SmoothieChart.AnimateCompatibility = function () {\n    var requestAnimationFrame = function requestAnimationFrame(callback, element) {\n      var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        return window.setTimeout(function () {\n          callback(Date.now());\n        }, 16);\n      };\n\n      return requestAnimationFrame.call(window, callback, element);\n    },\n        cancelAnimationFrame = function cancelAnimationFrame(id) {\n      var cancelAnimationFrame = window.cancelAnimationFrame || function (id) {\n        clearTimeout(id);\n      };\n\n      return cancelAnimationFrame.call(window, id);\n    };\n\n    return {\n      requestAnimationFrame: requestAnimationFrame,\n      cancelAnimationFrame: cancelAnimationFrame\n    };\n  }();\n\n  SmoothieChart.defaultSeriesPresentationOptions = {\n    lineWidth: 1,\n    strokeStyle: '#ffffff'\n  };\n  /**\n   * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.\n   *\n   * Presentation options should be of the form (defaults shown):\n   *\n   * <pre>\n   * {\n   *   lineWidth: 1,\n   *   strokeStyle: '#ffffff',\n   *   fillStyle: undefined\n   * }\n   * </pre>\n   */\n\n  SmoothieChart.prototype.addTimeSeries = function (timeSeries, options) {\n    this.seriesSet.push({\n      timeSeries: timeSeries,\n      options: Util.extend({}, SmoothieChart.defaultSeriesPresentationOptions, options)\n    });\n\n    if (timeSeries.options.resetBounds && timeSeries.options.resetBoundsInterval > 0) {\n      timeSeries.resetBoundsTimerId = setInterval(function () {\n        timeSeries.resetBounds();\n      }, timeSeries.options.resetBoundsInterval);\n    }\n  };\n  /**\n   * Removes the specified <code>TimeSeries</code> from the chart.\n   */\n\n\n  SmoothieChart.prototype.removeTimeSeries = function (timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        this.seriesSet.splice(i, 1);\n        break;\n      }\n    } // If a timer was operating for that timeseries, remove it\n\n\n    if (timeSeries.resetBoundsTimerId) {\n      // Stop resetting the bounds, if we were\n      clearInterval(timeSeries.resetBoundsTimerId);\n    }\n  };\n  /**\n   * Gets render options for the specified <code>TimeSeries</code>.\n   *\n   * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,\n   * these settings are stored in the chart.\n   */\n\n\n  SmoothieChart.prototype.getTimeSeriesOptions = function (timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        return this.seriesSet[i].options;\n      }\n    }\n  };\n  /**\n   * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.\n   */\n\n\n  SmoothieChart.prototype.bringToFront = function (timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        var set = this.seriesSet.splice(i, 1);\n        this.seriesSet.push(set[0]);\n        break;\n      }\n    }\n  };\n  /**\n   * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.\n   *\n   * @param canvas the target canvas element\n   * @param delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series\n   * from appearing on screen, with new values flashing into view, at the expense of some latency.\n   */\n\n\n  SmoothieChart.prototype.streamTo = function (canvas, delayMillis) {\n    this.canvas = canvas;\n    this.delay = delayMillis;\n    this.start();\n  };\n\n  SmoothieChart.prototype.getTooltipEl = function () {\n    // Create the tool tip element lazily\n    if (!this.tooltipEl) {\n      this.tooltipEl = document.createElement('div');\n      this.tooltipEl.className = 'smoothie-chart-tooltip';\n      this.tooltipEl.style.position = 'absolute';\n      this.tooltipEl.style.display = 'none';\n      document.body.appendChild(this.tooltipEl);\n    }\n\n    return this.tooltipEl;\n  };\n\n  SmoothieChart.prototype.updateTooltip = function () {\n    var el = this.getTooltipEl();\n\n    if (!this.mouseover || !this.options.tooltip) {\n      el.style.display = 'none';\n      return;\n    }\n\n    var time = this.lastChartTimestamp; // x pixel to time\n\n    var t = this.options.scrollBackwards ? time - this.mouseX * this.options.millisPerPixel : time - (this.canvas.offsetWidth - this.mouseX) * this.options.millisPerPixel;\n    var data = []; // For each data set...\n\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      var timeSeries = this.seriesSet[d].timeSeries;\n\n      if (timeSeries.disabled) {\n        continue;\n      } // find datapoint closest to time 't'\n\n\n      var closeIdx = Util.binarySearch(timeSeries.data, t);\n\n      if (closeIdx > 0 && closeIdx < timeSeries.data.length) {\n        data.push({\n          series: this.seriesSet[d],\n          index: closeIdx,\n          value: timeSeries.data[closeIdx][1]\n        });\n      }\n    }\n\n    if (data.length) {\n      el.innerHTML = this.options.tooltipFormatter.call(this, t, data);\n      el.style.display = 'block';\n    } else {\n      el.style.display = 'none';\n    }\n  };\n\n  SmoothieChart.prototype.mousemove = function (evt) {\n    this.mouseover = true;\n    this.mouseX = evt.offsetX;\n    this.mouseY = evt.offsetY;\n    this.mousePageX = evt.pageX;\n    this.mousePageY = evt.pageY;\n    var el = this.getTooltipEl();\n    el.style.top = Math.round(this.mousePageY) + 'px';\n    el.style.left = Math.round(this.mousePageX) + 'px';\n    this.updateTooltip();\n  };\n\n  SmoothieChart.prototype.mouseout = function () {\n    this.mouseover = false;\n    this.mouseX = this.mouseY = -1;\n    if (this.tooltipEl) this.tooltipEl.style.display = 'none';\n  };\n  /**\n   * Make sure the canvas has the optimal resolution for the device's pixel ratio.\n   */\n\n\n  SmoothieChart.prototype.resize = function () {\n    var dpr = !this.options.enableDpiScaling || !window ? 1 : window.devicePixelRatio,\n        width,\n        height;\n\n    if (this.options.responsive) {\n      // Newer behaviour: Use the canvas's size in the layout, and set the internal\n      // resolution according to that size and the device pixel ratio (eg: high DPI)\n      width = this.canvas.offsetWidth;\n      height = this.canvas.offsetHeight;\n\n      if (width !== this.lastWidth) {\n        this.lastWidth = width;\n        this.canvas.setAttribute('width', Math.floor(width * dpr).toString());\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n\n      if (height !== this.lastHeight) {\n        this.lastHeight = height;\n        this.canvas.setAttribute('height', Math.floor(height * dpr).toString());\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n    } else if (dpr !== 1) {\n      // Older behaviour: use the canvas's inner dimensions and scale the element's size\n      // according to that size and the device pixel ratio (eg: high DPI)\n      width = parseInt(this.canvas.getAttribute('width'));\n      height = parseInt(this.canvas.getAttribute('height'));\n\n      if (!this.originalWidth || Math.floor(this.originalWidth * dpr) !== width) {\n        this.originalWidth = width;\n        this.canvas.setAttribute('width', Math.floor(width * dpr).toString());\n        this.canvas.style.width = width + 'px';\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n\n      if (!this.originalHeight || Math.floor(this.originalHeight * dpr) !== height) {\n        this.originalHeight = height;\n        this.canvas.setAttribute('height', Math.floor(height * dpr).toString());\n        this.canvas.style.height = height + 'px';\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n    }\n  };\n  /**\n   * Starts the animation of this chart.\n   */\n\n\n  SmoothieChart.prototype.start = function () {\n    if (this.frame) {\n      // We're already running, so just return\n      return;\n    }\n\n    this.canvas.addEventListener('mousemove', this.mousemove);\n    this.canvas.addEventListener('mouseout', this.mouseout); // Renders a frame, and queues the next frame for later rendering\n\n    var animate = function () {\n      this.frame = SmoothieChart.AnimateCompatibility.requestAnimationFrame(function () {\n        if (this.options.nonRealtimeData) {\n          var dateZero = new Date(0); // find the data point with the latest timestamp\n\n          var maxTimeStamp = this.seriesSet.reduce(function (max, series) {\n            var dataSet = series.timeSeries.data;\n            var indexToCheck = Math.round(this.options.displayDataFromPercentile * dataSet.length) - 1;\n            indexToCheck = indexToCheck >= 0 ? indexToCheck : 0;\n            indexToCheck = indexToCheck <= dataSet.length - 1 ? indexToCheck : dataSet.length - 1;\n\n            if (dataSet && dataSet.length > 0) {\n              // timestamp corresponds to element 0 of the data point\n              var lastDataTimeStamp = dataSet[indexToCheck][0];\n              max = max > lastDataTimeStamp ? max : lastDataTimeStamp;\n            }\n\n            return max;\n          }.bind(this), dateZero); // use the max timestamp as current time\n\n          this.render(this.canvas, maxTimeStamp > dateZero ? maxTimeStamp : null);\n        } else {\n          this.render();\n        }\n\n        animate();\n      }.bind(this));\n    }.bind(this);\n\n    animate();\n  };\n  /**\n   * Stops the animation of this chart.\n   */\n\n\n  SmoothieChart.prototype.stop = function () {\n    if (this.frame) {\n      SmoothieChart.AnimateCompatibility.cancelAnimationFrame(this.frame);\n      delete this.frame;\n      this.canvas.removeEventListener('mousemove', this.mousemove);\n      this.canvas.removeEventListener('mouseout', this.mouseout);\n    }\n  };\n\n  SmoothieChart.prototype.updateValueRange = function () {\n    // Calculate the current scale of the chart, from all time series.\n    var chartOptions = this.options,\n        chartMaxValue = Number.NaN,\n        chartMinValue = Number.NaN;\n\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      // TODO(ndunn): We could calculate / track these values as they stream in.\n      var timeSeries = this.seriesSet[d].timeSeries;\n\n      if (timeSeries.disabled) {\n        continue;\n      }\n\n      if (!isNaN(timeSeries.maxValue)) {\n        chartMaxValue = !isNaN(chartMaxValue) ? Math.max(chartMaxValue, timeSeries.maxValue) : timeSeries.maxValue;\n      }\n\n      if (!isNaN(timeSeries.minValue)) {\n        chartMinValue = !isNaN(chartMinValue) ? Math.min(chartMinValue, timeSeries.minValue) : timeSeries.minValue;\n      }\n    } // Scale the chartMaxValue to add padding at the top if required\n\n\n    if (chartOptions.maxValue != null) {\n      chartMaxValue = chartOptions.maxValue;\n    } else {\n      chartMaxValue *= chartOptions.maxValueScale;\n    } // Set the minimum if we've specified one\n\n\n    if (chartOptions.minValue != null) {\n      chartMinValue = chartOptions.minValue;\n    } else {\n      chartMinValue -= Math.abs(chartMinValue * chartOptions.minValueScale - chartMinValue);\n    } // If a custom range function is set, call it\n\n\n    if (this.options.yRangeFunction) {\n      var range = this.options.yRangeFunction({\n        min: chartMinValue,\n        max: chartMaxValue\n      });\n      chartMinValue = range.min;\n      chartMaxValue = range.max;\n    }\n\n    if (!isNaN(chartMaxValue) && !isNaN(chartMinValue)) {\n      var targetValueRange = chartMaxValue - chartMinValue;\n      var valueRangeDiff = targetValueRange - this.currentValueRange;\n      var minValueDiff = chartMinValue - this.currentVisMinValue;\n      this.isAnimatingScale = Math.abs(valueRangeDiff) > 0.1 || Math.abs(minValueDiff) > 0.1;\n      this.currentValueRange += chartOptions.scaleSmoothing * valueRangeDiff;\n      this.currentVisMinValue += chartOptions.scaleSmoothing * minValueDiff;\n    }\n\n    this.valueRange = {\n      min: chartMinValue,\n      max: chartMaxValue\n    };\n  };\n\n  SmoothieChart.prototype.render = function (canvas, time) {\n    var nowMillis = Date.now(); // Respect any frame rate limit.\n\n    if (this.options.limitFPS > 0 && nowMillis - this.lastRenderTimeMillis < 1000 / this.options.limitFPS) return;\n\n    if (!this.isAnimatingScale) {\n      // We're not animating. We can use the last render time and the scroll speed to work out whether\n      // we actually need to paint anything yet. If not, we can return immediately.\n      // Render at least every 1/6th of a second. The canvas may be resized, which there is\n      // no reliable way to detect.\n      var maxIdleMillis = Math.min(1000 / 6, this.options.millisPerPixel);\n\n      if (nowMillis - this.lastRenderTimeMillis < maxIdleMillis) {\n        return;\n      }\n    }\n\n    this.resize();\n    this.updateTooltip();\n    this.lastRenderTimeMillis = nowMillis;\n    canvas = canvas || this.canvas;\n    time = time || nowMillis - (this.delay || 0); // Round time down to pixel granularity, so motion appears smoother.\n\n    time -= time % this.options.millisPerPixel;\n    this.lastChartTimestamp = time;\n\n    var context = canvas.getContext('2d'),\n        chartOptions = this.options,\n        dimensions = {\n      top: 0,\n      left: 0,\n      width: canvas.clientWidth,\n      height: canvas.clientHeight\n    },\n        // Calculate the threshold time for the oldest data points.\n    oldestValidTime = time - dimensions.width * chartOptions.millisPerPixel,\n        valueToYPixel = function (value) {\n      var offset = value - this.currentVisMinValue;\n      return this.currentValueRange === 0 ? dimensions.height : dimensions.height - Math.round(offset / this.currentValueRange * dimensions.height);\n    }.bind(this),\n        timeToXPixel = function timeToXPixel(t) {\n      if (chartOptions.scrollBackwards) {\n        return Math.round((time - t) / chartOptions.millisPerPixel);\n      }\n\n      return Math.round(dimensions.width - (time - t) / chartOptions.millisPerPixel);\n    };\n\n    this.updateValueRange();\n    context.font = chartOptions.labels.fontSize + 'px ' + chartOptions.labels.fontFamily; // Save the state of the canvas context, any transformations applied in this method\n    // will get removed from the stack at the end of this method when .restore() is called.\n\n    context.save(); // Move the origin.\n\n    context.translate(dimensions.left, dimensions.top); // Create a clipped rectangle - anything we draw will be constrained to this rectangle.\n    // This prevents the occasional pixels from curves near the edges overrunning and creating\n    // screen cheese (that phrase should need no explanation).\n\n    context.beginPath();\n    context.rect(0, 0, dimensions.width, dimensions.height);\n    context.clip(); // Clear the working area.\n\n    context.save();\n    context.fillStyle = chartOptions.grid.fillStyle;\n    context.clearRect(0, 0, dimensions.width, dimensions.height);\n    context.fillRect(0, 0, dimensions.width, dimensions.height);\n    context.restore(); // Grid lines...\n\n    context.save();\n    context.lineWidth = chartOptions.grid.lineWidth;\n    context.strokeStyle = chartOptions.grid.strokeStyle; // Vertical (time) dividers.\n\n    if (chartOptions.grid.millisPerLine > 0) {\n      context.beginPath();\n\n      for (var t = time - time % chartOptions.grid.millisPerLine; t >= oldestValidTime; t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPixel(t);\n\n        if (chartOptions.grid.sharpLines) {\n          gx -= 0.5;\n        }\n\n        context.moveTo(gx, 0);\n        context.lineTo(gx, dimensions.height);\n      }\n\n      context.stroke();\n      context.closePath();\n    } // Horizontal (value) dividers.\n\n\n    for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\n      var gy = Math.round(v * dimensions.height / chartOptions.grid.verticalSections);\n\n      if (chartOptions.grid.sharpLines) {\n        gy -= 0.5;\n      }\n\n      context.beginPath();\n      context.moveTo(0, gy);\n      context.lineTo(dimensions.width, gy);\n      context.stroke();\n      context.closePath();\n    } // Bounding rectangle.\n\n\n    if (chartOptions.grid.borderVisible) {\n      context.beginPath();\n      context.strokeRect(0, 0, dimensions.width, dimensions.height);\n      context.closePath();\n    }\n\n    context.restore(); // Draw any horizontal lines...\n\n    if (chartOptions.horizontalLines && chartOptions.horizontalLines.length) {\n      for (var hl = 0; hl < chartOptions.horizontalLines.length; hl++) {\n        var line = chartOptions.horizontalLines[hl],\n            hly = Math.round(valueToYPixel(line.value)) - 0.5;\n        context.strokeStyle = line.color || '#ffffff';\n        context.lineWidth = line.lineWidth || 1;\n        context.beginPath();\n        context.moveTo(0, hly);\n        context.lineTo(dimensions.width, hly);\n        context.stroke();\n        context.closePath();\n      }\n    } // For each data set...\n\n\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      context.save();\n      var timeSeries = this.seriesSet[d].timeSeries;\n\n      if (timeSeries.disabled) {\n        continue;\n      }\n\n      var dataSet = timeSeries.data,\n          seriesOptions = this.seriesSet[d].options; // Delete old data that's moved off the left of the chart.\n\n      timeSeries.dropOldData(oldestValidTime, chartOptions.maxDataSetLength); // Set style for this dataSet.\n\n      context.lineWidth = seriesOptions.lineWidth;\n      context.strokeStyle = seriesOptions.strokeStyle; // Draw the line...\n\n      context.beginPath(); // Retain lastX, lastY for calculating the control points of bezier curves.\n\n      var firstX = 0,\n          lastX = 0,\n          lastY = 0;\n\n      for (var i = 0; i < dataSet.length && dataSet.length !== 1; i++) {\n        var x = timeToXPixel(dataSet[i][0]),\n            y = valueToYPixel(dataSet[i][1]);\n\n        if (i === 0) {\n          firstX = x;\n          context.moveTo(x, y);\n        } else {\n          switch (chartOptions.interpolation) {\n            case \"linear\":\n            case \"line\":\n              {\n                context.lineTo(x, y);\n                break;\n              }\n\n            case \"bezier\":\n            default:\n              {\n                // Great explanation of Bezier curves: http://en.wikipedia.org/wiki/Bezier_curve#Quadratic_curves\n                //\n                // Assuming A was the last point in the line plotted and B is the new point,\n                // we draw a curve with control points P and Q as below.\n                //\n                // A---P\n                //     |\n                //     |\n                //     |\n                //     Q---B\n                //\n                // Importantly, A and P are at the same y coordinate, as are B and Q. This is\n                // so adjacent curves appear to flow as one.\n                //\n                context.bezierCurveTo( // startPoint (A) is implicit from last iteration of loop\n                Math.round((lastX + x) / 2), lastY, // controlPoint1 (P)\n                Math.round(lastX + x) / 2, y, // controlPoint2 (Q)\n                x, y); // endPoint (B)\n\n                break;\n              }\n\n            case \"step\":\n              {\n                context.lineTo(x, lastY);\n                context.lineTo(x, y);\n                break;\n              }\n          }\n        }\n\n        lastX = x;\n        lastY = y;\n      }\n\n      if (dataSet.length > 1) {\n        if (seriesOptions.fillStyle) {\n          // Close up the fill region.\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, lastY);\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, dimensions.height + seriesOptions.lineWidth + 1);\n          context.lineTo(firstX, dimensions.height + seriesOptions.lineWidth);\n          context.fillStyle = seriesOptions.fillStyle;\n          context.fill();\n        }\n\n        if (seriesOptions.strokeStyle && seriesOptions.strokeStyle !== 'none') {\n          context.stroke();\n        }\n\n        context.closePath();\n      }\n\n      context.restore();\n    }\n\n    if (chartOptions.tooltip && this.mouseX >= 0) {\n      // Draw vertical bar to show tooltip position\n      context.lineWidth = chartOptions.tooltipLine.lineWidth;\n      context.strokeStyle = chartOptions.tooltipLine.strokeStyle;\n      context.beginPath();\n      context.moveTo(this.mouseX, 0);\n      context.lineTo(this.mouseX, dimensions.height);\n      context.closePath();\n      context.stroke();\n      this.updateTooltip();\n    } // Draw the axis values on the chart.\n\n\n    if (!chartOptions.labels.disabled && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)) {\n      var maxValueString = chartOptions.yMaxFormatter(this.valueRange.max, chartOptions.labels.precision),\n          minValueString = chartOptions.yMinFormatter(this.valueRange.min, chartOptions.labels.precision),\n          maxLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(maxValueString).width - 2,\n          minLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(minValueString).width - 2;\n      context.fillStyle = chartOptions.labels.fillStyle;\n      context.fillText(maxValueString, maxLabelPos, chartOptions.labels.fontSize);\n      context.fillText(minValueString, minLabelPos, dimensions.height - 2);\n    } // Display intermediate y axis labels along y-axis to the left of the chart\n\n\n    if (chartOptions.labels.showIntermediateLabels && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max) && chartOptions.grid.verticalSections > 0) {\n      // show a label above every vertical section divider\n      var step = (this.valueRange.max - this.valueRange.min) / chartOptions.grid.verticalSections;\n      var stepPixels = dimensions.height / chartOptions.grid.verticalSections;\n\n      for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\n        var gy = dimensions.height - Math.round(v * stepPixels);\n\n        if (chartOptions.grid.sharpLines) {\n          gy -= 0.5;\n        }\n\n        var yValue = chartOptions.yIntermediateFormatter(this.valueRange.min + v * step, chartOptions.labels.precision); //left of right axis?\n\n        intermediateLabelPos = chartOptions.labels.intermediateLabelSameAxis ? chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(yValue).width - 2 : chartOptions.scrollBackwards ? dimensions.width - context.measureText(yValue).width - 2 : 0;\n        context.fillText(yValue, intermediateLabelPos, gy - chartOptions.grid.lineWidth);\n      }\n    } // Display timestamps along x-axis at the bottom of the chart.\n\n\n    if (chartOptions.timestampFormatter && chartOptions.grid.millisPerLine > 0) {\n      var textUntilX = chartOptions.scrollBackwards ? context.measureText(minValueString).width : dimensions.width - context.measureText(minValueString).width + 4;\n\n      for (var t = time - time % chartOptions.grid.millisPerLine; t >= oldestValidTime; t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPixel(t); // Only draw the timestamp if it won't overlap with the previously drawn one.\n\n        if (!chartOptions.scrollBackwards && gx < textUntilX || chartOptions.scrollBackwards && gx > textUntilX) {\n          // Formats the timestamp based on user specified formatting function\n          // SmoothieChart.timeFormatter function above is one such formatting option\n          var tx = new Date(t),\n              ts = chartOptions.timestampFormatter(tx),\n              tsWidth = context.measureText(ts).width;\n          textUntilX = chartOptions.scrollBackwards ? gx + tsWidth + 2 : gx - tsWidth - 2;\n          context.fillStyle = chartOptions.labels.fillStyle;\n\n          if (chartOptions.scrollBackwards) {\n            context.fillText(ts, gx, dimensions.height - 2);\n          } else {\n            context.fillText(ts, gx - tsWidth, dimensions.height - 2);\n          }\n        }\n      }\n    }\n\n    context.restore(); // See .save() above.\n  }; // Sample timestamp formatting function\n\n\n  SmoothieChart.timeFormatter = function (date) {\n    function pad2(number) {\n      return (number < 10 ? '0' : '') + number;\n    }\n\n    return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\n  };\n\n  exports.TimeSeries = TimeSeries;\n  exports.SmoothieChart = SmoothieChart;\n})(typeof exports === 'undefined' ? this : exports);","map":null,"metadata":{},"sourceType":"script"}