{"ast":null,"code":"'use strict'; // ==================================================================================\n// users.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 11. Users/Sessions\n// ----------------------------------------------------------------------------------\n\nvar exec = require('child_process').exec;\n\nvar util = require('./util');\n\nvar _platform = process.platform;\n\nvar _linux = _platform === 'linux';\n\nvar _darwin = _platform === 'darwin';\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd';\n\nvar _sunos = _platform === 'sunos'; // --------------------------\n// array of users online = sessions\n\n\nfunction parseUsersLinux(lines, phase) {\n  var result = [];\n  var result_who = [];\n  var result_w = {};\n  var w_first = true;\n  var w_header = [];\n  var w_pos = [];\n  var who_line = {};\n  var is_whopart = true;\n  lines.forEach(function (line) {\n    if (line === '---') {\n      is_whopart = false;\n    } else {\n      var l = line.replace(/ +/g, ' ').split(' '); // who part\n\n      if (is_whopart) {\n        result_who.push({\n          user: l[0],\n          tty: l[1],\n          date: l[2],\n          time: l[3],\n          ip: l && l.length > 4 ? l[4].replace(/\\(/g, '').replace(/\\)/g, '') : ''\n        });\n      } else {\n        // w part\n        if (w_first) {\n          // header\n          w_header = l;\n          w_header.forEach(function (item) {\n            w_pos.push(line.indexOf(item));\n          });\n          w_first = false;\n        } else {\n          // split by w_pos\n          result_w.user = line.substring(w_pos[0], w_pos[1] - 1).trim();\n          result_w.tty = line.substring(w_pos[1], w_pos[2] - 1).trim();\n          result_w.ip = line.substring(w_pos[2], w_pos[3] - 1).replace(/\\(/g, '').replace(/\\)/g, '').trim();\n          result_w.command = line.substring(w_pos[7], 1000).trim(); // find corresponding 'who' line\n\n          who_line = result_who.filter(function (obj) {\n            return obj.user.substring(0, 8).trim() === result_w.user && obj.tty === result_w.tty;\n          });\n\n          if (who_line.length === 1) {\n            result.push({\n              user: who_line[0].user,\n              tty: who_line[0].tty,\n              date: who_line[0].date,\n              time: who_line[0].time,\n              ip: who_line[0].ip,\n              command: result_w.command\n            });\n          }\n        }\n      }\n    }\n  });\n\n  if (result.length === 0 && phase === 2) {\n    return result_who;\n  } else {\n    return result;\n  }\n}\n\nfunction parseUsersDarwin(lines) {\n  var result = [];\n  var result_who = [];\n  var result_w = {};\n  var who_line = {};\n  var is_whopart = true;\n  lines.forEach(function (line) {\n    if (line === '---') {\n      is_whopart = false;\n    } else {\n      var l = line.replace(/ +/g, ' ').split(' '); // who part\n\n      if (is_whopart) {\n        result_who.push({\n          user: l[0],\n          tty: l[1],\n          date: '' + new Date().getFullYear() + '-' + ('0' + ('JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'.indexOf(l[2].toUpperCase()) / 3 + 1)).slice(-2) + '-' + ('0' + l[3]).slice(-2),\n          time: l[4]\n        });\n      } else {\n        // w part\n        // split by w_pos\n        result_w.user = l[0];\n        result_w.tty = l[1];\n        result_w.ip = l[2] !== '-' ? l[2] : '';\n        result_w.command = l.slice(5, 1000).join(' '); // find corresponding 'who' line\n\n        who_line = result_who.filter(function (obj) {\n          return obj.user === result_w.user && (obj.tty.substring(3, 1000) === result_w.tty || obj.tty === result_w.tty);\n        });\n\n        if (who_line.length === 1) {\n          result.push({\n            user: who_line[0].user,\n            tty: who_line[0].tty,\n            date: who_line[0].date,\n            time: who_line[0].time,\n            ip: result_w.ip,\n            command: result_w.command\n          });\n        }\n      }\n    }\n  });\n  return result;\n}\n\nfunction parseUsersWin(lines) {\n  var result = [];\n  var header = lines[0];\n  var headerDelimiter = [];\n\n  if (header) {\n    var start = header[0] === ' ' ? 1 : 0;\n    headerDelimiter.push(start - 1);\n    var nextSpace = 0;\n\n    for (var i = start + 1; i < header.length; i++) {\n      if (header[i] === ' ' && header[i - 1] === ' ') {\n        nextSpace = i;\n      } else {\n        if (nextSpace) {\n          headerDelimiter.push(nextSpace);\n          nextSpace = 0;\n        }\n      }\n    }\n  }\n\n  for (var _i = 1; _i < lines.length; _i++) {\n    if (lines[_i].trim()) {\n      var user = lines[_i].substring(headerDelimiter[0] + 1, headerDelimiter[1]).trim() || '';\n      var tty = lines[_i].substring(headerDelimiter[1] + 1, headerDelimiter[2] - 2).trim() || '';\n      var dateTime = util.parseDateTime(lines[_i].substring(headerDelimiter[5] + 1, 2000).trim()) || '';\n      result.push({\n        user: user,\n        tty: tty,\n        date: dateTime.date,\n        time: dateTime.time,\n        ip: '',\n        command: ''\n      });\n    }\n  }\n\n  return result;\n}\n\nfunction users(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var result = []; // linux\n\n      if (_linux) {\n        exec('who --ips; echo \"---\"; w | tail -n +2', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            var lines = stdout.toString().split('\\n');\n            result = parseUsersLinux(lines, 1);\n\n            if (result.length === 0) {\n              exec('who; echo \"---\"; w | tail -n +2', function (error, stdout) {\n                if (!error) {\n                  // lines / split\n                  lines = stdout.toString().split('\\n');\n                  result = parseUsersLinux(lines, 2);\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          } else {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        });\n      }\n\n      if (_freebsd || _openbsd) {\n        exec('who; echo \"---\"; w -ih', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            var lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        exec('who; echo \"---\"; w -h', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            var lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('who; echo \"---\"; w -ih', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            var lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        try {\n          exec('query user', util.execOptsWin, function (error, stdout) {\n            if (stdout) {\n              // lines / split\n              var lines = stdout.toString().split('\\r\\n');\n              result = parseUsersWin(lines);\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.users = users;","map":null,"metadata":{},"sourceType":"script"}