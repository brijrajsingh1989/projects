{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBackAndForth = exports.getWaveValueMovement = exports.sine = exports.getWave = exports.getWaveScaleLimit = exports.getWaveArea = exports.getScales = exports.getInnerShape = exports.getOuterShape = exports.getDimensions = undefined;\n\nvar _d3Shape = require('d3-shape');\n\nvar _d3Scale = require('d3-scale');\n\nvar _constants = require('./constants');\n\nvar getDimensions = exports.getDimensions = function getDimensions(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      innerBound = _ref.innerBound,\n      liquidMargin = _ref.liquidMargin,\n      _ref$chartMargin = _ref.chartMargin,\n      chartMargin = _ref$chartMargin === undefined ? 0 : _ref$chartMargin;\n  var cx = (width - chartMargin / 2) / 2;\n  var cy = (height - chartMargin / 2) / 2;\n  var radius = Math.min(cx, cy);\n  var inner = radius * (innerBound - liquidMargin);\n  return {\n    cx: cx,\n    cy: cy,\n    radius: radius,\n    inner: inner\n  };\n};\n\nvar getOuterShape = exports.getOuterShape = function getOuterShape(_ref2) {\n  var outerBound = _ref2.outerBound,\n      innerBound = _ref2.innerBound,\n      radius = _ref2.radius;\n  return (0, _d3Shape.arc)().innerRadius(innerBound * radius).outerRadius(outerBound * radius).startAngle(0).endAngle(Math.PI * 2);\n};\n\nvar getInnerShape = exports.getInnerShape = function getInnerShape(_ref3) {\n  var innerBound = _ref3.innerBound,\n      radius = _ref3.radius,\n      liquidMargin = _ref3.liquidMargin;\n  return (0, _d3Shape.arc)().innerRadius(0).outerRadius((innerBound - liquidMargin) * radius).startAngle(0).endAngle(Math.PI * 2);\n};\n\nvar getScales = exports.getScales = function getScales(props) {\n  var _getDimensions = getDimensions(props),\n      radius = _getDimensions.radius;\n\n  var r = radius * (props.innerBound - props.liquidMargin);\n  var xR = radius * props.outerBound;\n  var rx = radius * props.outerBound;\n  var x = (0, _d3Scale.scaleLinear)().range([-xR, xR]).domain([0, _constants.SAMPLING]);\n  var y = (0, _d3Scale.scaleLinear)().range([r, -r]).domain([0, 100]);\n  return {\n    x: x,\n    y: y,\n    r: r\n  };\n};\n\nvar getWaveArea = exports.getWaveArea = function getWaveArea(props) {\n  var _getScales = getScales(props),\n      x = _getScales.x,\n      y = _getScales.y,\n      r = _getScales.r;\n\n  var waveArea = (0, _d3Shape.area)().x(function (d, i) {\n    return x(i);\n  }).y1(function (d) {\n    return r;\n  });\n  return {\n    waveArea: waveArea,\n    x: x,\n    y: y\n  };\n};\n\nvar getWaveScaleLimit = exports.getWaveScaleLimit = function getWaveScaleLimit(_ref4) {\n  var waveScaleLimit = _ref4.waveScaleLimit,\n      amplitude = _ref4.amplitude;\n\n  if (waveScaleLimit) {\n    return (0, _d3Scale.scaleLinear)().range([0, amplitude, 0]).domain([0, 50, 100]);\n  }\n\n  return (0, _d3Scale.scaleLinear)().range([amplitude, amplitude]).domain([0, 100]);\n};\n\nvar getWave = exports.getWave = function getWave(props) {\n  var _getScales2 = getScales(props),\n      x = _getScales2.x,\n      y = _getScales2.y,\n      r = _getScales2.r;\n\n  var sine = function sine(a, i, f) {\n    return a * Math.sin(Math.PI * 2 / _constants.SAMPLING * i * f);\n  };\n\n  var waveScale = getWaveScaleLimit(props);\n  return (0, _d3Shape.area)().x(function (d, i) {\n    return x(i);\n  }).y0(function (d, i) {\n    return y(sine(waveScale(props.value), i, 4) + props.value);\n  }).y1(function (d) {\n    return r;\n  });\n};\n\nvar sine = exports.sine = function sine(a, i, f, s) {\n  return a * Math.sin(Math.PI * 2 / _constants.SAMPLING * i * f + s);\n};\n\nvar getWaveValueMovement = exports.getWaveValueMovement = function getWaveValueMovement(node) {\n  var isForth = node.M === 1;\n  var amplitudeTo = isForth ? -1 : 1;\n  var currAmplitude = node.A || -1;\n  var currFreq = node.F || 0;\n  var amplitudeScale = (0, _d3Scale.scaleLinear)().range([currAmplitude, 0, 1]).domain([0, 0.5, 1]);\n  var frequencyScale = (0, _d3Scale.scaleLinear)().range([currFreq, 0]).domain([0, 1]);\n  return {\n    amplitudeScale: amplitudeScale,\n    frequencyScale: frequencyScale\n  };\n};\n\nvar getBackAndForth = exports.getBackAndForth = function getBackAndForth() {\n  var forthFrequency = (0, _d3Scale.scaleLinear)().range([0, Math.PI]).domain([0, 1]);\n  var backFrequency = (0, _d3Scale.scaleLinear)().range([Math.PI, 0]).domain([0, 1]);\n  var forthAmplitude = (0, _d3Scale.scaleLinear)().range([1, -1]).domain([0, 1]);\n  var backAmplitude = (0, _d3Scale.scaleLinear)().range([-1, 1]).domain([0, 1]);\n  return {\n    forthFrequency: forthFrequency,\n    backFrequency: backFrequency,\n    forthAmplitude: forthAmplitude,\n    backAmplitude: backAmplitude\n  };\n};","map":null,"metadata":{},"sourceType":"script"}