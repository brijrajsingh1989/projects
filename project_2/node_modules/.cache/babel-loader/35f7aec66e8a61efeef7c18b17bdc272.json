{"ast":null,"code":"'use strict'; // ==================================================================================\n// index.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2018\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// Contributors:  Guillaume Legrain (https://github.com/glegrain)\n//                Riccardo Novaglia (https://github.com/richy24)\n//                Quentin Busuttil (https://github.com/Buzut)\n//                Lapsio (https://github.com/lapsio)\n//                csy (https://github.com/csy1983)\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// ----------------------------------------------------------------------------------\n// Dependencies\n// ----------------------------------------------------------------------------------\n\nvar lib_version = require('../package.json').version;\n\nvar util = require('./util');\n\nvar system = require('./system');\n\nvar osInfo = require('./osinfo');\n\nvar cpu = require('./cpu');\n\nvar memory = require('./memory');\n\nvar battery = require('./battery');\n\nvar graphics = require('./graphics');\n\nvar filesystem = require('./filesystem');\n\nvar network = require('./network');\n\nvar processes = require('./processes');\n\nvar users = require('./users');\n\nvar internet = require('./internet');\n\nvar docker = require('./docker');\n\nvar _platform = process.platform;\n\nvar _windows = _platform === 'win32';\n\nvar _freebsd = _platform === 'freebsd';\n\nvar _openbsd = _platform === 'openbsd';\n\nvar _sunos = _platform === 'sunos'; // ----------------------------------------------------------------------------------\n// init\n// ----------------------------------------------------------------------------------\n\n\nif (_windows) {\n  util.getCodepage();\n} // ----------------------------------------------------------------------------------\n// General\n// ----------------------------------------------------------------------------------\n\n\nfunction version() {\n  return lib_version;\n} // ----------------------------------------------------------------------------------\n// Get static and dynamic data (all)\n// ----------------------------------------------------------------------------------\n// --------------------------\n// get static data - they should not change until restarted\n\n\nfunction getStaticData(callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var data = {};\n      data.version = version();\n      Promise.all([system.system(), system.bios(), system.baseboard(), osInfo.osInfo(), osInfo.uuid(), osInfo.versions(), cpu.cpu(), cpu.cpuFlags(), graphics.graphics(), network.networkInterfaces(), memory.memLayout(), filesystem.diskLayout()]).then(function (res) {\n        data.system = res[0];\n        data.bios = res[1];\n        data.baseboard = res[2];\n        data.os = res[3];\n        data.uuid = res[4];\n        data.versions = res[5];\n        data.cpu = res[6];\n        data.cpu.flags = res[7];\n        data.graphics = res[8];\n        data.net = res[9];\n        data.memLayout = res[10];\n        data.diskLayout = res[11];\n\n        if (callback) {\n          callback(data);\n        }\n\n        resolve(data);\n      });\n    });\n  });\n} // --------------------------\n// get all dynamic data - e.g. for monitoring agents\n// may take some seconds to get all data\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\n\nfunction getDynamicData(srv, iface, callback) {\n  if (util.isFunction(iface)) {\n    callback = iface;\n    iface = '';\n  }\n\n  if (util.isFunction(srv)) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      iface = iface || network.getDefaultNetworkInterface();\n      srv = srv || ''; // use closure to track Æ’ completion\n\n      var functionProcessed = function () {\n        var totalFunctions = 14;\n        if (_windows) totalFunctions = 10;\n        if (_freebsd || _openbsd) totalFunctions = 11;\n        if (_sunos) totalFunctions = 6;\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(data);\n            }\n\n            resolve(data);\n          }\n        };\n      }(); // var totalFunctions = 14;\n      // function functionProcessed() {\n      //   if (--totalFunctions === 0) {\n      //     if (callback) { callback(data) }\n      //     resolve(data);\n      //   }\n      // }\n\n\n      var data = {}; // get time\n\n      data.time = osInfo.time();\n      /**\n       * @namespace\n       * @property {Object}  versions\n       * @property {string}  versions.node\n       * @property {string}  versions.v8\n       */\n\n      data.node = process.versions.node;\n      data.v8 = process.versions.v8;\n      cpu.cpuCurrentspeed().then(function (res) {\n        data.cpuCurrentspeed = res;\n        functionProcessed();\n      });\n      users.users().then(function (res) {\n        data.users = res;\n        functionProcessed();\n      });\n\n      if (!_windows) {\n        processes.processes().then(function (res) {\n          data.processes = res;\n          functionProcessed();\n        });\n      }\n\n      cpu.currentLoad().then(function (res) {\n        data.currentLoad = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        cpu.cpuTemperature().then(function (res) {\n          data.temp = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_sunos) {\n        network.networkStats(iface).then(function (res) {\n          data.networkStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        network.networkConnections().then(function (res) {\n          data.networkConnections = res;\n          functionProcessed();\n        });\n      }\n\n      memory.mem().then(function (res) {\n        data.mem = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        battery().then(function (res) {\n          data.battery = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_sunos) {\n        processes.services(srv).then(function (res) {\n          data.services = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        filesystem.fsSize().then(function (res) {\n          data.fsSize = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_sunos) {\n        filesystem.fsStats().then(function (res) {\n          data.fsStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_sunos) {\n        filesystem.disksIO().then(function (res) {\n          data.disksIO = res;\n          functionProcessed();\n        });\n      }\n\n      internet.inetLatency().then(function (res) {\n        data.inetLatency = res;\n        functionProcessed();\n      });\n    });\n  });\n} // --------------------------\n// get all data at once\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\n\nfunction getAllData(srv, iface, callback) {\n  return new Promise(function (resolve) {\n    process.nextTick(function () {\n      var data = {};\n\n      if (iface && util.isFunction(iface) && !callback) {\n        callback = iface;\n        iface = '';\n      }\n\n      if (srv && util.isFunction(srv) && !iface && !callback) {\n        callback = srv;\n        srv = '';\n        iface = '';\n      }\n\n      getStaticData().then(function (res) {\n        data = res;\n        getDynamicData(srv, iface).then(function (res) {\n          for (var key in res) {\n            if (res.hasOwnProperty(key)) {\n              data[key] = res[key];\n            }\n          }\n\n          if (callback) {\n            callback(data);\n          }\n\n          resolve(data);\n        });\n      });\n    });\n  });\n} // ----------------------------------------------------------------------------------\n// export all libs\n// ----------------------------------------------------------------------------------\n\n\nexports.version = version;\nexports.system = system.system;\nexports.bios = system.bios;\nexports.baseboard = system.baseboard;\nexports.time = osInfo.time;\nexports.osInfo = osInfo.osInfo;\nexports.versions = osInfo.versions;\nexports.shell = osInfo.shell;\nexports.uuid = osInfo.uuid;\nexports.cpu = cpu.cpu;\nexports.cpuFlags = cpu.cpuFlags;\nexports.cpuCache = cpu.cpuCache;\nexports.cpuCurrentspeed = cpu.cpuCurrentspeed;\nexports.cpuTemperature = cpu.cpuTemperature;\nexports.currentLoad = cpu.currentLoad;\nexports.fullLoad = cpu.fullLoad;\nexports.mem = memory.mem;\nexports.memLayout = memory.memLayout;\nexports.battery = battery;\nexports.graphics = graphics.graphics;\nexports.fsSize = filesystem.fsSize;\nexports.blockDevices = filesystem.blockDevices;\nexports.fsStats = filesystem.fsStats;\nexports.disksIO = filesystem.disksIO;\nexports.diskLayout = filesystem.diskLayout;\nexports.networkInterfaceDefault = network.networkInterfaceDefault;\nexports.networkInterfaces = network.networkInterfaces;\nexports.networkStats = network.networkStats;\nexports.networkConnections = network.networkConnections;\nexports.services = processes.services;\nexports.processes = processes.processes;\nexports.processLoad = processes.processLoad;\nexports.users = users.users;\nexports.inetChecksite = internet.inetChecksite;\nexports.inetLatency = internet.inetLatency;\nexports.dockerContainers = docker.dockerContainers;\nexports.dockerContainerStats = docker.dockerContainerStats;\nexports.dockerContainerProcesses = docker.dockerContainerProcesses;\nexports.dockerAll = docker.dockerAll;\nexports.getStaticData = getStaticData;\nexports.getDynamicData = getDynamicData;\nexports.getAllData = getAllData;","map":null,"metadata":{},"sourceType":"script"}