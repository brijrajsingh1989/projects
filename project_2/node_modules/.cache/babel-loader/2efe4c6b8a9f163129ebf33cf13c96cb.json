{"ast":null,"code":"import _default from 'antd/lib/checkbox';\nimport _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _debounce from 'lodash/debounce';\nimport React from 'react';\nimport PureRenderMixin from 'rc-util/lib/PureRenderMixin';\nimport { List } from 'react-virtualized';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Item from './item';\nimport Search from './search';\nimport prefixCls from './constants';\n\nfunction noop() {}\n\nfunction isRenderResultPlainObject(result) {\n  return result && !React.isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]';\n}\n\nvar SelectList = function (_React$Component) {\n  _inherits(SelectList, _React$Component);\n\n  function SelectList(props) {\n    _classCallCheck(this, SelectList);\n\n    var _this = _possibleConstructorReturn(this, (SelectList.__proto__ || _Object$getPrototypeOf(SelectList)).call(this, props));\n\n    _this.state = {\n      filter: '',\n      dataSource: []\n    };\n    _this.renderItem = _this.renderItem.bind(_this);\n    _this.rowRenderer = _this.rowRenderer.bind(_this);\n    _this.handleSelect = _this.handleSelect.bind(_this);\n    _this.handleSelectAll = _this.handleSelectAll.bind(_this);\n    _this.handleFilterWapper = _this.handleFilterWapper.bind(_this);\n    _this.handleFilterWithDebounce = _debounce(_this.handleFilter.bind(_this), 200);\n    _this.handleFilter = _this.handleFilter.bind(_this);\n    _this.handleClear = _this.handleClear.bind(_this);\n    _this.matchFilter = _this.matchFilter.bind(_this);\n    return _this;\n  }\n\n  _createClass(SelectList, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.setState({\n        dataSource: this.props.dataSource\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.dataSource !== this.props.dataSource) {\n        if (this.state.filter !== '') {\n          this.handleFilter(nextProps.dataSource, this.state.filter);\n        } else {\n          this.setState({\n            dataSource: nextProps.dataSource\n          });\n        }\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (PureRenderMixin.shouldComponentUpdate.apply(this, nextProps, nextState)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      /**\n       * Sometimes there will be called redundant, but call forceUpdateGrid there every time is\n       * the easyest way to ensure right update\n       */\n      this.list.forceUpdateGrid();\n    }\n  }, {\n    key: 'getCheckStatus',\n    value: function getCheckStatus() {\n      var selectedKeys = this.props.selectedKeys;\n      var dataSource = this.state.dataSource;\n\n      if (selectedKeys.length === 0) {\n        return 'none';\n      } else if (dataSource.every(function (item) {\n        return item.disabled || selectedKeys.indexOf(item.key) >= 0;\n      })) {\n        return 'all';\n      }\n\n      return 'part';\n    }\n  }, {\n    key: 'handleSelect',\n    value: function handleSelect(selectedItem) {\n      var selectedKeys = this.props.selectedKeys;\n      var hoder = [].concat(_toConsumableArray(selectedKeys));\n      var index = hoder.indexOf(selectedItem.key);\n\n      if (index > -1) {\n        hoder.splice(index, 1);\n      } else {\n        hoder.push(selectedItem.key);\n      }\n\n      this.props.handleSelect(hoder);\n    }\n  }, {\n    key: 'handleSelectAll',\n    value: function handleSelectAll(checkAll) {\n      var dataSource = this.state.dataSource;\n      var selectedKeys = this.props.selectedKeys;\n      var hoder = [].concat(_toConsumableArray(selectedKeys));\n      var index = void 0;\n\n      if (!checkAll) {\n        dataSource.map(function (item) {\n          if (!item.disabled && hoder.indexOf(item.key) < 0) {\n            hoder.push(item.key);\n          }\n\n          return item;\n        });\n      } else {\n        dataSource.map(function (item) {\n          index = hoder.indexOf(item.key);\n\n          if (index > -1) {\n            hoder.splice(index, 1);\n          }\n\n          return item;\n        });\n      }\n\n      this.props.handleSelect(hoder);\n    }\n  }, {\n    key: 'handleFilterWapper',\n    value: function handleFilterWapper(e) {\n      this.handleFilterWithDebounce(this.props.dataSource, e.target.value);\n      this.setState({\n        filter: e.target.value\n      });\n    }\n  }, {\n    key: 'matchFilter',\n    value: function matchFilter(filter, item) {\n      if (this.props.filterOption) {\n        return this.props.filterOption(filter, item);\n      }\n\n      var _renderItem = this.renderItem(item),\n          renderedText = _renderItem.renderedText;\n\n      return renderedText.indexOf(filter) >= 0;\n    }\n  }, {\n    key: 'handleFilter',\n    value: function handleFilter(dataSource, filter) {\n      var _this2 = this;\n\n      var showItems = [];\n      dataSource.map(function (item) {\n        if (!_this2.matchFilter(filter, item)) {\n          return null;\n        }\n\n        showItems.push(item);\n        return item;\n      });\n      this.setState({\n        dataSource: showItems\n      }, function () {\n        /* TODO: maybe we can scroll to the position which user is looking at*/\n        _this2.list.scrollToRow(0);\n      });\n    }\n  }, {\n    key: 'handleClear',\n    value: function handleClear() {\n      this.setState({\n        filter: '',\n        dataSource: this.props.dataSource\n      });\n    }\n  }, {\n    key: 'rowRenderer',\n    value: function rowRenderer(_ref) {\n      var _key = _ref._key,\n          index = _ref.index,\n          _isScrolling = _ref._isScrolling,\n          _isVisible = _ref._isVisible,\n          _parent = _ref._parent,\n          style = _ref.style;\n      var item = this.state.dataSource[index];\n\n      var _renderItem2 = this.renderItem(item),\n          renderedText = _renderItem2.renderedText,\n          renderedEl = _renderItem2.renderedEl;\n\n      var checked = this.props.selectedKeys.indexOf(item.key) >= 0;\n      var itemPrefixCls = prefixCls + '-list';\n\n      if (this.props.rowKey) {\n        item.key = this.props.rowKey(item);\n      }\n\n      return React.createElement(Item, {\n        key: item.key,\n        item: item,\n        checked: checked,\n        style: style,\n        renderedText: renderedText,\n        renderedEl: renderedEl,\n        disabled: item.disabled,\n        onClick: this.handleSelect,\n        prefixCls: itemPrefixCls\n      });\n    }\n  }, {\n    key: 'renderItem',\n    value: function renderItem(item) {\n      var _props$render = this.props.render,\n          render = _props$render === undefined ? noop : _props$render;\n      var renderResult = render(item);\n      var isRenderResultPlain = isRenderResultPlainObject(renderResult);\n      return {\n        renderedText: isRenderResultPlain ? renderResult.value : renderResult,\n        renderedEl: isRenderResultPlain ? renderResult.label : renderResult\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          footer = _props.footer,\n          showSearch = _props.showSearch,\n          showHeader = _props.showHeader,\n          selectedKeys = _props.selectedKeys,\n          itemUnit = _props.itemUnit,\n          itemsUnit = _props.itemsUnit,\n          titleText = _props.titleText,\n          style = _props.style,\n          notFoundContent = _props.notFoundContent,\n          searchPlaceholder = _props.searchPlaceholder;\n      var dataSource = this.state.dataSource;\n      var className = classNames(_defineProperty({}, prefixCls + '-list', true));\n      var footerDom = footer(_Object$assign({}, this.props));\n      var listFooter = footerDom ? React.createElement('div', {\n        className: prefixCls + '-list-footer'\n      }, footerDom) : null;\n      var checkStatus = this.getCheckStatus();\n      var checkedAll = checkStatus === 'all';\n      var checkAllCheckbox = React.createElement(_default, {\n        checked: checkedAll,\n        indeterminate: checkStatus === 'part',\n        onChange: function onChange() {\n          return _this3.handleSelectAll(checkedAll);\n        }\n      });\n      var unit = dataSource.length > 1 ? itemsUnit : itemUnit; // height is not 100%, so there should minus 2px of the boder of transfer-list\n\n      var bodyHeight = style.height - 2;\n      bodyHeight = showHeader ? bodyHeight - 33 : bodyHeight;\n      bodyHeight = showSearch ? bodyHeight - 38 : bodyHeight;\n      bodyHeight = listFooter !== null ? bodyHeight - 32 : bodyHeight;\n      var header = showHeader ? React.createElement('div', {\n        className: prefixCls + '-list-header'\n      }, checkAllCheckbox, React.createElement('span', {\n        className: prefixCls + '-list-header-selected'\n      }, React.createElement('span', null, (selectedKeys.length > 0 ? selectedKeys.length + '/' : '') + dataSource.length, ' ', unit), React.createElement('span', {\n        className: prefixCls + '-list-header-title'\n      }, titleText))) : null;\n      var search = showSearch ? React.createElement(Search, {\n        value: this.state.filter,\n        onChange: this.handleFilterWapper,\n        handleClear: this.handleClear,\n        prefixCls: prefixCls + '-list-search',\n        placeholder: searchPlaceholder\n      }) : null;\n      return React.createElement('div', {\n        className: className,\n        style: style\n      }, header, search, React.createElement(List, {\n        ref: function ref(list) {\n          _this3.list = list;\n        },\n        height: dataSource.length === 0 ? 0 : bodyHeight,\n        rowCount: dataSource.length,\n        rowHeight: this.props.rowHeight,\n        rowRenderer: this.rowRenderer,\n        width: 1,\n        className: prefixCls + '-list-virtualized'\n      }), dataSource.length === 0 && React.createElement('div', {\n        className: prefixCls + '-list-body-not-found',\n        style: {\n          height: bodyHeight + 'px',\n          lineHeight: bodyHeight + 'px'\n        }\n      }, notFoundContent), listFooter);\n    }\n  }]);\n\n  return SelectList;\n}(React.Component);\n\nexport default SelectList;\nSelectList.defaultProps = {\n  filterOption: undefined,\n  footer: noop,\n  showSearch: false,\n  showHeader: true,\n  itemUnit: '',\n  itemsUnit: '',\n  titleText: '',\n  style: {\n    width: 200,\n    height: 300\n  },\n  notFoundContent: 'Not Found',\n  searchPlaceholder: 'Search here',\n  rowKey: undefined\n};\nSelectList.propTypes = {\n  render: PropTypes.func.isRequired,\n  dataSource: PropTypes.array.isRequired,\n  selectedKeys: PropTypes.array.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  filterOption: PropTypes.func,\n  footer: PropTypes.func,\n  showSearch: PropTypes.bool,\n  showHeader: PropTypes.bool,\n  itemUnit: PropTypes.string,\n  itemsUnit: PropTypes.string,\n  titleText: PropTypes.string,\n  rowHeight: PropTypes.number.isRequired,\n  style: PropTypes.shape({\n    height: PropTypes.number.isRequired,\n    // not support %\n    width: PropTypes.any\n  }),\n  notFoundContent: PropTypes.string,\n  searchPlaceholder: PropTypes.string,\n  rowKey: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}